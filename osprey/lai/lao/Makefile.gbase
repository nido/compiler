#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for lao
#

#----------------------------------------------------------------------
#  Information about Makefile
#
#  This Makefile is used to build the 32 bit host/target version of the
#  back-end
#
#  *  This Makefile does not require that targ_info has already been built.
#
#  *  Because the Makefile removes temporary files that are in the
#     current directory (at startup and on interrupts) you can't
#     run two or more makes in the same directory at the same time.
#     (Perhaps, If I could force the temp files out to a temp directory,
#     this could be changed?)
#
#  *  Because lao.so depends on wopt.so and be.so, it normally builds
#     them first.  But it does so only if the make target is "default"
#     or "install", so a "quick" build can be done by specifying the
#     target as lao.so or a .o file.  (It can't currently be installed
#     that way, however.)
#
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build.
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)
CURDIR  = .
ifndef TARG_OPT_DIR
TARG_OPT_DIR = $(BUILD_AREA)/wopt
endif

ifndef TARG_IPL_DIR
TARG_IPL_DIR = $(BUILD_AREA)/ipl
endif

ifndef TARG_BE
TARG_BE = $(TARGDIR)/be
endif


#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#----------------------------------------------------------------------
ifdef LOCAL_BE_DIR
CVERSION  =  -xansi
TARG_BE_DIR = $(TARGDIR)/$(LOCAL_BE_DIR)
else
CVERSION = 
TARG_BE_DIR = $(TARGDIR)/be
endif
LAO_ROOT ?= $(ROOT)

#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------
HOSTDEFS += -Dsgi
HOSTDEFS += -DBACK_END -DMONGOOSE_BE
HOSTDEFS += -Dlonglong
# need to define _LONGLONG and _SVR4_SOURCE to allow compilation with -ansi.
HOSTDEFS += -D_LONGLONG -D_SVR4_SOURCE

ifeq ($(BUILD_OPTIMIZE), DEBUG)
HOSTDEFS += -DIs_True_On
HOSTDEFS += -DInsist_On 
endif

ifeq ($(BUILD_PCH), USE_PCH)
HOSTDEFS += -DUSE_PCH
endif

WOFF = -fullwarn

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------

TARG_TARG_INFO_DIR	= $(TARGDIR)/targ_info
TARG_LAI_DIR		= $(TARGDIR)/lai

BE_DIR 			= $(BUILD_TOT)/be
BE_BE_DIR		= $(BE_DIR)/be
BE_CG_DIR 		= $(BE_DIR)/cg
BE_COM_DIR 		= $(BE_DIR)/com
BE_REGION_DIR		= $(BE_DIR)/region
BE_PROMPF_DIR		= $(BE_DIR)/prompf_anl
ifndef BE_OPT_DIR
BE_OPT_DIR 		= $(BE_DIR)/opt
endif
BE_LNOPT_DIR 		= $(BE_DIR)/lno
BE_LAI_DIR		= $(BUILD_TOT)/lai
BE_LAO_DIR		= $(BE_LAI_DIR)/lao
BE_CG_GRA_DIR		= $(BE_CG_DIR)/gra_mon
COMMON_DIR 		= $(BUILD_TOT)/common
COMMON_COM_DIR 		= $(COMMON_DIR)/com
COMMON_LIB_DIR 		= $(COMMON_DIR)/lib
COMMON_UTIL_DIR 	= $(COMMON_DIR)/util
COMMON_STL_DIR 		= $(COMMON_DIR)/stl
COMMON_TARG_CONFIG_DIR = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
COMMON_TARG_BE_DIR = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/be
COMMON_TARG_CG_DIR = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/cg
COMMON_TARG_EMIT_DIR = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/emit
COMMON_TARG_EXP_DIR = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/expand
COMMON_TARG_ACCESS_DIR = $(BUILD_TOT)/targinfo/access
INCLUDE_DIR 		= $(ROOT)/usr/include


# These are the directories in which to look for source files.

SRC_DIRS = \
  $(BE_LAO_DIR)

HEADER_DIRS = 		\
  $(SRC_DIRS)		\
  $(BE_LAI_DIR)		\
  $(BE_CG_DIR)			\
  $(BE_CG_GRA_DIR)		\
  $(COMMON_COM_DIR)		\
  $(COMMON_UTIL_DIR)		\
  $(COMMON_TARG_CONFIG_DIR)	\
  $(BE_TARG_DIR)		\
  $(COMMON_TARG_CG_DIR)		\
  $(COMMON_TARG_EMIT_DIR)	\
  $(COMMON_TARG_EXP_DIR)	\
  $(COMMON_TARG_ACCESS_DIR)	\
  $(COMMON_STL_DIR)	\
  $(BE_COM_DIR)		\
  $(BE_REGION_DIR)	\
  $(BE_PROMPF_DIR)	\
  $(BE_OPT_DIR)		\
  $(TARG_TARG_INFO_DIR)	\
  $(TARG_LAI_DIR)	\
  $(LAO_ROOT)/LAO/include   \
  $(TARG_BE)

#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

BE_LAO_CXX_SRCS = \
  lao_init.cxx \
  lao_stub.cxx \


ifeq ($(BUILD_PCH), USE_PCH)
LAO_PCH_OBJS = $(BE_LAO_CXX_SRCS:.cxx=.o)
LAO_CXX_SRCS =
else
LAO_CXX_SRCS = $(BE_LAO_CXX_SRCS)
endif

LAO_CXX_OBJS = $(LAO_CXX_SRCS:.cxx=.o)

# shared library
ifeq ($(DSO_MODE),SO)
WOPT_DSO=wopt.so
BE_DSO=be.so
IPL_DSO=ipl.so
endif

# static library
ifeq ($(DSO_MODE),STATIC)
# nothing to import at this point
WOPT_DSO=
BE_DSO=
IPL_DSO=
endif

# windows dll
ifeq ($(DSO_MODE),DLL)
WOPT_DSO=wopt_dll.a
BE_DSO=be_dll.a
IPL_DSO=ipl_dll.a
endif

#BD3 ifeq ($(LAO_BUILD_VARIANT),SINGLE_LAO_SO)
LAO_DSOS =
LAO_DSOS += $(LAO_ROOT)/LAO/lib/libLAO.a
LAO_DSOS += $(LAO_ROOT)/LAO/lib/libSCD.a
LAO_DSOS += $(LAO_ROOT)/LAO/lib/libLIR.a
LAO_DSOS += $(LAO_ROOT)/LAO/lib/libCSD.a
LAO_DSOS += $(LAO_ROOT)/LAO/lib/libCCL.a
LAO_DSOS += $(WOPT_DSO) $(BE_DSO) $(IPL_DSO)
#BD3 else
#BD3 LINK_DSOS += $(LAO_ROOT)/LAO/lib/libLAO.so
#BD3 LINK_DSOS += $(LAO_ROOT)/LAO/lib/libSCD.so
#BD3 LINK_DSOS += $(LAO_ROOT)/LAO/lib/libLIR.so
#BD3 LINK_DSOS += $(LAO_ROOT)/LAO/lib/libCSD.so
#BD3 LINK_DSOS += $(LAO_ROOT)/LAO/lib/libCCL.so
#BD3 endif
STD_DSO_LOADOPTS += -Wl,-rpath=$(LAO_ROOT)/LAO/lib:.

ifeq ($(BUILD_HOST), IA64)
ifeq ($(BUILD_COMPILER), SGI)
STD_DSO_LOADOPTS += -Wl,-relax
endif
endif

# extra files to be removed with make clobber
LDIRT = ii_files *.pch

VPATH    =  $(SRC_DIRS)

LCOPTS = $(STD_COMPILE_OPTS)
ifneq ($(BUILD_COMPILER), EDG)
LCOPTS += -fwritable-strings
endif
LCDEFS = $(HOSTDEFS) $(TARGDEFS)
LCINCS = $(addprefix -I, $(HEADER_DIRS))
ifeq ($(BUILD_OS), LINUX)
LCINCS += -I$(BUILD_AREA)/include
endif

ifeq ($(BUILD_COMPILER), EDG)
WOFF = -fullwarn -woff 1172,1174,1209,1375
else
WOFF = 
endif

LC++OPTS = $(STD_COMPILE_OPTS) $(STD_C++_OPTS) $(WOFF) $(PCH_OPTS)
LC++DEFS = $(HOSTDEFS) $(TARGDEFS)
LC++INCS = $(addprefix -I, $(HEADER_DIRS))

LASDEFS = $(HOSTDEFS) $(TARGDEFS)
LASINCS = $(addprefix -I, $(HEADER_DIRS))
LASOPTS = $(STD_COMPILE_OPTS)

# setup stuff to build shared or non-shared
GLDOPTS = $(STD_LOAD_OPTS) $(LD_QUICKSTART_INFO)

DSOSTARTOPT = -check_registry $(TARG_BE)/so_locations -Wl,-no_unresolved
DSOSTARTOPT_32 = $(DSOSTARTOPT)
DSOSTARTOPT_N32 = $(DSOSTARTOPT)

ifeq ($(BUILD_VARIANT), MEM_STATS)
LLDLIBS +=  -lmalloc
LDFLAGS += -lmalloc
endif

#----------------------------------------------------------------------
# File containing the list of symbols exported outside of cg.so
#----------------------------------------------------------------------
ifeq ($(BUILD_COMPILER), EDG)
EXPORT_LIST = -exports_file $(BE_LAO_DIR)/Exported
else
EXPORT_LIST =
endif

#----------------------------------------------------------------------
#  Define target
#----------------------------------------------------------------------

ifdef LINK_DSO
TARGETS = debug-lao
else

# shared library
ifeq ($(DSO_MODE),SO)
TARGETS = lao.so
endif

# windows dll
ifeq ($(DSO_MODE),DLL)
TARGETS = lao.dll
endif

# static library
ifeq ($(DSO_MODE),STATIC)
TARGETS = liblao.a
endif

endif

#----------------------------------------------------------------------
#  Variables describing additional sources, objects, and libraries
#----------------------------------------------------------------------
ifeq ($(BUILD_COMPILER), EDG)
LLDLIBS += -none -lm
endif

default: first $(TARGETS) last

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is
#  built.  If we are making default or install, we first make wopt.so,
#  which makes be.so; otherwise, we just make the specifically
#  requested target.
#----------------------------------------------------------------------

first_local:
ifneq ($(DSO_MODE),STATIC)
	if [ ! -h $(BE_DSO) ]; then ln -sf $(TARG_BE_DIR)/$(BE_DSO) .; fi
	if [ ! -h $(WOPT_DSO) ]; then ln -sf $(TARG_BE_DIR)/$(WOPT_DSO) .; fi
	if [ ! -h $(IPL_DSO) ]; then ln -sf $(TARG_BE_DIR)/$(IPL_DSO) .; fi
endif

first:

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is
#  built.
#----------------------------------------------------------------------
last: make_deps

#----------------------------------------------------------------------
#  Build 'lnopt'
#
#  These rules build the 'lnopt' executable by default, and can install
#  it in the $(BUILD_INSTALL)/usr/lib directory.
#
#----------------------------------------------------------------------


install:: default
ifneq ($(BUILD_OS), IRIX)
	if [ ! -d $(STD_MONGOOSE_OS_LOC) ]; then $(STD_INSTALL) -d $(STD_MONGOOSE_OS_LOC); fi
	for h in $(TARGETS); do \
	    $(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) $$h $(STD_MONGOOSE_OS_LOC) ; \
	done
else
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) -F $(STD_MONGOOSE_LOC) lao.so
 ifeq ($(BUILD_TYPE), SHARED)
 ifndef NOSYSGEN
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) -F /usr/cpu/sysgen/root$(STD_MONGOOSE_LOC) lao.so
 endif
 endif
endif

ifeq ($(BUILD_PCH), USE_PCH)

lao_pch_files: $(LAO_PCH_OBJS) lao_pch.pch

lao.so:  (LAO_CXX_OBJS) $(LAO_PCH_OBJS) \
         $(LAO_DSOS) $(BE_BE_DIR)/so_locations
	$(C++F) -o lao.so $(STD_DSO_LOADOPTS) $(EXPORT_LIST) \
         $(LAO_CXX_OBJS) $(LAO_PCH_OBJS) \
         $(LAO_DSOS) $(LINK_DSOS) $(LLDLIBS) -show
	if [ ! -l be.so ]; then ln -sf $(TARG_BE)/be.so .; fi
	if [ ! -l wopt.so ]; then ln -sf $(TARG_OPT_DIR)/wopt.so .; fi
	if [ ! -l ipl.so ]; then ln -sf $(TARG_IPL_DIR)/ipl.so .; fi
	if [ ! -l be ]; then ln -sf $(TARG_BE)/be .; fi
	if [ ! -l lao ]; then ln -sf $(TARG_BE)/be lao; fi

else

# GNU linker needs -Bsymbolic so that references to global symbols
# are bound to the definitions within the shared library, if any

#
# shared library
#
ifeq ($(DSO_MODE),SO)

ifeq ($(BUILD_OS), LINUX)
lao.so:	$(LAO_CXX_OBJS) \
	$(LAO_DSOS) $(BE_BE_DIR)/so_locations
	$(C++F) -o lao.so -Wl,-Bsymbolic $(STD_DSO_LOADOPTS) $(EXPORT_LIST) \
	$(LAO_CXX_OBJS) $(LAO_DSOS) $(LINK_DSOS) $(LLDLIBS)
else
lao.so:	$(LAO_CXX_OBJS) \
	$(LAO_DSOS) $(BE_BE_DIR)/so_locations
# wopt depends on be.so,wopt.so, ipl.so availability
	$(C++F) -o lao.so $(STD_DSO_LOADOPTS) $(EXPORT_LIST) \
	$(LAO_CXX_OBJS) $(LAO_DSOS) $(LINK_DSOS) $(LLDLIBS)
endif

wopt.so:	
	if [ ! -h wopt.so ]; then ln -sf $(TARG_OPT_DIR)/wopt.so .; fi

be.so:	
	if [ ! -h be.so ]; then ln -sf $(TARG_BE)/be.so .; fi

ipl.so:	
	if [ ! -h ipl.so ]; then ln -sf $(TARG_IPL_DIR)/ipl.so .; fi
endif

#
# windows DLL
#
ifeq ($(DSO_MODE),DLL)

LDDSOOPTS= $(LINK_DSOS) $(LLDLIBS)

lao.dll lao_dll.a : $(LAO_CXX_OBJS)
	$(CXX) --shared -o lao.dll -Wl,--out-implib,lao_dll.a \
	$(LAO_CXX_OBJS) $(LDDSOOPTS) \
	-Wl,--image-base=0x80000000
endif


#
# static library
#
ifeq ($(DSO_MODE),STATIC)
liblao.a: $(LAO_CXX_OBJS)
	$(AR) rc $@ $^
endif

endif

LDIRT += be.so wopt.so ipl.so be bedriver lao


ifdef LINK_DSO
LINK_DSO_OPTS += -L .

debug-lao: lao.so
	rm -f $(BUILD_AREA)/be/bedriver $(BUILD_AREA)/be/be
	(cd $(TARG_BE); $(MAKE) BE_OPT_DIR='$(BE_OPT_DIR)' \
                                     LINK_DSO='$(LINK_DSO)' \
                                     LINK_DSO_OPTS='$(LINK_DSO_OPTS) -L.' \
                                 be)
endif

#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)

#----------------------------------------------------------------------
#  Special case rules for files that want to be individualistic
#----------------------------------------------------------------------

ifeq ($(BUILD_COMPILER), EDG)
DSONAMEOPT = -soname lao.so
else
DSONAMEOPT =
endif

#----------------------------------------------------------------------
#  Special case rules for files that want to be individualistic
#----------------------------------------------------------------------

.cxx.pch:
	$(C++F) -c $(.IMPSRC)
