

#define i386 1
#define linux 1
#define unix 1



#define CCL_h_INCLUDED 1
#define Except_REQUIRE(t) 

#define MDS_h_INCLUDED 

/*
 * !!!!	MDS.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

//


#define ECL_CONFIG_H 





/* This file contains all the definitions that are generated by configure
 * and must be visible in the installed version
 **/

#define ECL_TRACE 1
#define ECL_DEBUG 0
/*
 * Platform --	Enumeration.
 */
typedef enum Platform {
#define Platform(NAME,CHARWIDTH,ADDRWIDTH,ENDIAN) Platform_ ##NAME,


/*
  st200/Platform.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Platform_st200_arch,

#undef Platform


#define PlatformInt_TYPEDEF typedef int32_t PlatformInt;



#define PlatformUInt_TYPEDEF typedef uint32_t PlatformUInt;


  Platform__
#undef Platform
} Platform;
typedef uint8_t short_Platform;

//
typedef int32_t PlatformInt;
typedef uint32_t PlatformUInt;

/*
 * Encoding --	Enumeration.
 */
typedef enum Encoding {
#define Encoding(NAME,PROCESSOR,WORDTYPE,WORDCOUNT) Encoding_ ##NAME,


/*
  st200/Encoding.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Encoding_st220_ANY,
Encoding_st220_ANYX,
Encoding_st231_ANY,
Encoding_st231_ANYX,
Encoding_st240_ANY,
Encoding_st240_ANYX,

#undef Encoding


#define Encoding_SIZE_MAX 8


  Encoding__
#undef Encoding
} Encoding;
typedef uint8_t short_Encoding;

/*
 * NativeType --	Enumeration.
 */
typedef enum NativeType {
#define NativeType(NAME,WIDTH,SIGNED,SIZEOF,ALIGN,FORMAT,SLICE) NativeType_ ##NAME,


/*
  st200/NativeType.enum --
  Automatically generated from the Machine Description System (MDS).
*/



NativeType_st200_Bool,
NativeType_st200_UInt8,
NativeType_st200_Int8,
NativeType_st200_UInt16,
NativeType_st200_Int16,
NativeType_st200_UInt32,
NativeType_st200_Int32,
NativeType_st200_UInt64,
NativeType_st200_Int64,
NativeType_st200_UIntPtr,
NativeType_st200_IntPtr,
NativeType_st200_Float32,
NativeType_st200_Float64,

#undef NativeType

  NativeType__
#undef NativeType
} NativeType;
typedef uint8_t short_NativeType;

/*
 * StorageCell --	Enumeration.
 */
typedef enum StorageCell {
#define StorageCell(NAME,KIND,WIDTH) StorageCell_ ##NAME,


/*
  st200/Storage.enum --
  Automatically generated from the Machine Description System (MDS).
*/



StorageCell_st200_PC,
StorageCell_st200_BR0,
StorageCell_st200_BR1,
StorageCell_st200_BR2,
StorageCell_st200_BR3,
StorageCell_st200_BR4,
StorageCell_st200_BR5,
StorageCell_st200_BR6,
StorageCell_st200_BR7,
StorageCell_st200_GR0,
StorageCell_st200_GR1,
StorageCell_st200_GR2,
StorageCell_st200_GR3,
StorageCell_st200_GR4,
StorageCell_st200_GR5,
StorageCell_st200_GR6,
StorageCell_st200_GR7,
StorageCell_st200_GR8,
StorageCell_st200_GR9,
StorageCell_st200_GR10,
StorageCell_st200_GR11,
StorageCell_st200_GR12,
StorageCell_st200_GR13,
StorageCell_st200_GR14,
StorageCell_st200_GR15,
StorageCell_st200_GR16,
StorageCell_st200_GR17,
StorageCell_st200_GR18,
StorageCell_st200_GR19,
StorageCell_st200_GR20,
StorageCell_st200_GR21,
StorageCell_st200_GR22,
StorageCell_st200_GR23,
StorageCell_st200_GR24,
StorageCell_st200_GR25,
StorageCell_st200_GR26,
StorageCell_st200_GR27,
StorageCell_st200_GR28,
StorageCell_st200_GR29,
StorageCell_st200_GR30,
StorageCell_st200_GR31,
StorageCell_st200_GR32,
StorageCell_st200_GR33,
StorageCell_st200_GR34,
StorageCell_st200_GR35,
StorageCell_st200_GR36,
StorageCell_st200_GR37,
StorageCell_st200_GR38,
StorageCell_st200_GR39,
StorageCell_st200_GR40,
StorageCell_st200_GR41,
StorageCell_st200_GR42,
StorageCell_st200_GR43,
StorageCell_st200_GR44,
StorageCell_st200_GR45,
StorageCell_st200_GR46,
StorageCell_st200_GR47,
StorageCell_st200_GR48,
StorageCell_st200_GR49,
StorageCell_st200_GR50,
StorageCell_st200_GR51,
StorageCell_st200_GR52,
StorageCell_st200_GR53,
StorageCell_st200_GR54,
StorageCell_st200_GR55,
StorageCell_st200_GR56,
StorageCell_st200_GR57,
StorageCell_st200_GR58,
StorageCell_st200_GR59,
StorageCell_st200_GR60,
StorageCell_st200_GR61,
StorageCell_st200_GR62,
StorageCell_st200_GR63,
StorageCell_st200_MEM,
StorageCell_Volatile,

#undef Storage


#define StorageCell_Control StorageCell_st200_PC



#define StorageCell_Memory StorageCell_st200_MEM


  StorageCell__,
#undef StorageCell
} StorageCell;
typedef uint8_t short_StorageCell;

/*
 * Register --	Enumeration.
 */
typedef enum Register {
#define Register(NAME,NAMES,REGFILE,WIRED,STORAGECELLS,MINREADSTAGES) Register_ ##NAME,


/*
  st200/Register.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Register_st200_BR0,


Register_st200_BR1,


Register_st200_BR2,


Register_st200_BR3,


Register_st200_BR4,


Register_st200_BR5,


Register_st200_BR6,


Register_st200_BR7,


Register_st200_GR0,


Register_st200_GR1,


Register_st200_GR2,


Register_st200_GR3,


Register_st200_GR4,


Register_st200_GR5,


Register_st200_GR6,


Register_st200_GR7,


Register_st200_GR8,


Register_st200_GR9,


Register_st200_GR10,


Register_st200_GR11,


Register_st200_GR12,


Register_st200_GR13,


Register_st200_GR14,


Register_st200_GR15,


Register_st200_GR16,


Register_st200_GR17,


Register_st200_GR18,


Register_st200_GR19,


Register_st200_GR20,


Register_st200_GR21,


Register_st200_GR22,


Register_st200_GR23,


Register_st200_GR24,


Register_st200_GR25,


Register_st200_GR26,


Register_st200_GR27,


Register_st200_GR28,


Register_st200_GR29,


Register_st200_GR30,


Register_st200_GR31,


Register_st200_GR32,


Register_st200_GR33,


Register_st200_GR34,


Register_st200_GR35,


Register_st200_GR36,


Register_st200_GR37,


Register_st200_GR38,


Register_st200_GR39,


Register_st200_GR40,


Register_st200_GR41,


Register_st200_GR42,


Register_st200_GR43,


Register_st200_GR44,


Register_st200_GR45,


Register_st200_GR46,


Register_st200_GR47,


Register_st200_GR48,


Register_st200_GR49,


Register_st200_GR50,


Register_st200_GR51,


Register_st200_GR52,


Register_st200_GR53,


Register_st200_GR54,


Register_st200_GR55,


Register_st200_GR56,


Register_st200_GR57,


Register_st200_GR58,


Register_st200_GR59,


Register_st200_GR60,


Register_st200_GR61,


Register_st200_GR62,


Register_st200_GR63,


Register_st200_LR,


Register_st200_PR0,


Register_st200_PR1,


Register_st200_PR2,


Register_st200_PR3,


Register_st200_PR4,


Register_st200_PR5,


Register_st200_PR6,


Register_st200_PR7,


Register_st200_PR8,


Register_st200_PR9,


Register_st200_PR10,


Register_st200_PR11,


Register_st200_PR12,


Register_st200_PR13,


Register_st200_PR14,


Register_st200_PR15,


Register_st200_PR16,


Register_st200_PR17,


Register_st200_PR18,


Register_st200_PR19,


Register_st200_PR20,


Register_st200_PR21,


Register_st200_PR22,


Register_st200_PR23,


Register_st200_PR24,


Register_st200_PR25,


Register_st200_PR26,


Register_st200_PR27,


Register_st200_PR28,


Register_st200_PR29,


Register_st200_PR30,



#undef Register


#define RegisterStorageCells_COUNT_MAX 2



#define RegisterList_COUNT_MAX 104



#define RegisterSet_WORDTYPE uint32_t


#define RegisterSet_WORDBITS (sizeof(RegisterSet_WORDTYPE)*8)


#define RegisterSet_MAJOR(member) ((Register)(member)/(RegisterSet_WORDBITS))


#define RegisterSet_MINOR(member) ((Register)(member)&(RegisterSet_WORDBITS - 1))


#define RegisterSet_WORDCOUNT (RegisterSet_MAJOR(104) + 1)



#define Register_NAMES_COUNT_MAX 1


  Register__,
#undef Register
  Register__Volatile,
  Register__Control,
  Register__Memory,
  Register___,
} Register;
typedef uint8_t short_Register;

/*
 * RegFile --	Enumeration.
 */
typedef enum RegFile {
#define RegFile(NAME,WIDTH,LOWREGISTER,HIGHREGISTER,NATIVETYPES) RegFile_ ##NAME,


/*
  st200/RegFile.enum --
  Automatically generated from the Machine Description System (MDS).
*/



RegFile_st200_BR,

RegFile_st200_GR,

RegFile_st200_PR,


#undef RegFile

  RegFile__
#undef RegFile
} RegFile;
typedef uint8_t short_RegFile;

/*
 * RegClass --	Enumeration.
 */
typedef enum RegClass {
#define RegClass(NAME,REGFILE,REGISTERS,ENCODE,DECODE,MINREADSTAGES) RegClass_ ##NAME,


/*
  st200/RegClass.enum --
  Automatically generated from the Machine Description System (MDS).
*/



RegClass_st200_,
RegClass_st200_branch,





RegClass_st200_general,





RegClass_st200_nolink,





RegClass_st200_link,





RegClass_st200_predicate,





RegClass_st200_paired,





RegClass_st200_pairedfirst,





RegClass_st200_pairedsecond,





RegClass_st200_nzpaired,





RegClass_st200_nzpairedfirst,





RegClass_st200_nzpairedsecond,






#undef RegClass

  RegClass__
#undef RegClass
} RegClass;
typedef uint8_t short_RegClass;

/*
 * RegMask --	Enumeration.
 */
typedef enum RegMask {
#define RegMask(NAME,REGISTERS,REGFILE,ENCODE,DECODE) RegMask_ ##NAME,


/*
  st200/RegMask.enum --
  Automatically generated from the Machine Description System (MDS).
*/




#undef RegMask

  RegMask__
#undef RegMask
} RegMask;
typedef uint8_t short_RegMask;

/*
 * ModifierClass --	Enumeration.
 */
typedef enum ModifierClass {
#define Modifier(NAME,MEMBERS,ENCODE,DECODE) Modifier_ ##NAME,


/*
  st200/Modifier.enum --
  Automatically generated from the Machine Description System (MDS).
*/




#undef Modifier


#define Modifier_NAMES_COUNT_MAX 0


  ModifierClass__
#undef Modifier
} ModifierClass;
typedef uint8_t short_ModifierClass;

/*
 * Modifier --	Enumeration.
 */
typedef enum Modifier {
#define ALIAS(alias,name) Modifier_ ##alias = Modifier_ ##name,
#define ALIASES(count,items) items
#define MEMBER(name,ENCODED,NAMES,ALIASES) Modifier_ ##name, ALIASES

#define MEMBERS(count,items) items
#define Modifier(NAME,MEMBERS,ENCODE,DECODE) MEMBERS


/*
  st200/Modifier.enum --
  Automatically generated from the Machine Description System (MDS).
*/




#undef Modifier





  Modifier__
#undef Modifier
#undef MEMBERS
#undef MEMBER
#undef ALIASES
#undef ALIAS
#undef ENCODED
} Modifier;
typedef uint8_t short_Modifier;

/*
 * Relocation --	Enumeration.
 */
typedef enum Relocation {
#define Relocation(NAME,RELATIVE,ENCODE,DECODE,LINKER) Relocation_ ##NAME,


/*
  st200/Relocation.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Relocation_st200_,
Relocation_st200_btarg,



Relocation_st200_isrc2,



Relocation_st200_xsrc2,



Relocation_st200_xsrc2_gprel,



Relocation_st200_xsrc2_gotoff,



Relocation_st200_xsrc2_neggprel,




#undef Relocation

  Relocation__
#undef Relocation
} Relocation;
typedef uint8_t short_Relocation;
#define Relocation_ (Relocation)0

/*
 * Immediate --	Enumeration.
 */
typedef enum Immediate {
#define Immediate(NAME,MINVALUE,MAXVALUE,SIGNED,RELOCATIONS,ENCODE,DECODE) Immediate_ ##NAME,


/*
  st200/Immediate.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Immediate_st200_,


Immediate_st200_btarg,



Immediate_st200_isrc2,



Immediate_st200_imm,



Immediate_st200_sbrknum,



Immediate_st200_xsrc2,



Immediate_st200_brknum,




#undef Immediate


#define ImmediateRelocations_COUNT_MAX 4


  Immediate__
#undef Immediate
} Immediate;
typedef uint8_t short_Immediate;

/*
 * Operand --	Enumeration.
 */
typedef enum Operand {
#define Operand(NAME,METHOD,WORDTYPE,ENCODE,DECODE) Operand_ ##NAME,


/*
  st200/Operand.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Operand_st200_bcond,


Operand_st200_bdest,


Operand_st200_bdest2,


Operand_st200_btarg,


Operand_st200_dest,


Operand_st200_nldest,


Operand_st200_ibdest,


Operand_st200_idest,


Operand_st200_nlidest,


Operand_st200_isrc2,


Operand_st200_imm,


Operand_st200_scond,


Operand_st200_src1,


Operand_st200_src2,


Operand_st200_sbrknum,


Operand_st200_xsrc2,


Operand_st200_bsrc1,


Operand_st200_bsrc2,


Operand_st200_idestp,


Operand_st200_pcond,


Operand_st200_src2p,


Operand_st200_brknum,



#undef Operand


#define Operands(NAME,OPERANDS,RELOCATABLE,ENCODE,DECODE) 
#undef Operands


#define Operands_COUNT_MAX 5



#define Operands_IMMEDIATE_COUNT_MAX 1



#define Operands_REGMASK_COUNT_MAX 0


  Operand__
#undef Operand
} Operand;
typedef uint8_t short_Operand;

/*
 * Format --	Enumeration.
 */
typedef enum Format {
#define Format(NAME,OPERANDS) Format_ ##NAME,


/*
  st200/Format.enum --
  Automatically generated from the Machine Description System (MDS).
*/




#undef Format

  Format__
#undef Format
} Format;
typedef uint8_t short_Format;

/*
 * Syntax --	Enumeration.
 */
typedef enum Syntax {
#define Syntax(NAME,CONTENTS) Syntax_ ##NAME,


/*
  st200/Syntax.enum --
  Automatically generated from the Machine Description System (MDS).
*/




#undef Syntax

  Syntax__
#undef Syntax
} Syntax;
typedef uint8_t short_Syntax;

/*
 * Operands --	Enumeration.
 */
typedef enum Operands {
#define Operands(NAME,OPERANDS,RELOCATABLE,ENCODE,DECODE) Operands_ ##NAME,


/*
  st200/Operand.enum --
  Automatically generated from the Machine Description System (MDS).
*/

#define Operand(NAME,METHOD,WORDTYPE,ENCODE,DECODE) 
#undef Operand




Operands_st200_dest_src1_src2,


Operands_st200_idest_src1_isrc2,


Operands_st200_idest_src1_xsrc2,


Operands_st200_dest_bdest_src1_src2_scond,


Operands_st200_bdest_src1_src2,


Operands_st200_ibdest_src1_isrc2,


Operands_st200_ibdest_src1_xsrc2,


Operands_st200_bcond_btarg,


Operands_st200_idest_src1,


Operands_st200_btarg,


Operands_st200_imm,


Operands_st200_nlidest_isrc2_src1,


Operands_st200_nlidest_xsrc2_src1,


Operands_st200_idest_isrc2_src1,


Operands_st200_idest_xsrc2_src1,


Operands_st200_nldest_src1_src2,


Operands_st200_nlidest_src1_isrc2,


Operands_st200_nlidest_src1_xsrc2,


Operands_st200_isrc2_src1,


Operands_st200_xsrc2_src1,


Operands_st200_sbrknum,


Operands_st200_dest_scond_src1_src2,


Operands_st200_idest_scond_src1_isrc2,


Operands_st200_idest_scond_src1_xsrc2,


Operands_st200_isrc2_src1_src2,


Operands_st200_xsrc2_src1_src2,


Operands_st200_dest_src2_src1,


Operands_st200_idest_scond,


Operands_st200_bdest_src1,


Operands_st200_dest_src2,


Operands_st200_idest_isrc2,


Operands_st200_idest_xsrc2,


Operands_st200_src2,


Operands_st200_bdest2_src1_src2,


Operands_st200_dest_src1,


Operands_st200_nldest_scond_src1_src2,


Operands_st200_bdest2_src1,


Operands_st200_dest_scond,


Operands_st200_bdest2_bsrc1_bsrc2,


Operands_st200_nldest_src1,


Operands_st200_brknum,


Operands_st200_nlidest_pcond_isrc2_src1,


Operands_st200_nlidest_pcond_xsrc2_src1,


Operands_st200_idestp_isrc2_src1,


Operands_st200_idestp_xsrc2_src1,


Operands_st200_idestp_pcond_isrc2_src1,


Operands_st200_idestp_pcond_xsrc2_src1,


Operands_st200_idest_pcond_isrc2_src1,


Operands_st200_idest_pcond_xsrc2_src1,


Operands_st200_bdest2_bsrc1,


Operands_st200_pcond_isrc2_src1,


Operands_st200_pcond_xsrc2_src1,


Operands_st200_isrc2_src1_pcond_src2,


Operands_st200_xsrc2_src1_pcond_src2,


Operands_st200_isrc2_src1_src2p,


Operands_st200_xsrc2_src1_src2p,


Operands_st200_isrc2_src1_pcond_src2p,


Operands_st200_xsrc2_src1_pcond_src2p,


Operands_st200_bdest2_src2_src1,


Operands_st200_dest_scond_src2_src1,



#undef Operands
  Operands__
#undef Operand
} Operands;
typedef uint8_t short_Operands;

/*
 * Instance --	Enumeration.
 */
typedef enum Instance {
#define Instance(NAME,SCHEDULING,ENCODING,OPCODES,OPERANDS,INCREMENT,MNEMONIC,SYNTAX,ACTIONARRAY,OPERATOR) Instance_ ##NAME,



/*
  st200/Instance.enum --
  Automatically generated from the Machine Description System (MDS).
*/




Instance_st220_add_dest_src1_src2,
Instance_st220_add_idest_src1_isrc2,
Instance_st220_add_idest_src1_xsrc2,
Instance_st220_addcg_dest_bdest_src1_src2_scond,
Instance_st220_and_dest_src1_src2,
Instance_st220_and_idest_src1_isrc2,
Instance_st220_and_idest_src1_xsrc2,
Instance_st220_andc_dest_src1_src2,
Instance_st220_andc_idest_src1_isrc2,
Instance_st220_andc_idest_src1_xsrc2,
Instance_st220_andl_dest_src1_src2,
Instance_st220_andl_bdest_src1_src2,
Instance_st220_andl_idest_src1_isrc2,
Instance_st220_andl_ibdest_src1_isrc2,
Instance_st220_andl_idest_src1_xsrc2,
Instance_st220_andl_ibdest_src1_xsrc2,
Instance_st220_asm_0_dest_src1_src2,
Instance_st220_asm_1_dest_src1_src2,
Instance_st220_asm_2_dest_src1_src2,
Instance_st220_asm_3_dest_src1_src2,
Instance_st220_asm_4_dest_src1_src2,
Instance_st220_asm_5_dest_src1_src2,
Instance_st220_asm_6_dest_src1_src2,
Instance_st220_asm_7_dest_src1_src2,
Instance_st220_asm_8_dest_src1_src2,
Instance_st220_asm_9_dest_src1_src2,
Instance_st220_asm_10_dest_src1_src2,
Instance_st220_asm_11_dest_src1_src2,
Instance_st220_asm_12_dest_src1_src2,
Instance_st220_asm_13_dest_src1_src2,
Instance_st220_asm_14_dest_src1_src2,
Instance_st220_asm_15_dest_src1_src2,
Instance_st220_asm_16_idest_src1_isrc2,
Instance_st220_asm_16_idest_src1_xsrc2,
Instance_st220_asm_17_idest_src1_isrc2,
Instance_st220_asm_17_idest_src1_xsrc2,
Instance_st220_asm_18_idest_src1_isrc2,
Instance_st220_asm_18_idest_src1_xsrc2,
Instance_st220_asm_19_idest_src1_isrc2,
Instance_st220_asm_19_idest_src1_xsrc2,
Instance_st220_asm_20_idest_src1_isrc2,
Instance_st220_asm_20_idest_src1_xsrc2,
Instance_st220_asm_21_idest_src1_isrc2,
Instance_st220_asm_21_idest_src1_xsrc2,
Instance_st220_asm_22_idest_src1_isrc2,
Instance_st220_asm_22_idest_src1_xsrc2,
Instance_st220_asm_23_idest_src1_isrc2,
Instance_st220_asm_23_idest_src1_xsrc2,
Instance_st220_asm_24_idest_src1_isrc2,
Instance_st220_asm_24_idest_src1_xsrc2,
Instance_st220_asm_25_idest_src1_isrc2,
Instance_st220_asm_25_idest_src1_xsrc2,
Instance_st220_asm_26_idest_src1_isrc2,
Instance_st220_asm_26_idest_src1_xsrc2,
Instance_st220_asm_27_idest_src1_isrc2,
Instance_st220_asm_27_idest_src1_xsrc2,
Instance_st220_asm_28_idest_src1_isrc2,
Instance_st220_asm_28_idest_src1_xsrc2,
Instance_st220_asm_29_idest_src1_isrc2,
Instance_st220_asm_29_idest_src1_xsrc2,
Instance_st220_asm_30_idest_src1_isrc2,
Instance_st220_asm_30_idest_src1_xsrc2,
Instance_st220_asm_31_idest_src1_isrc2,
Instance_st220_asm_31_idest_src1_xsrc2,
Instance_st220_br_bcond_btarg,
Instance_st220_break,
Instance_st220_brf_bcond_btarg,
Instance_st220_bswap_idest_src1,
Instance_st220_call_btarg,
Instance_st220_icall,
Instance_st220_clz_idest_src1,
Instance_st220_cmpeq_dest_src1_src2,
Instance_st220_cmpeq_bdest_src1_src2,
Instance_st220_cmpeq_idest_src1_isrc2,
Instance_st220_cmpeq_ibdest_src1_isrc2,
Instance_st220_cmpeq_idest_src1_xsrc2,
Instance_st220_cmpeq_ibdest_src1_xsrc2,
Instance_st220_cmpge_dest_src1_src2,
Instance_st220_cmpge_bdest_src1_src2,
Instance_st220_cmpge_idest_src1_isrc2,
Instance_st220_cmpge_ibdest_src1_isrc2,
Instance_st220_cmpge_idest_src1_xsrc2,
Instance_st220_cmpge_ibdest_src1_xsrc2,
Instance_st220_cmpgeu_dest_src1_src2,
Instance_st220_cmpgeu_bdest_src1_src2,
Instance_st220_cmpgeu_idest_src1_isrc2,
Instance_st220_cmpgeu_ibdest_src1_isrc2,
Instance_st220_cmpgeu_idest_src1_xsrc2,
Instance_st220_cmpgeu_ibdest_src1_xsrc2,
Instance_st220_cmpgt_dest_src1_src2,
Instance_st220_cmpgt_bdest_src1_src2,
Instance_st220_cmpgt_idest_src1_isrc2,
Instance_st220_cmpgt_ibdest_src1_isrc2,
Instance_st220_cmpgt_idest_src1_xsrc2,
Instance_st220_cmpgt_ibdest_src1_xsrc2,
Instance_st220_cmpgtu_dest_src1_src2,
Instance_st220_cmpgtu_bdest_src1_src2,
Instance_st220_cmpgtu_idest_src1_isrc2,
Instance_st220_cmpgtu_ibdest_src1_isrc2,
Instance_st220_cmpgtu_idest_src1_xsrc2,
Instance_st220_cmpgtu_ibdest_src1_xsrc2,
Instance_st220_cmple_dest_src1_src2,
Instance_st220_cmple_bdest_src1_src2,
Instance_st220_cmple_idest_src1_isrc2,
Instance_st220_cmple_ibdest_src1_isrc2,
Instance_st220_cmple_idest_src1_xsrc2,
Instance_st220_cmple_ibdest_src1_xsrc2,
Instance_st220_cmpleu_dest_src1_src2,
Instance_st220_cmpleu_bdest_src1_src2,
Instance_st220_cmpleu_idest_src1_isrc2,
Instance_st220_cmpleu_ibdest_src1_isrc2,
Instance_st220_cmpleu_idest_src1_xsrc2,
Instance_st220_cmpleu_ibdest_src1_xsrc2,
Instance_st220_cmplt_dest_src1_src2,
Instance_st220_cmplt_bdest_src1_src2,
Instance_st220_cmplt_idest_src1_isrc2,
Instance_st220_cmplt_ibdest_src1_isrc2,
Instance_st220_cmplt_idest_src1_xsrc2,
Instance_st220_cmplt_ibdest_src1_xsrc2,
Instance_st220_cmpltu_dest_src1_src2,
Instance_st220_cmpltu_bdest_src1_src2,
Instance_st220_cmpltu_idest_src1_isrc2,
Instance_st220_cmpltu_ibdest_src1_isrc2,
Instance_st220_cmpltu_idest_src1_xsrc2,
Instance_st220_cmpltu_ibdest_src1_xsrc2,
Instance_st220_cmpne_dest_src1_src2,
Instance_st220_cmpne_bdest_src1_src2,
Instance_st220_cmpne_idest_src1_isrc2,
Instance_st220_cmpne_ibdest_src1_isrc2,
Instance_st220_cmpne_idest_src1_xsrc2,
Instance_st220_cmpne_ibdest_src1_xsrc2,
Instance_st220_divs_dest_bdest_src1_src2_scond,
Instance_st220_goto_btarg,
Instance_st220_igoto,
Instance_st220_imml_imm,
Instance_st220_immr_imm,
Instance_st220_ldb_nlidest_isrc2_src1,
Instance_st220_ldb_nlidest_xsrc2_src1,
Instance_st220_ldb_d_nlidest_isrc2_src1,
Instance_st220_ldb_d_nlidest_xsrc2_src1,
Instance_st220_ldbu_nlidest_isrc2_src1,
Instance_st220_ldbu_nlidest_xsrc2_src1,
Instance_st220_ldbu_d_nlidest_isrc2_src1,
Instance_st220_ldbu_d_nlidest_xsrc2_src1,
Instance_st220_ldh_nlidest_isrc2_src1,
Instance_st220_ldh_nlidest_xsrc2_src1,
Instance_st220_ldh_d_nlidest_isrc2_src1,
Instance_st220_ldh_d_nlidest_xsrc2_src1,
Instance_st220_ldhu_nlidest_isrc2_src1,
Instance_st220_ldhu_nlidest_xsrc2_src1,
Instance_st220_ldhu_d_nlidest_isrc2_src1,
Instance_st220_ldhu_d_nlidest_xsrc2_src1,
Instance_st220_ldw_idest_isrc2_src1,
Instance_st220_ldw_idest_xsrc2_src1,
Instance_st220_ldw_d_idest_isrc2_src1,
Instance_st220_ldw_d_idest_xsrc2_src1,
Instance_st220_max_dest_src1_src2,
Instance_st220_max_idest_src1_isrc2,
Instance_st220_max_idest_src1_xsrc2,
Instance_st220_maxu_dest_src1_src2,
Instance_st220_maxu_idest_src1_isrc2,
Instance_st220_maxu_idest_src1_xsrc2,
Instance_st220_min_dest_src1_src2,
Instance_st220_min_idest_src1_isrc2,
Instance_st220_min_idest_src1_xsrc2,
Instance_st220_minu_dest_src1_src2,
Instance_st220_minu_idest_src1_isrc2,
Instance_st220_minu_idest_src1_xsrc2,
Instance_st220_mulh_nldest_src1_src2,
Instance_st220_mulh_nlidest_src1_isrc2,
Instance_st220_mulh_nlidest_src1_xsrc2,
Instance_st220_mulhh_nldest_src1_src2,
Instance_st220_mulhh_nlidest_src1_isrc2,
Instance_st220_mulhh_nlidest_src1_xsrc2,
Instance_st220_mulhhs_nldest_src1_src2,
Instance_st220_mulhhs_nlidest_src1_isrc2,
Instance_st220_mulhhs_nlidest_src1_xsrc2,
Instance_st220_mulhhu_nldest_src1_src2,
Instance_st220_mulhhu_nlidest_src1_isrc2,
Instance_st220_mulhhu_nlidest_src1_xsrc2,
Instance_st220_mulhs_nldest_src1_src2,
Instance_st220_mulhs_nlidest_src1_isrc2,
Instance_st220_mulhs_nlidest_src1_xsrc2,
Instance_st220_mulhu_nldest_src1_src2,
Instance_st220_mulhu_nlidest_src1_isrc2,
Instance_st220_mulhu_nlidest_src1_xsrc2,
Instance_st220_mull_nldest_src1_src2,
Instance_st220_mull_nlidest_src1_isrc2,
Instance_st220_mull_nlidest_src1_xsrc2,
Instance_st220_mullh_nldest_src1_src2,
Instance_st220_mullh_nlidest_src1_isrc2,
Instance_st220_mullh_nlidest_src1_xsrc2,
Instance_st220_mullhu_nldest_src1_src2,
Instance_st220_mullhu_nlidest_src1_isrc2,
Instance_st220_mullhu_nlidest_src1_xsrc2,
Instance_st220_mullhus_nldest_src1_src2,
Instance_st220_mullhus_nlidest_src1_isrc2,
Instance_st220_mullhus_nlidest_src1_xsrc2,
Instance_st220_mulll_nldest_src1_src2,
Instance_st220_mulll_nlidest_src1_isrc2,
Instance_st220_mulll_nlidest_src1_xsrc2,
Instance_st220_mulllu_nldest_src1_src2,
Instance_st220_mulllu_nlidest_src1_isrc2,
Instance_st220_mulllu_nlidest_src1_xsrc2,
Instance_st220_mullu_nldest_src1_src2,
Instance_st220_mullu_nlidest_src1_isrc2,
Instance_st220_mullu_nlidest_src1_xsrc2,
Instance_st220_nandl_dest_src1_src2,
Instance_st220_nandl_bdest_src1_src2,
Instance_st220_nandl_idest_src1_isrc2,
Instance_st220_nandl_ibdest_src1_isrc2,
Instance_st220_nandl_idest_src1_xsrc2,
Instance_st220_nandl_ibdest_src1_xsrc2,
Instance_st220_norl_dest_src1_src2,
Instance_st220_norl_bdest_src1_src2,
Instance_st220_norl_idest_src1_isrc2,
Instance_st220_norl_ibdest_src1_isrc2,
Instance_st220_norl_idest_src1_xsrc2,
Instance_st220_norl_ibdest_src1_xsrc2,
Instance_st220_or_dest_src1_src2,
Instance_st220_or_idest_src1_isrc2,
Instance_st220_or_idest_src1_xsrc2,
Instance_st220_orc_dest_src1_src2,
Instance_st220_orc_idest_src1_isrc2,
Instance_st220_orc_idest_src1_xsrc2,
Instance_st220_orl_dest_src1_src2,
Instance_st220_orl_bdest_src1_src2,
Instance_st220_orl_idest_src1_isrc2,
Instance_st220_orl_ibdest_src1_isrc2,
Instance_st220_orl_idest_src1_xsrc2,
Instance_st220_orl_ibdest_src1_xsrc2,
Instance_st220_pft_isrc2_src1,
Instance_st220_pft_xsrc2_src1,
Instance_st220_prgadd_isrc2_src1,
Instance_st220_prgadd_xsrc2_src1,
Instance_st220_prgset_isrc2_src1,
Instance_st220_prgset_xsrc2_src1,
Instance_st220_prgins,
Instance_st220_rfi,
Instance_st220_sbrk_sbrknum,
Instance_st220_sh1add_dest_src1_src2,
Instance_st220_sh1add_idest_src1_isrc2,
Instance_st220_sh1add_idest_src1_xsrc2,
Instance_st220_sh2add_dest_src1_src2,
Instance_st220_sh2add_idest_src1_isrc2,
Instance_st220_sh2add_idest_src1_xsrc2,
Instance_st220_sh3add_dest_src1_src2,
Instance_st220_sh3add_idest_src1_isrc2,
Instance_st220_sh3add_idest_src1_xsrc2,
Instance_st220_sh4add_dest_src1_src2,
Instance_st220_sh4add_idest_src1_isrc2,
Instance_st220_sh4add_idest_src1_xsrc2,
Instance_st220_shl_dest_src1_src2,
Instance_st220_shl_idest_src1_isrc2,
Instance_st220_shl_idest_src1_xsrc2,
Instance_st220_shr_dest_src1_src2,
Instance_st220_shr_idest_src1_isrc2,
Instance_st220_shr_idest_src1_xsrc2,
Instance_st220_shru_dest_src1_src2,
Instance_st220_shru_idest_src1_isrc2,
Instance_st220_shru_idest_src1_xsrc2,
Instance_st220_slct_dest_scond_src1_src2,
Instance_st220_slct_idest_scond_src1_isrc2,
Instance_st220_slct_idest_scond_src1_xsrc2,
Instance_st220_slctf_dest_scond_src1_src2,
Instance_st220_slctf_idest_scond_src1_isrc2,
Instance_st220_slctf_idest_scond_src1_xsrc2,
Instance_st220_stb_isrc2_src1_src2,
Instance_st220_stb_xsrc2_src1_src2,
Instance_st220_sth_isrc2_src1_src2,
Instance_st220_sth_xsrc2_src1_src2,
Instance_st220_stw_isrc2_src1_src2,
Instance_st220_stw_xsrc2_src1_src2,
Instance_st220_sub_dest_src2_src1,
Instance_st220_sub_idest_isrc2_src1,
Instance_st220_sub_idest_xsrc2_src1,
Instance_st220_sxtb_idest_src1,
Instance_st220_sxth_idest_src1,
Instance_st220_sync,
Instance_st220_syscall_sbrknum,
Instance_st220_xor_dest_src1_src2,
Instance_st220_xor_idest_src1_isrc2,
Instance_st220_xor_idest_src1_xsrc2,
Instance_st220_zxth_idest_src1,
Instance_st220_convbi_idest_scond,
Instance_st220_convib_bdest_src1,
Instance_st220_mov_bsrc_idest_scond,
Instance_st220_mov_bdest_bdest_src1,
Instance_st220_nop,
Instance_st220_mov_dest_src2,
Instance_st220_mov_idest_isrc2,
Instance_st220_mov_idest_xsrc2,
Instance_st220_mtb_bdest_src1,
Instance_st220_mfb_idest_scond,
Instance_st220_zxtb_idest_src1,
Instance_st220_syncins,
Instance_st220_return,
Instance_st231_add_dest_src1_src2,
Instance_st231_add_idest_src1_isrc2,
Instance_st231_add_idest_src1_xsrc2,
Instance_st231_addcg_dest_bdest_src1_src2_scond,
Instance_st231_and_dest_src1_src2,
Instance_st231_and_idest_src1_isrc2,
Instance_st231_and_idest_src1_xsrc2,
Instance_st231_andc_dest_src1_src2,
Instance_st231_andc_idest_src1_isrc2,
Instance_st231_andc_idest_src1_xsrc2,
Instance_st231_andl_dest_src1_src2,
Instance_st231_andl_bdest_src1_src2,
Instance_st231_andl_idest_src1_isrc2,
Instance_st231_andl_ibdest_src1_isrc2,
Instance_st231_andl_idest_src1_xsrc2,
Instance_st231_andl_ibdest_src1_xsrc2,
Instance_st231_asm_0_dest_src1_src2,
Instance_st231_asm_1_dest_src1_src2,
Instance_st231_asm_2_dest_src1_src2,
Instance_st231_asm_3_dest_src1_src2,
Instance_st231_asm_4_dest_src1_src2,
Instance_st231_asm_5_dest_src1_src2,
Instance_st231_asm_6_dest_src1_src2,
Instance_st231_asm_7_dest_src1_src2,
Instance_st231_asm_8_dest_src1_src2,
Instance_st231_asm_9_dest_src1_src2,
Instance_st231_asm_10_dest_src1_src2,
Instance_st231_asm_11_dest_src1_src2,
Instance_st231_asm_12_dest_src1_src2,
Instance_st231_asm_13_dest_src1_src2,
Instance_st231_asm_14_dest_src1_src2,
Instance_st231_asm_15_dest_src1_src2,
Instance_st231_asm_16_idest_src1_isrc2,
Instance_st231_asm_16_idest_src1_xsrc2,
Instance_st231_asm_17_idest_src1_isrc2,
Instance_st231_asm_17_idest_src1_xsrc2,
Instance_st231_asm_18_idest_src1_isrc2,
Instance_st231_asm_18_idest_src1_xsrc2,
Instance_st231_asm_19_idest_src1_isrc2,
Instance_st231_asm_19_idest_src1_xsrc2,
Instance_st231_asm_20_idest_src1_isrc2,
Instance_st231_asm_20_idest_src1_xsrc2,
Instance_st231_asm_21_idest_src1_isrc2,
Instance_st231_asm_21_idest_src1_xsrc2,
Instance_st231_asm_22_idest_src1_isrc2,
Instance_st231_asm_22_idest_src1_xsrc2,
Instance_st231_asm_23_idest_src1_isrc2,
Instance_st231_asm_23_idest_src1_xsrc2,
Instance_st231_asm_24_idest_src1_isrc2,
Instance_st231_asm_24_idest_src1_xsrc2,
Instance_st231_asm_25_idest_src1_isrc2,
Instance_st231_asm_25_idest_src1_xsrc2,
Instance_st231_asm_26_idest_src1_isrc2,
Instance_st231_asm_26_idest_src1_xsrc2,
Instance_st231_asm_27_idest_src1_isrc2,
Instance_st231_asm_27_idest_src1_xsrc2,
Instance_st231_asm_28_idest_src1_isrc2,
Instance_st231_asm_28_idest_src1_xsrc2,
Instance_st231_asm_29_idest_src1_isrc2,
Instance_st231_asm_29_idest_src1_xsrc2,
Instance_st231_asm_30_idest_src1_isrc2,
Instance_st231_asm_30_idest_src1_xsrc2,
Instance_st231_asm_31_idest_src1_isrc2,
Instance_st231_asm_31_idest_src1_xsrc2,
Instance_st231_br_bcond_btarg,
Instance_st231_break,
Instance_st231_brf_bcond_btarg,
Instance_st231_bswap_idest_src1,
Instance_st231_call_btarg,
Instance_st231_icall,
Instance_st231_clz_idest_src1,
Instance_st231_cmpeq_dest_src1_src2,
Instance_st231_cmpeq_bdest_src1_src2,
Instance_st231_cmpeq_idest_src1_isrc2,
Instance_st231_cmpeq_ibdest_src1_isrc2,
Instance_st231_cmpeq_idest_src1_xsrc2,
Instance_st231_cmpeq_ibdest_src1_xsrc2,
Instance_st231_cmpge_dest_src1_src2,
Instance_st231_cmpge_bdest_src1_src2,
Instance_st231_cmpge_idest_src1_isrc2,
Instance_st231_cmpge_ibdest_src1_isrc2,
Instance_st231_cmpge_idest_src1_xsrc2,
Instance_st231_cmpge_ibdest_src1_xsrc2,
Instance_st231_cmpgeu_dest_src1_src2,
Instance_st231_cmpgeu_bdest_src1_src2,
Instance_st231_cmpgeu_idest_src1_isrc2,
Instance_st231_cmpgeu_ibdest_src1_isrc2,
Instance_st231_cmpgeu_idest_src1_xsrc2,
Instance_st231_cmpgeu_ibdest_src1_xsrc2,
Instance_st231_cmpgt_dest_src1_src2,
Instance_st231_cmpgt_bdest_src1_src2,
Instance_st231_cmpgt_idest_src1_isrc2,
Instance_st231_cmpgt_ibdest_src1_isrc2,
Instance_st231_cmpgt_idest_src1_xsrc2,
Instance_st231_cmpgt_ibdest_src1_xsrc2,
Instance_st231_cmpgtu_dest_src1_src2,
Instance_st231_cmpgtu_bdest_src1_src2,
Instance_st231_cmpgtu_idest_src1_isrc2,
Instance_st231_cmpgtu_ibdest_src1_isrc2,
Instance_st231_cmpgtu_idest_src1_xsrc2,
Instance_st231_cmpgtu_ibdest_src1_xsrc2,
Instance_st231_cmple_dest_src1_src2,
Instance_st231_cmple_bdest_src1_src2,
Instance_st231_cmple_idest_src1_isrc2,
Instance_st231_cmple_ibdest_src1_isrc2,
Instance_st231_cmple_idest_src1_xsrc2,
Instance_st231_cmple_ibdest_src1_xsrc2,
Instance_st231_cmpleu_dest_src1_src2,
Instance_st231_cmpleu_bdest_src1_src2,
Instance_st231_cmpleu_idest_src1_isrc2,
Instance_st231_cmpleu_ibdest_src1_isrc2,
Instance_st231_cmpleu_idest_src1_xsrc2,
Instance_st231_cmpleu_ibdest_src1_xsrc2,
Instance_st231_cmplt_dest_src1_src2,
Instance_st231_cmplt_bdest_src1_src2,
Instance_st231_cmplt_idest_src1_isrc2,
Instance_st231_cmplt_ibdest_src1_isrc2,
Instance_st231_cmplt_idest_src1_xsrc2,
Instance_st231_cmplt_ibdest_src1_xsrc2,
Instance_st231_cmpltu_dest_src1_src2,
Instance_st231_cmpltu_bdest_src1_src2,
Instance_st231_cmpltu_idest_src1_isrc2,
Instance_st231_cmpltu_ibdest_src1_isrc2,
Instance_st231_cmpltu_idest_src1_xsrc2,
Instance_st231_cmpltu_ibdest_src1_xsrc2,
Instance_st231_cmpne_dest_src1_src2,
Instance_st231_cmpne_bdest_src1_src2,
Instance_st231_cmpne_idest_src1_isrc2,
Instance_st231_cmpne_ibdest_src1_isrc2,
Instance_st231_cmpne_idest_src1_xsrc2,
Instance_st231_cmpne_ibdest_src1_xsrc2,
Instance_st231_divs_dest_bdest_src1_src2_scond,
Instance_st231_goto_btarg,
Instance_st231_igoto,
Instance_st231_imml_imm,
Instance_st231_immr_imm,
Instance_st231_ldb_nlidest_isrc2_src1,
Instance_st231_ldb_nlidest_xsrc2_src1,
Instance_st231_ldb_d_nlidest_isrc2_src1,
Instance_st231_ldb_d_nlidest_xsrc2_src1,
Instance_st231_ldbu_nlidest_isrc2_src1,
Instance_st231_ldbu_nlidest_xsrc2_src1,
Instance_st231_ldbu_d_nlidest_isrc2_src1,
Instance_st231_ldbu_d_nlidest_xsrc2_src1,
Instance_st231_ldh_nlidest_isrc2_src1,
Instance_st231_ldh_nlidest_xsrc2_src1,
Instance_st231_ldh_d_nlidest_isrc2_src1,
Instance_st231_ldh_d_nlidest_xsrc2_src1,
Instance_st231_ldhu_nlidest_isrc2_src1,
Instance_st231_ldhu_nlidest_xsrc2_src1,
Instance_st231_ldhu_d_nlidest_isrc2_src1,
Instance_st231_ldhu_d_nlidest_xsrc2_src1,
Instance_st231_ldw_idest_isrc2_src1,
Instance_st231_ldw_idest_xsrc2_src1,
Instance_st231_ldw_d_idest_isrc2_src1,
Instance_st231_ldw_d_idest_xsrc2_src1,
Instance_st231_ldwl_idest_src1,
Instance_st231_max_dest_src1_src2,
Instance_st231_max_idest_src1_isrc2,
Instance_st231_max_idest_src1_xsrc2,
Instance_st231_maxu_dest_src1_src2,
Instance_st231_maxu_idest_src1_isrc2,
Instance_st231_maxu_idest_src1_xsrc2,
Instance_st231_min_dest_src1_src2,
Instance_st231_min_idest_src1_isrc2,
Instance_st231_min_idest_src1_xsrc2,
Instance_st231_minu_dest_src1_src2,
Instance_st231_minu_idest_src1_isrc2,
Instance_st231_minu_idest_src1_xsrc2,
Instance_st231_mulh_nldest_src1_src2,
Instance_st231_mulh_nlidest_src1_isrc2,
Instance_st231_mulh_nlidest_src1_xsrc2,
Instance_st231_mulhh_nldest_src1_src2,
Instance_st231_mulhh_nlidest_src1_isrc2,
Instance_st231_mulhh_nlidest_src1_xsrc2,
Instance_st231_mulhhs_nldest_src1_src2,
Instance_st231_mulhhs_nlidest_src1_isrc2,
Instance_st231_mulhhs_nlidest_src1_xsrc2,
Instance_st231_mulhhu_nldest_src1_src2,
Instance_st231_mulhhu_nlidest_src1_isrc2,
Instance_st231_mulhhu_nlidest_src1_xsrc2,
Instance_st231_mulhs_nldest_src1_src2,
Instance_st231_mulhs_nlidest_src1_isrc2,
Instance_st231_mulhs_nlidest_src1_xsrc2,
Instance_st231_mulhu_nldest_src1_src2,
Instance_st231_mulhu_nlidest_src1_isrc2,
Instance_st231_mulhu_nlidest_src1_xsrc2,
Instance_st231_mull_nldest_src1_src2,
Instance_st231_mull_nlidest_src1_isrc2,
Instance_st231_mull_nlidest_src1_xsrc2,
Instance_st231_mullh_nldest_src1_src2,
Instance_st231_mullh_nlidest_src1_isrc2,
Instance_st231_mullh_nlidest_src1_xsrc2,
Instance_st231_mullhu_nldest_src1_src2,
Instance_st231_mullhu_nlidest_src1_isrc2,
Instance_st231_mullhu_nlidest_src1_xsrc2,
Instance_st231_mullhus_nldest_src1_src2,
Instance_st231_mullhus_nlidest_src1_isrc2,
Instance_st231_mullhus_nlidest_src1_xsrc2,
Instance_st231_mulll_nldest_src1_src2,
Instance_st231_mulll_nlidest_src1_isrc2,
Instance_st231_mulll_nlidest_src1_xsrc2,
Instance_st231_mulllu_nldest_src1_src2,
Instance_st231_mulllu_nlidest_src1_isrc2,
Instance_st231_mulllu_nlidest_src1_xsrc2,
Instance_st231_mullu_nldest_src1_src2,
Instance_st231_mullu_nlidest_src1_isrc2,
Instance_st231_mullu_nlidest_src1_xsrc2,
Instance_st231_mul32_nldest_src1_src2,
Instance_st231_mul32_nlidest_src1_isrc2,
Instance_st231_mul32_nlidest_src1_xsrc2,
Instance_st231_mul64h_nldest_src1_src2,
Instance_st231_mul64h_nlidest_src1_isrc2,
Instance_st231_mul64h_nlidest_src1_xsrc2,
Instance_st231_mul64hu_nldest_src1_src2,
Instance_st231_mul64hu_nlidest_src1_isrc2,
Instance_st231_mul64hu_nlidest_src1_xsrc2,
Instance_st231_mulfrac_nldest_src1_src2,
Instance_st231_mulfrac_nlidest_src1_isrc2,
Instance_st231_mulfrac_nlidest_src1_xsrc2,
Instance_st231_nandl_dest_src1_src2,
Instance_st231_nandl_bdest_src1_src2,
Instance_st231_nandl_idest_src1_isrc2,
Instance_st231_nandl_ibdest_src1_isrc2,
Instance_st231_nandl_idest_src1_xsrc2,
Instance_st231_nandl_ibdest_src1_xsrc2,
Instance_st231_norl_dest_src1_src2,
Instance_st231_norl_bdest_src1_src2,
Instance_st231_norl_idest_src1_isrc2,
Instance_st231_norl_ibdest_src1_isrc2,
Instance_st231_norl_idest_src1_xsrc2,
Instance_st231_norl_ibdest_src1_xsrc2,
Instance_st231_or_dest_src1_src2,
Instance_st231_or_idest_src1_isrc2,
Instance_st231_or_idest_src1_xsrc2,
Instance_st231_orc_dest_src1_src2,
Instance_st231_orc_idest_src1_isrc2,
Instance_st231_orc_idest_src1_xsrc2,
Instance_st231_orl_dest_src1_src2,
Instance_st231_orl_bdest_src1_src2,
Instance_st231_orl_idest_src1_isrc2,
Instance_st231_orl_ibdest_src1_isrc2,
Instance_st231_orl_idest_src1_xsrc2,
Instance_st231_orl_ibdest_src1_xsrc2,
Instance_st231_pft_isrc2_src1,
Instance_st231_pft_xsrc2_src1,
Instance_st231_prgadd_isrc2_src1,
Instance_st231_prgadd_xsrc2_src1,
Instance_st231_prgins,
Instance_st231_prginspg_isrc2_src1,
Instance_st231_prginspg_xsrc2_src1,
Instance_st231_prgset_isrc2_src1,
Instance_st231_prgset_xsrc2_src1,
Instance_st231_pswclr_src2,
Instance_st231_pswset_src2,
Instance_st231_rfi,
Instance_st231_sbrk_sbrknum,
Instance_st231_sh1add_dest_src1_src2,
Instance_st231_sh1add_idest_src1_isrc2,
Instance_st231_sh1add_idest_src1_xsrc2,
Instance_st231_sh2add_dest_src1_src2,
Instance_st231_sh2add_idest_src1_isrc2,
Instance_st231_sh2add_idest_src1_xsrc2,
Instance_st231_sh3add_dest_src1_src2,
Instance_st231_sh3add_idest_src1_isrc2,
Instance_st231_sh3add_idest_src1_xsrc2,
Instance_st231_sh4add_dest_src1_src2,
Instance_st231_sh4add_idest_src1_isrc2,
Instance_st231_sh4add_idest_src1_xsrc2,
Instance_st231_shl_dest_src1_src2,
Instance_st231_shl_idest_src1_isrc2,
Instance_st231_shl_idest_src1_xsrc2,
Instance_st231_shr_dest_src1_src2,
Instance_st231_shr_idest_src1_isrc2,
Instance_st231_shr_idest_src1_xsrc2,
Instance_st231_shru_dest_src1_src2,
Instance_st231_shru_idest_src1_isrc2,
Instance_st231_shru_idest_src1_xsrc2,
Instance_st231_slct_dest_scond_src1_src2,
Instance_st231_slct_idest_scond_src1_isrc2,
Instance_st231_slct_idest_scond_src1_xsrc2,
Instance_st231_slctf_dest_scond_src1_src2,
Instance_st231_slctf_idest_scond_src1_isrc2,
Instance_st231_slctf_idest_scond_src1_xsrc2,
Instance_st231_stb_isrc2_src1_src2,
Instance_st231_stb_xsrc2_src1_src2,
Instance_st231_sth_isrc2_src1_src2,
Instance_st231_sth_xsrc2_src1_src2,
Instance_st231_stw_isrc2_src1_src2,
Instance_st231_stw_xsrc2_src1_src2,
Instance_st231_stwl_bdest2_src1_src2,
Instance_st231_sub_dest_src2_src1,
Instance_st231_sub_idest_isrc2_src1,
Instance_st231_sub_idest_xsrc2_src1,
Instance_st231_sxtb_idest_src1,
Instance_st231_sxth_idest_src1,
Instance_st231_sync,
Instance_st231_syscall_sbrknum,
Instance_st231_wmb,
Instance_st231_xor_dest_src1_src2,
Instance_st231_xor_idest_src1_isrc2,
Instance_st231_xor_idest_src1_xsrc2,
Instance_st231_zxth_idest_src1,
Instance_st231_convbi_idest_scond,
Instance_st231_convib_bdest_src1,
Instance_st231_mov_bsrc_idest_scond,
Instance_st231_mov_bdest_bdest_src1,
Instance_st231_nop,
Instance_st231_mov_dest_src2,
Instance_st231_mov_idest_isrc2,
Instance_st231_mov_idest_xsrc2,
Instance_st231_mtb_bdest_src1,
Instance_st231_mfb_idest_scond,
Instance_st231_zxtb_idest_src1,
Instance_st231_syncins,
Instance_st231_idle,
Instance_st231_return,
Instance_st240_add_ph_dest_src1_src2,
Instance_st240_adds_ph_dest_src1_src2,
Instance_st240_abss_ph_dest_src1,
Instance_st240_max_ph_dest_src1_src2,
Instance_st240_min_ph_dest_src1_src2,
Instance_st240_mul_ph_nldest_src1_src2,
Instance_st240_muladd_ph_nldest_src1_src2,
Instance_st240_mulfracadds_ph_nldest_src1_src2,
Instance_st240_mulfracrm_ph_nldest_src1_src2,
Instance_st240_mulfracrne_ph_nldest_src1_src2,
Instance_st240_shl_ph_dest_src1_src2,
Instance_st240_shl_ph_idest_src1_isrc2,
Instance_st240_shl_ph_idest_src1_xsrc2,
Instance_st240_shls_ph_nldest_src1_src2,
Instance_st240_shls_ph_nlidest_src1_isrc2,
Instance_st240_shls_ph_nlidest_src1_xsrc2,
Instance_st240_shr_ph_dest_src1_src2,
Instance_st240_shr_ph_idest_src1_isrc2,
Instance_st240_shr_ph_idest_src1_xsrc2,
Instance_st240_shrrnp_ph_nldest_src1_src2,
Instance_st240_shrrnp_ph_nlidest_src1_isrc2,
Instance_st240_shrrnp_ph_nlidest_src1_xsrc2,
Instance_st240_shrrne_ph_nldest_src1_src2,
Instance_st240_shrrne_ph_nlidest_src1_isrc2,
Instance_st240_shrrne_ph_nlidest_src1_xsrc2,
Instance_st240_sub_ph_dest_src2_src1,
Instance_st240_subs_ph_dest_src2_src1,
Instance_st240_shuff_pbh_dest_src1_src2,
Instance_st240_shuff_pbl_dest_src1_src2,
Instance_st240_shuff_phh_dest_src1_src2,
Instance_st240_shuff_phl_dest_src1_src2,
Instance_st240_shuffodd_pb_dest_src1_src2,
Instance_st240_shuffeve_pb_dest_src1_src2,
Instance_st240_perm_pb_dest_src1_src2,
Instance_st240_perm_pb_idest_src1_isrc2,
Instance_st240_perm_pb_idest_src1_xsrc2,
Instance_st240_ext1_pb_dest_src1_src2,
Instance_st240_ext2_pb_dest_src1_src2,
Instance_st240_ext3_pb_dest_src1_src2,
Instance_st240_packsu_pb_dest_src1_src2,
Instance_st240_pack_pb_dest_src1_src2,
Instance_st240_packrnp_phh_dest_src1_src2,
Instance_st240_packs_ph_dest_src1_src2,
Instance_st240_cmpeq_ph_dest_src1_src2,
Instance_st240_cmpgt_ph_dest_src1_src2,
Instance_st240_sadu_pb_nldest_src1_src2,
Instance_st240_absubu_pb_dest_src1_src2,
Instance_st240_muladdus_pb_nldest_src1_src2,
Instance_st240_avg4u_pb_nldest_scond_src1_src2,
Instance_st240_avgu_pb_dest_scond_src1_src2,
Instance_st240_cmpeq_pb_dest_src1_src2,
Instance_st240_cmpgtu_pb_dest_src1_src2,
Instance_st240_slct_pb_dest_scond_src1_src2,
Instance_st240_slct_pb_idest_scond_src1_isrc2,
Instance_st240_slct_pb_idest_scond_src1_xsrc2,
Instance_st240_slctf_pb_idest_scond_src1_isrc2,
Instance_st240_slctf_pb_idest_scond_src1_xsrc2,
Instance_st240_cmpeq_ph_bdest_bdest2_src1_src2,
Instance_st240_cmpeq_pb_bdest_bdest2_src1_src2,
Instance_st240_cmpgt_ph_bdest_bdest2_src1_src2,
Instance_st240_cmpgtu_pb_bdest_bdest2_src1_src2,
Instance_st240_mov_bdest_bdest2_src1,
Instance_st240_mov_bsrc_dest_scond,
Instance_st240_extl_pb_dest_scond_src1_src2,
Instance_st240_extr_pb_dest_scond_src1_src2,
Instance_st240_add_dest_src1_src2,
Instance_st240_add_idest_src1_isrc2,
Instance_st240_add_idest_src1_xsrc2,
Instance_st240_addcg_dest_bdest_src1_src2_scond,
Instance_st240_addf_n_nldest_src1_src2,
Instance_st240_addpc_idest_isrc2,
Instance_st240_addpc_idest_xsrc2,
Instance_st240_adds_dest_src1_src2,
Instance_st240_addso_dest_src1_src2,
Instance_st240_and_dest_src1_src2,
Instance_st240_and_idest_src1_isrc2,
Instance_st240_and_idest_src1_xsrc2,
Instance_st240_andl_bdest_bdest2_bsrc1_bsrc2,
Instance_st240_andc_dest_src1_src2,
Instance_st240_andc_idest_src1_isrc2,
Instance_st240_andc_idest_src1_xsrc2,
Instance_st240_andl_dest_src1_src2,
Instance_st240_andl_bdest2_src1_src2,
Instance_st240_asm_0_dest_src1_src2,
Instance_st240_asm_1_dest_src1_src2,
Instance_st240_asm_2_dest_src1_src2,
Instance_st240_asm_3_dest_src1_src2,
Instance_st240_asm_4_dest_src1_src2,
Instance_st240_asm_5_dest_src1_src2,
Instance_st240_asm_6_dest_src1_src2,
Instance_st240_asm_7_dest_src1_src2,
Instance_st240_asm_8_dest_src1_src2,
Instance_st240_asm_9_dest_src1_src2,
Instance_st240_asm_10_dest_src1_src2,
Instance_st240_asm_11_dest_src1_src2,
Instance_st240_asm_12_dest_src1_src2,
Instance_st240_asm_13_dest_src1_src2,
Instance_st240_asm_14_dest_src1_src2,
Instance_st240_asm_15_dest_src1_src2,
Instance_st240_asm_16_idest_src1_isrc2,
Instance_st240_asm_16_idest_src1_xsrc2,
Instance_st240_asm_17_idest_src1_isrc2,
Instance_st240_asm_17_idest_src1_xsrc2,
Instance_st240_asm_18_idest_src1_isrc2,
Instance_st240_asm_18_idest_src1_xsrc2,
Instance_st240_asm_19_idest_src1_isrc2,
Instance_st240_asm_19_idest_src1_xsrc2,
Instance_st240_asm_20_idest_src1_isrc2,
Instance_st240_asm_20_idest_src1_xsrc2,
Instance_st240_asm_21_idest_src1_isrc2,
Instance_st240_asm_21_idest_src1_xsrc2,
Instance_st240_asm_22_idest_src1_isrc2,
Instance_st240_asm_22_idest_src1_xsrc2,
Instance_st240_asm_23_idest_src1_isrc2,
Instance_st240_asm_23_idest_src1_xsrc2,
Instance_st240_asm_24_idest_src1_isrc2,
Instance_st240_asm_24_idest_src1_xsrc2,
Instance_st240_asm_25_idest_src1_isrc2,
Instance_st240_asm_25_idest_src1_xsrc2,
Instance_st240_asm_26_idest_src1_isrc2,
Instance_st240_asm_26_idest_src1_xsrc2,
Instance_st240_asm_27_idest_src1_isrc2,
Instance_st240_asm_27_idest_src1_xsrc2,
Instance_st240_asm_28_idest_src1_isrc2,
Instance_st240_asm_28_idest_src1_xsrc2,
Instance_st240_asm_29_idest_src1_isrc2,
Instance_st240_asm_29_idest_src1_xsrc2,
Instance_st240_asm_30_idest_src1_isrc2,
Instance_st240_asm_30_idest_src1_xsrc2,
Instance_st240_asm_31_idest_src1_isrc2,
Instance_st240_asm_31_idest_src1_xsrc2,
Instance_st240_br_bcond_btarg,
Instance_st240_break,
Instance_st240_brf_bcond_btarg,
Instance_st240_call_btarg,
Instance_st240_icall,
Instance_st240_clz_idest_src1,
Instance_st240_cmpeq_dest_src1_src2,
Instance_st240_cmpeq_idest_src1_isrc2,
Instance_st240_cmpeq_bdest2_src1_src2,
Instance_st240_cmpeq_ibdest_src1_isrc2,
Instance_st240_cmpeq_idest_src1_xsrc2,
Instance_st240_cmpeq_ibdest_src1_xsrc2,
Instance_st240_cmpeqf_n_dest_src1_src2,
Instance_st240_cmpeqf_n_bdest2_src1_src2,
Instance_st240_cmpge_idest_src1_isrc2,
Instance_st240_cmpge_ibdest_src1_isrc2,
Instance_st240_cmpge_idest_src1_xsrc2,
Instance_st240_cmpge_ibdest_src1_xsrc2,
Instance_st240_cmpgef_n_dest_src1_src2,
Instance_st240_cmpgef_n_bdest2_src1_src2,
Instance_st240_cmpgeu_idest_src1_isrc2,
Instance_st240_cmpgeu_ibdest_src1_isrc2,
Instance_st240_cmpgeu_idest_src1_xsrc2,
Instance_st240_cmpgeu_ibdest_src1_xsrc2,
Instance_st240_cmpgt_idest_src1_isrc2,
Instance_st240_cmpgt_ibdest_src1_isrc2,
Instance_st240_cmpgt_idest_src1_xsrc2,
Instance_st240_cmpgt_ibdest_src1_xsrc2,
Instance_st240_cmpgtf_n_dest_src1_src2,
Instance_st240_cmpgtf_n_bdest2_src1_src2,
Instance_st240_cmpgtu_idest_src1_isrc2,
Instance_st240_cmpgtu_ibdest_src1_isrc2,
Instance_st240_cmpgtu_idest_src1_xsrc2,
Instance_st240_cmpgtu_ibdest_src1_xsrc2,
Instance_st240_cmple_dest_src1_src2,
Instance_st240_cmple_idest_src1_isrc2,
Instance_st240_cmple_bdest2_src1_src2,
Instance_st240_cmple_ibdest_src1_isrc2,
Instance_st240_cmple_idest_src1_xsrc2,
Instance_st240_cmple_ibdest_src1_xsrc2,
Instance_st240_cmpleu_dest_src1_src2,
Instance_st240_cmpleu_idest_src1_isrc2,
Instance_st240_cmpleu_bdest2_src1_src2,
Instance_st240_cmpleu_ibdest_src1_isrc2,
Instance_st240_cmpleu_idest_src1_xsrc2,
Instance_st240_cmpleu_ibdest_src1_xsrc2,
Instance_st240_cmplt_dest_src1_src2,
Instance_st240_cmplt_idest_src1_isrc2,
Instance_st240_cmplt_bdest2_src1_src2,
Instance_st240_cmplt_ibdest_src1_isrc2,
Instance_st240_cmplt_idest_src1_xsrc2,
Instance_st240_cmplt_ibdest_src1_xsrc2,
Instance_st240_cmpltu_dest_src1_src2,
Instance_st240_cmpltu_idest_src1_isrc2,
Instance_st240_cmpltu_bdest2_src1_src2,
Instance_st240_cmpltu_ibdest_src1_isrc2,
Instance_st240_cmpltu_idest_src1_xsrc2,
Instance_st240_cmpltu_ibdest_src1_xsrc2,
Instance_st240_cmpne_dest_src1_src2,
Instance_st240_cmpne_idest_src1_isrc2,
Instance_st240_cmpne_bdest2_src1_src2,
Instance_st240_cmpne_ibdest_src1_isrc2,
Instance_st240_cmpne_idest_src1_xsrc2,
Instance_st240_cmpne_ibdest_src1_xsrc2,
Instance_st240_convfi_n_nldest_src1,
Instance_st240_convif_n_nldest_src1,
Instance_st240_dbgsbrk_brknum,
Instance_st240_dib,
Instance_st240_div_nldest_src1_src2,
Instance_st240_divu_nldest_src1_src2,
Instance_st240_extract_idest_src1_isrc2,
Instance_st240_extract_idest_src1_xsrc2,
Instance_st240_extractu_idest_src1_isrc2,
Instance_st240_extractu_idest_src1_xsrc2,
Instance_st240_extractl_idest_src1_isrc2,
Instance_st240_extractl_idest_src1_xsrc2,
Instance_st240_extractlu_idest_src1_isrc2,
Instance_st240_extractlu_idest_src1_xsrc2,
Instance_st240_flushadd_isrc2_src1,
Instance_st240_flushadd_xsrc2_src1,
Instance_st240_flushadd_l1_isrc2_src1,
Instance_st240_flushadd_l1_xsrc2_src1,
Instance_st240_goto_btarg,
Instance_st240_igoto,
Instance_st240_imml_imm,
Instance_st240_immr_imm,
Instance_st240_invadd_isrc2_src1,
Instance_st240_invadd_xsrc2_src1,
Instance_st240_invadd_l1_isrc2_src1,
Instance_st240_invadd_l1_xsrc2_src1,
Instance_st240_ldb_nlidest_isrc2_src1,
Instance_st240_ldb_nlidest_xsrc2_src1,
Instance_st240_ldbc_nlidest_pcond_isrc2_src1,
Instance_st240_ldbc_nlidest_pcond_xsrc2_src1,
Instance_st240_ldbu_nlidest_isrc2_src1,
Instance_st240_ldbu_nlidest_xsrc2_src1,
Instance_st240_ldbuc_nlidest_pcond_isrc2_src1,
Instance_st240_ldbuc_nlidest_pcond_xsrc2_src1,
Instance_st240_ldh_nlidest_isrc2_src1,
Instance_st240_ldh_nlidest_xsrc2_src1,
Instance_st240_ldhc_nlidest_pcond_isrc2_src1,
Instance_st240_ldhc_nlidest_pcond_xsrc2_src1,
Instance_st240_ldhu_nlidest_isrc2_src1,
Instance_st240_ldhu_nlidest_xsrc2_src1,
Instance_st240_ldhuc_nlidest_pcond_isrc2_src1,
Instance_st240_ldhuc_nlidest_pcond_xsrc2_src1,
Instance_st240_ldl_idestp_isrc2_src1,
Instance_st240_ldl_idestp_xsrc2_src1,
Instance_st240_ldlc_idestp_pcond_isrc2_src1,
Instance_st240_ldlc_idestp_pcond_xsrc2_src1,
Instance_st240_ldw_idest_isrc2_src1,
Instance_st240_ldw_idest_xsrc2_src1,
Instance_st240_ldwc_idest_pcond_isrc2_src1,
Instance_st240_ldwc_idest_pcond_xsrc2_src1,
Instance_st240_ldwl_idest_src1,
Instance_st240_max_dest_src1_src2,
Instance_st240_max_idest_src1_isrc2,
Instance_st240_max_idest_src1_xsrc2,
Instance_st240_maxu_dest_src1_src2,
Instance_st240_maxu_idest_src1_isrc2,
Instance_st240_maxu_idest_src1_xsrc2,
Instance_st240_min_dest_src1_src2,
Instance_st240_min_idest_src1_isrc2,
Instance_st240_min_idest_src1_xsrc2,
Instance_st240_minu_dest_src1_src2,
Instance_st240_minu_idest_src1_isrc2,
Instance_st240_minu_idest_src1_xsrc2,
Instance_st240_mov_bsrc_bdest_bdest2_bsrc1,
Instance_st240_mulf_n_nldest_src1_src2,
Instance_st240_mulfrac_nldest_src1_src2,
Instance_st240_mulfrac_nlidest_src1_isrc2,
Instance_st240_mulfrac_nlidest_src1_xsrc2,
Instance_st240_mulh_nldest_src1_src2,
Instance_st240_mulhh_nldest_src1_src2,
Instance_st240_mulhhu_nldest_src1_src2,
Instance_st240_mull_nldest_src1_src2,
Instance_st240_mullh_nldest_src1_src2,
Instance_st240_mullhu_nldest_src1_src2,
Instance_st240_mulll_nldest_src1_src2,
Instance_st240_mulll_nlidest_src1_isrc2,
Instance_st240_mulll_nlidest_src1_xsrc2,
Instance_st240_mulllu_nldest_src1_src2,
Instance_st240_mulllu_nlidest_src1_isrc2,
Instance_st240_mulllu_nlidest_src1_xsrc2,
Instance_st240_mul32_nldest_src1_src2,
Instance_st240_mul32_nlidest_src1_isrc2,
Instance_st240_mul32_nlidest_src1_xsrc2,
Instance_st240_mul64h_nldest_src1_src2,
Instance_st240_mul64h_nlidest_src1_isrc2,
Instance_st240_mul64h_nlidest_src1_xsrc2,
Instance_st240_mul64hu_nldest_src1_src2,
Instance_st240_mul64hu_nlidest_src1_isrc2,
Instance_st240_mul64hu_nlidest_src1_xsrc2,
Instance_st240_nandl_bdest_bdest2_bsrc1_bsrc2,
Instance_st240_nandl_dest_src1_src2,
Instance_st240_nandl_bdest2_src1_src2,
Instance_st240_norl_bdest_bdest2_bsrc1_bsrc2,
Instance_st240_norl_dest_src1_src2,
Instance_st240_norl_bdest2_src1_src2,
Instance_st240_or_dest_src1_src2,
Instance_st240_or_idest_src1_isrc2,
Instance_st240_or_idest_src1_xsrc2,
Instance_st240_orl_bdest_bdest2_bsrc1_bsrc2,
Instance_st240_orc_dest_src1_src2,
Instance_st240_orl_dest_src1_src2,
Instance_st240_orl_bdest2_src1_src2,
Instance_st240_pft_isrc2_src1,
Instance_st240_pft_xsrc2_src1,
Instance_st240_pftc_pcond_isrc2_src1,
Instance_st240_pftc_pcond_xsrc2_src1,
Instance_st240_prgadd_isrc2_src1,
Instance_st240_prgadd_xsrc2_src1,
Instance_st240_prgadd_l1_isrc2_src1,
Instance_st240_prgadd_l1_xsrc2_src1,
Instance_st240_prginsadd_isrc2_src1,
Instance_st240_prginsadd_xsrc2_src1,
Instance_st240_prginsadd_l1_isrc2_src1,
Instance_st240_prginsadd_l1_xsrc2_src1,
Instance_st240_prginsset_isrc2_src1,
Instance_st240_prginsset_xsrc2_src1,
Instance_st240_prginsset_l1_isrc2_src1,
Instance_st240_prginsset_l1_xsrc2_src1,
Instance_st240_prgset_isrc2_src1,
Instance_st240_prgset_xsrc2_src1,
Instance_st240_prgset_l1_isrc2_src1,
Instance_st240_prgset_l1_xsrc2_src1,
Instance_st240_pswmask_nlidest_src1_isrc2,
Instance_st240_pswmask_nlidest_src1_xsrc2,
Instance_st240_rem_nldest_src1_src2,
Instance_st240_remu_nldest_src1_src2,
Instance_st240_retention,
Instance_st240_return,
Instance_st240_rfi,
Instance_st240_rotl_dest_src1_src2,
Instance_st240_rotl_idest_src1_isrc2,
Instance_st240_rotl_idest_src1_xsrc2,
Instance_st240_sats_dest_src1,
Instance_st240_satso_dest_src1,
Instance_st240_sbrk_brknum,
Instance_st240_sh1add_dest_src1_src2,
Instance_st240_sh1add_idest_src1_isrc2,
Instance_st240_sh1add_idest_src1_xsrc2,
Instance_st240_sh1adds_dest_src2_src1,
Instance_st240_sh1addso_dest_src2_src1,
Instance_st240_sh1subs_dest_src2_src1,
Instance_st240_sh1subso_dest_src2_src1,
Instance_st240_sh2add_dest_src1_src2,
Instance_st240_sh2add_idest_src1_isrc2,
Instance_st240_sh2add_idest_src1_xsrc2,
Instance_st240_sh3add_dest_src1_src2,
Instance_st240_sh3add_idest_src1_isrc2,
Instance_st240_sh3add_idest_src1_xsrc2,
Instance_st240_shl_dest_src1_src2,
Instance_st240_shl_idest_src1_isrc2,
Instance_st240_shl_idest_src1_xsrc2,
Instance_st240_shls_nldest_src1_src2,
Instance_st240_shls_nlidest_src1_isrc2,
Instance_st240_shls_nlidest_src1_xsrc2,
Instance_st240_shlso_nldest_src1_src2,
Instance_st240_shlso_nlidest_src1_isrc2,
Instance_st240_shlso_nlidest_src1_xsrc2,
Instance_st240_shr_dest_src1_src2,
Instance_st240_shr_idest_src1_isrc2,
Instance_st240_shr_idest_src1_xsrc2,
Instance_st240_shrrnp_nlidest_src1_isrc2,
Instance_st240_shrrnp_nlidest_src1_xsrc2,
Instance_st240_shru_dest_src1_src2,
Instance_st240_shru_idest_src1_isrc2,
Instance_st240_shru_idest_src1_xsrc2,
Instance_st240_slct_rsrc_dest_scond_src1_src2,
Instance_st240_slct_idest_scond_src1_isrc2,
Instance_st240_slct_idest_scond_src1_xsrc2,
Instance_st240_slctf_idest_scond_src1_isrc2,
Instance_st240_slctf_idest_scond_src1_xsrc2,
Instance_st240_stb_isrc2_src1_src2,
Instance_st240_stb_xsrc2_src1_src2,
Instance_st240_stbc_isrc2_src1_pcond_src2,
Instance_st240_stbc_xsrc2_src1_pcond_src2,
Instance_st240_sth_isrc2_src1_src2,
Instance_st240_sth_xsrc2_src1_src2,
Instance_st240_sthc_isrc2_src1_pcond_src2,
Instance_st240_sthc_xsrc2_src1_pcond_src2,
Instance_st240_stl_isrc2_src1_src2p,
Instance_st240_stl_xsrc2_src1_src2p,
Instance_st240_stlc_isrc2_src1_pcond_src2p,
Instance_st240_stlc_xsrc2_src1_pcond_src2p,
Instance_st240_stw_isrc2_src1_src2,
Instance_st240_stw_xsrc2_src1_src2,
Instance_st240_stwc_isrc2_src1_pcond_src2,
Instance_st240_stwc_xsrc2_src1_pcond_src2,
Instance_st240_stwl_bdest2_src1_src2,
Instance_st240_sub_dest_src2_src1,
Instance_st240_sub_idest_isrc2_src1,
Instance_st240_sub_idest_xsrc2_src1,
Instance_st240_subf_n_nldest_src1_src2,
Instance_st240_subs_dest_src2_src1,
Instance_st240_subso_dest_src2_src1,
Instance_st240_sxt_dest_src1_src2,
Instance_st240_sxt_idest_src1_isrc2,
Instance_st240_sxt_idest_src1_xsrc2,
Instance_st240_sync,
Instance_st240_syncins,
Instance_st240_syscall_brknum,
Instance_st240_waitl,
Instance_st240_wmb,
Instance_st240_xor_dest_src1_src2,
Instance_st240_xor_idest_src1_isrc2,
Instance_st240_xor_idest_src1_xsrc2,
Instance_st240_zxt_dest_src1_src2,
Instance_st240_zxt_idest_src1_isrc2,
Instance_st240_zxt_idest_src1_xsrc2,
Instance_st240_bswap_idest_src1,
Instance_st240_convbi_idest_scond,
Instance_st240_convib_bdest2_src1,
Instance_st240_cmpge_dest_src2_src1,
Instance_st240_cmpge_bdest2_src2_src1,
Instance_st240_cmpgeu_dest_src2_src1,
Instance_st240_cmpgeu_bdest2_src2_src1,
Instance_st240_cmpgt_dest_src2_src1,
Instance_st240_cmpgt_bdest2_src2_src1,
Instance_st240_cmpgtu_dest_src2_src1,
Instance_st240_cmpgtu_bdest2_src2_src1,
Instance_st240_cmplef_n_dest_src2_src1,
Instance_st240_cmplef_n_bdest2_src2_src1,
Instance_st240_cmpltf_n_dest_src2_src1,
Instance_st240_cmpltf_n_bdest2_src2_src1,
Instance_st240_idle,
Instance_st240_mfb_idest_scond,
Instance_st240_mov_dest_src2,
Instance_st240_mov_idest_isrc2,
Instance_st240_mov_idest_xsrc2,
Instance_st240_mtb_bdest2_src1,
Instance_st240_mull_nlidest_src1_isrc2,
Instance_st240_mull_nlidest_src1_xsrc2,
Instance_st240_nop,
Instance_st240_slctf_dest_scond_src2_src1,
Instance_st240_sxtb_idest_src1,
Instance_st240_sxth_idest_src1,
Instance_st240_zxtb_idest_src1,
Instance_st240_zxth_idest_src1,
Instance_st240_slctf_pb_dest_scond_src2_src1,
Instance_st240_unpacku_pbh_dest_src1,
Instance_st240_unpacku_pbl_dest_src1,
Instance_st240_pack_ph_dest_src1_src2,
Instance_st220_ADJUST,
Instance_st220_GETPC,
Instance_st220_GNUASM,
Instance_st220_PUSHREGS,
Instance_st231_ADJUST,
Instance_st231_GETPC,
Instance_st231_GNUASM,
Instance_st231_PUSHREGS,
Instance_st240_ADJUST,
Instance_st240_GETPC,
Instance_st240_GNUASM,
Instance_st240_PUSHREGS,
Instance_st240_MOVP,
Instance_st240_COMPOSEP,
Instance_st240_EXTRACTP,
Instance_st240_MOVC,
Instance_st240_MOVCF,

#undef Instance


#define InstanceActions(INDEX,ACTIONS) 
#undef InstanceActions


#define InstanceAction_COUNT_MAX 5


  Instance__
#undef Instance
} Instance;
typedef uint16_t short_Instance;

/*
 * Operator --	Enumeration.
 */
typedef enum Operator {
#define Operator(NAME,ATTRIBUTES,INSTANCES,MNEMONIC,PARAMETERARRAY) Operator_ ##NAME,


/*
  st200/Operator.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Operator_ENTRY,


Operator_LABEL,


Operator_FALL,


Operator_LOOP,


Operator_GOTO,


Operator_GOTRUE,


Operator_GOFALSE,


Operator_JUMP,


Operator_CALL,


Operator_LINK,


Operator_RETURN,


Operator_PHI,


Operator_PSI,


Operator_SIGMA,


Operator_KILL,


Operator_SKIP,


Operator_COPY,


Operator_LNOT,


Operator_BNOT,


Operator_NEG,


Operator_ADD,


Operator_SUB,


Operator_MUL,


Operator_DIV,


Operator_REM,


Operator_SHL,


Operator_ASHR,


Operator_LSHR,


Operator_LAND,


Operator_LIOR,


Operator_LXOR,


Operator_BAND,


Operator_BIOR,


Operator_BXOR,


Operator_MIN,


Operator_MAX,


Operator_SELECT,


Operator_APPLY,


Operator_PCOPY,


Operator_FWDBAR,


Operator_BWDBAR,


Operator_IFIXUP,


Operator_BEGIN_PREGTN,


Operator_END_PREGTN,


Operator_st200_ADJUST,


Operator_st200_GETPC,


Operator_st200_GNUASM,


Operator_st200_PUSHREGS,


Operator_st200_add_1general_2general_3general,


Operator_st200_add_1general_2general_3isrc2,


Operator_st200_add_1general_2general_3xsrc2,


Operator_st200_addcg_1general_2branch_3general_4general_5branch,


Operator_st200_and_1general_2general_3general,


Operator_st200_and_1general_2general_3isrc2,


Operator_st200_and_1general_2general_3xsrc2,


Operator_st200_andc_1general_2general_3general,


Operator_st200_andc_1general_2general_3isrc2,


Operator_st200_andc_1general_2general_3xsrc2,


Operator_st200_andl_1general_2general_3general,


Operator_st200_andl_1branch_2general_3general,


Operator_st200_andl_1general_2general_3isrc2,


Operator_st200_andl_1branch_2general_3isrc2,


Operator_st200_andl_1general_2general_3xsrc2,


Operator_st200_andl_1branch_2general_3xsrc2,


Operator_st200_asm_0_1general_2general_3general,


Operator_st200_asm_1_1general_2general_3general,


Operator_st200_asm_2_1general_2general_3general,


Operator_st200_asm_3_1general_2general_3general,


Operator_st200_asm_4_1general_2general_3general,


Operator_st200_asm_5_1general_2general_3general,


Operator_st200_asm_6_1general_2general_3general,


Operator_st200_asm_7_1general_2general_3general,


Operator_st200_asm_8_1general_2general_3general,


Operator_st200_asm_9_1general_2general_3general,


Operator_st200_asm_10_1general_2general_3general,


Operator_st200_asm_11_1general_2general_3general,


Operator_st200_asm_12_1general_2general_3general,


Operator_st200_asm_13_1general_2general_3general,


Operator_st200_asm_14_1general_2general_3general,


Operator_st200_asm_15_1general_2general_3general,


Operator_st200_asm_16_1general_2general_3isrc2,


Operator_st200_asm_16_1general_2general_3xsrc2,


Operator_st200_asm_17_1general_2general_3isrc2,


Operator_st200_asm_17_1general_2general_3xsrc2,


Operator_st200_asm_18_1general_2general_3isrc2,


Operator_st200_asm_18_1general_2general_3xsrc2,


Operator_st200_asm_19_1general_2general_3isrc2,


Operator_st200_asm_19_1general_2general_3xsrc2,


Operator_st200_asm_20_1general_2general_3isrc2,


Operator_st200_asm_20_1general_2general_3xsrc2,


Operator_st200_asm_21_1general_2general_3isrc2,


Operator_st200_asm_21_1general_2general_3xsrc2,


Operator_st200_asm_22_1general_2general_3isrc2,


Operator_st200_asm_22_1general_2general_3xsrc2,


Operator_st200_asm_23_1general_2general_3isrc2,


Operator_st200_asm_23_1general_2general_3xsrc2,


Operator_st200_asm_24_1general_2general_3isrc2,


Operator_st200_asm_24_1general_2general_3xsrc2,


Operator_st200_asm_25_1general_2general_3isrc2,


Operator_st200_asm_25_1general_2general_3xsrc2,


Operator_st200_asm_26_1general_2general_3isrc2,


Operator_st200_asm_26_1general_2general_3xsrc2,


Operator_st200_asm_27_1general_2general_3isrc2,


Operator_st200_asm_27_1general_2general_3xsrc2,


Operator_st200_asm_28_1general_2general_3isrc2,


Operator_st200_asm_28_1general_2general_3xsrc2,


Operator_st200_asm_29_1general_2general_3isrc2,


Operator_st200_asm_29_1general_2general_3xsrc2,


Operator_st200_asm_30_1general_2general_3isrc2,


Operator_st200_asm_30_1general_2general_3xsrc2,


Operator_st200_asm_31_1general_2general_3isrc2,


Operator_st200_asm_31_1general_2general_3xsrc2,


Operator_st200_br_1branch_2btarg,


Operator_st200_break,


Operator_st200_brf_1branch_2btarg,


Operator_st200_bswap_1general_2general,


Operator_st200_call_1btarg,


Operator_st200_icall,


Operator_st200_clz_1general_2general,


Operator_st200_cmpeq_1general_2general_3general,


Operator_st200_cmpeq_1branch_2general_3general,


Operator_st200_cmpeq_1general_2general_3isrc2,


Operator_st200_cmpeq_1branch_2general_3isrc2,


Operator_st200_cmpeq_1general_2general_3xsrc2,


Operator_st200_cmpeq_1branch_2general_3xsrc2,


Operator_st200_cmpge_1general_2general_3general,


Operator_st200_cmpge_1branch_2general_3general,


Operator_st200_cmpge_1general_2general_3isrc2,


Operator_st200_cmpge_1branch_2general_3isrc2,


Operator_st200_cmpge_1general_2general_3xsrc2,


Operator_st200_cmpge_1branch_2general_3xsrc2,


Operator_st200_cmpgeu_1general_2general_3general,


Operator_st200_cmpgeu_1branch_2general_3general,


Operator_st200_cmpgeu_1general_2general_3isrc2,


Operator_st200_cmpgeu_1branch_2general_3isrc2,


Operator_st200_cmpgeu_1general_2general_3xsrc2,


Operator_st200_cmpgeu_1branch_2general_3xsrc2,


Operator_st200_cmpgt_1general_2general_3general,


Operator_st200_cmpgt_1branch_2general_3general,


Operator_st200_cmpgt_1general_2general_3isrc2,


Operator_st200_cmpgt_1branch_2general_3isrc2,


Operator_st200_cmpgt_1general_2general_3xsrc2,


Operator_st200_cmpgt_1branch_2general_3xsrc2,


Operator_st200_cmpgtu_1general_2general_3general,


Operator_st200_cmpgtu_1branch_2general_3general,


Operator_st200_cmpgtu_1general_2general_3isrc2,


Operator_st200_cmpgtu_1branch_2general_3isrc2,


Operator_st200_cmpgtu_1general_2general_3xsrc2,


Operator_st200_cmpgtu_1branch_2general_3xsrc2,


Operator_st200_cmple_1general_2general_3general,


Operator_st200_cmple_1branch_2general_3general,


Operator_st200_cmple_1general_2general_3isrc2,


Operator_st200_cmple_1branch_2general_3isrc2,


Operator_st200_cmple_1general_2general_3xsrc2,


Operator_st200_cmple_1branch_2general_3xsrc2,


Operator_st200_cmpleu_1general_2general_3general,


Operator_st200_cmpleu_1branch_2general_3general,


Operator_st200_cmpleu_1general_2general_3isrc2,


Operator_st200_cmpleu_1branch_2general_3isrc2,


Operator_st200_cmpleu_1general_2general_3xsrc2,


Operator_st200_cmpleu_1branch_2general_3xsrc2,


Operator_st200_cmplt_1general_2general_3general,


Operator_st200_cmplt_1branch_2general_3general,


Operator_st200_cmplt_1general_2general_3isrc2,


Operator_st200_cmplt_1branch_2general_3isrc2,


Operator_st200_cmplt_1general_2general_3xsrc2,


Operator_st200_cmplt_1branch_2general_3xsrc2,


Operator_st200_cmpltu_1general_2general_3general,


Operator_st200_cmpltu_1branch_2general_3general,


Operator_st200_cmpltu_1general_2general_3isrc2,


Operator_st200_cmpltu_1branch_2general_3isrc2,


Operator_st200_cmpltu_1general_2general_3xsrc2,


Operator_st200_cmpltu_1branch_2general_3xsrc2,


Operator_st200_cmpne_1general_2general_3general,


Operator_st200_cmpne_1branch_2general_3general,


Operator_st200_cmpne_1general_2general_3isrc2,


Operator_st200_cmpne_1branch_2general_3isrc2,


Operator_st200_cmpne_1general_2general_3xsrc2,


Operator_st200_cmpne_1branch_2general_3xsrc2,


Operator_st200_divs_1general_2branch_3general_4general_5branch,


Operator_st200_goto_1btarg,


Operator_st200_igoto,


Operator_st200_ldb_1nolink_2isrc2_3general,


Operator_st200_ldb_1nolink_2xsrc2_3general,


Operator_st200_ldb_d_1nolink_2isrc2_3general,


Operator_st200_ldb_d_1nolink_2xsrc2_3general,


Operator_st200_ldbu_1nolink_2isrc2_3general,


Operator_st200_ldbu_1nolink_2xsrc2_3general,


Operator_st200_ldbu_d_1nolink_2isrc2_3general,


Operator_st200_ldbu_d_1nolink_2xsrc2_3general,


Operator_st200_ldh_1nolink_2isrc2_3general,


Operator_st200_ldh_1nolink_2xsrc2_3general,


Operator_st200_ldh_d_1nolink_2isrc2_3general,


Operator_st200_ldh_d_1nolink_2xsrc2_3general,


Operator_st200_ldhu_1nolink_2isrc2_3general,


Operator_st200_ldhu_1nolink_2xsrc2_3general,


Operator_st200_ldhu_d_1nolink_2isrc2_3general,


Operator_st200_ldhu_d_1nolink_2xsrc2_3general,


Operator_st200_ldw_1general_2isrc2_3general,


Operator_st200_ldw_1general_2xsrc2_3general,


Operator_st200_ldw_d_1general_2isrc2_3general,


Operator_st200_ldw_d_1general_2xsrc2_3general,


Operator_st200_max_1general_2general_3general,


Operator_st200_max_1general_2general_3isrc2,


Operator_st200_max_1general_2general_3xsrc2,


Operator_st200_maxu_1general_2general_3general,


Operator_st200_maxu_1general_2general_3isrc2,


Operator_st200_maxu_1general_2general_3xsrc2,


Operator_st200_min_1general_2general_3general,


Operator_st200_min_1general_2general_3isrc2,


Operator_st200_min_1general_2general_3xsrc2,


Operator_st200_minu_1general_2general_3general,


Operator_st200_minu_1general_2general_3isrc2,


Operator_st200_minu_1general_2general_3xsrc2,


Operator_st200_mulh_1nolink_2general_3general,


Operator_st200_mulh_1nolink_2general_3isrc2,


Operator_st200_mulh_1nolink_2general_3xsrc2,


Operator_st200_mulhh_1nolink_2general_3general,


Operator_st200_mulhh_1nolink_2general_3isrc2,


Operator_st200_mulhh_1nolink_2general_3xsrc2,


Operator_st200_mulhhs_1nolink_2general_3general,


Operator_st200_mulhhs_1nolink_2general_3isrc2,


Operator_st200_mulhhs_1nolink_2general_3xsrc2,


Operator_st200_mulhhu_1nolink_2general_3general,


Operator_st200_mulhhu_1nolink_2general_3isrc2,


Operator_st200_mulhhu_1nolink_2general_3xsrc2,


Operator_st200_mulhs_1nolink_2general_3general,


Operator_st200_mulhs_1nolink_2general_3isrc2,


Operator_st200_mulhs_1nolink_2general_3xsrc2,


Operator_st200_mulhu_1nolink_2general_3general,


Operator_st200_mulhu_1nolink_2general_3isrc2,


Operator_st200_mulhu_1nolink_2general_3xsrc2,


Operator_st200_mull_1nolink_2general_3general,


Operator_st200_mull_1nolink_2general_3isrc2,


Operator_st200_mull_1nolink_2general_3xsrc2,


Operator_st200_mullh_1nolink_2general_3general,


Operator_st200_mullh_1nolink_2general_3isrc2,


Operator_st200_mullh_1nolink_2general_3xsrc2,


Operator_st200_mullhu_1nolink_2general_3general,


Operator_st200_mullhu_1nolink_2general_3isrc2,


Operator_st200_mullhu_1nolink_2general_3xsrc2,


Operator_st200_mullhus_1nolink_2general_3general,


Operator_st200_mullhus_1nolink_2general_3isrc2,


Operator_st200_mullhus_1nolink_2general_3xsrc2,


Operator_st200_mulll_1nolink_2general_3general,


Operator_st200_mulll_1nolink_2general_3isrc2,


Operator_st200_mulll_1nolink_2general_3xsrc2,


Operator_st200_mulllu_1nolink_2general_3general,


Operator_st200_mulllu_1nolink_2general_3isrc2,


Operator_st200_mulllu_1nolink_2general_3xsrc2,


Operator_st200_mullu_1nolink_2general_3general,


Operator_st200_mullu_1nolink_2general_3isrc2,


Operator_st200_mullu_1nolink_2general_3xsrc2,


Operator_st200_nandl_1general_2general_3general,


Operator_st200_nandl_1branch_2general_3general,


Operator_st200_nandl_1general_2general_3isrc2,


Operator_st200_nandl_1branch_2general_3isrc2,


Operator_st200_nandl_1general_2general_3xsrc2,


Operator_st200_nandl_1branch_2general_3xsrc2,


Operator_st200_norl_1general_2general_3general,


Operator_st200_norl_1branch_2general_3general,


Operator_st200_norl_1general_2general_3isrc2,


Operator_st200_norl_1branch_2general_3isrc2,


Operator_st200_norl_1general_2general_3xsrc2,


Operator_st200_norl_1branch_2general_3xsrc2,


Operator_st200_or_1general_2general_3general,


Operator_st200_or_1general_2general_3isrc2,


Operator_st200_or_1general_2general_3xsrc2,


Operator_st200_orc_1general_2general_3general,


Operator_st200_orc_1general_2general_3isrc2,


Operator_st200_orc_1general_2general_3xsrc2,


Operator_st200_orl_1general_2general_3general,


Operator_st200_orl_1branch_2general_3general,


Operator_st200_orl_1general_2general_3isrc2,


Operator_st200_orl_1branch_2general_3isrc2,


Operator_st200_orl_1general_2general_3xsrc2,


Operator_st200_orl_1branch_2general_3xsrc2,


Operator_st200_pft_1isrc2_2general,


Operator_st200_pft_1xsrc2_2general,


Operator_st200_prgadd_1isrc2_2general,


Operator_st200_prgadd_1xsrc2_2general,


Operator_st200_prgset_1isrc2_2general,


Operator_st200_prgset_1xsrc2_2general,


Operator_st200_prgins,


Operator_st200_rfi,


Operator_st200_sbrk,


Operator_st200_sh1add_1general_2general_3general,


Operator_st200_sh1add_1general_2general_3isrc2,


Operator_st200_sh1add_1general_2general_3xsrc2,


Operator_st200_sh2add_1general_2general_3general,


Operator_st200_sh2add_1general_2general_3isrc2,


Operator_st200_sh2add_1general_2general_3xsrc2,


Operator_st200_sh3add_1general_2general_3general,


Operator_st200_sh3add_1general_2general_3isrc2,


Operator_st200_sh3add_1general_2general_3xsrc2,


Operator_st200_sh4add_1general_2general_3general,


Operator_st200_sh4add_1general_2general_3isrc2,


Operator_st200_sh4add_1general_2general_3xsrc2,


Operator_st200_shl_1general_2general_3general,


Operator_st200_shl_1general_2general_3isrc2,


Operator_st200_shl_1general_2general_3xsrc2,


Operator_st200_shr_1general_2general_3general,


Operator_st200_shr_1general_2general_3isrc2,


Operator_st200_shr_1general_2general_3xsrc2,


Operator_st200_shru_1general_2general_3general,


Operator_st200_shru_1general_2general_3isrc2,


Operator_st200_shru_1general_2general_3xsrc2,


Operator_st200_slct_1general_2branch_3general_4general,


Operator_st200_slct_1general_2branch_3general_4isrc2,


Operator_st200_slct_1general_2branch_3general_4xsrc2,


Operator_st200_slctf_1general_2branch_3general_4general,


Operator_st200_slctf_1general_2branch_3general_4isrc2,


Operator_st200_slctf_1general_2branch_3general_4xsrc2,


Operator_st200_stb_1isrc2_2general_3general,


Operator_st200_stb_1xsrc2_2general_3general,


Operator_st200_sth_1isrc2_2general_3general,


Operator_st200_sth_1xsrc2_2general_3general,


Operator_st200_stw_1isrc2_2general_3general,


Operator_st200_stw_1xsrc2_2general_3general,


Operator_st200_sub_1general_2general_3general,


Operator_st200_sub_1general_2isrc2_3general,


Operator_st200_sub_1general_2xsrc2_3general,


Operator_st200_sxtb_1general_2general,


Operator_st200_sxth_1general_2general,


Operator_st200_sync,


Operator_st200_syscall,


Operator_st200_xor_1general_2general_3general,


Operator_st200_xor_1general_2general_3isrc2,


Operator_st200_xor_1general_2general_3xsrc2,


Operator_st200_zxth_1general_2general,


Operator_st200_convbi_1general_2branch,


Operator_st200_convib_1branch_2general,


Operator_st200_mov_bsrc_1general_2branch,


Operator_st200_mov_bdest_1branch_2general,


Operator_st200_nop,


Operator_st200_mov_1general_2general,


Operator_st200_mov_1general_2isrc2,


Operator_st200_mov_1general_2xsrc2,


Operator_st200_mtb_1branch_2general,


Operator_st200_mfb_1general_2branch,


Operator_st200_zxtb_1general_2general,


Operator_st200_syncins,


Operator_st200_return,


Operator_st200_ldwl_1general_2general,


Operator_st200_mul32_1nolink_2general_3general,


Operator_st200_mul32_1nolink_2general_3isrc2,


Operator_st200_mul32_1nolink_2general_3xsrc2,


Operator_st200_mul64h_1nolink_2general_3general,


Operator_st200_mul64h_1nolink_2general_3isrc2,


Operator_st200_mul64h_1nolink_2general_3xsrc2,


Operator_st200_mul64hu_1nolink_2general_3general,


Operator_st200_mul64hu_1nolink_2general_3isrc2,


Operator_st200_mul64hu_1nolink_2general_3xsrc2,


Operator_st200_mulfrac_1nolink_2general_3general,


Operator_st200_mulfrac_1nolink_2general_3isrc2,


Operator_st200_mulfrac_1nolink_2general_3xsrc2,


Operator_st200_prginspg_1isrc2_2general,


Operator_st200_prginspg_1xsrc2_2general,


Operator_st200_pswclr_1general,


Operator_st200_pswset_1general,


Operator_st200_stwl_1branch_2general_3general,


Operator_st200_wmb,


Operator_st200_idle,


Operator_st200_MOVP,


Operator_st200_COMPOSEP,


Operator_st200_EXTRACTP,


Operator_st200_MOVC,


Operator_st200_MOVCF,


Operator_st200_add_ph_1general_2general_3general,


Operator_st200_adds_ph_1general_2general_3general,


Operator_st200_abss_ph_1general_2general,


Operator_st200_max_ph_1general_2general_3general,


Operator_st200_min_ph_1general_2general_3general,


Operator_st200_mul_ph_1nolink_2general_3general,


Operator_st200_muladd_ph_1nolink_2general_3general,


Operator_st200_mulfracadds_ph_1nolink_2general_3general,


Operator_st200_mulfracrm_ph_1nolink_2general_3general,


Operator_st200_mulfracrne_ph_1nolink_2general_3general,


Operator_st200_shl_ph_1general_2general_3general,


Operator_st200_shl_ph_1general_2general_3isrc2,


Operator_st200_shl_ph_1general_2general_3xsrc2,


Operator_st200_shls_ph_1nolink_2general_3general,


Operator_st200_shls_ph_1nolink_2general_3isrc2,


Operator_st200_shls_ph_1nolink_2general_3xsrc2,


Operator_st200_shr_ph_1general_2general_3general,


Operator_st200_shr_ph_1general_2general_3isrc2,


Operator_st200_shr_ph_1general_2general_3xsrc2,


Operator_st200_shrrnp_ph_1nolink_2general_3general,


Operator_st200_shrrnp_ph_1nolink_2general_3isrc2,


Operator_st200_shrrnp_ph_1nolink_2general_3xsrc2,


Operator_st200_shrrne_ph_1nolink_2general_3general,


Operator_st200_shrrne_ph_1nolink_2general_3isrc2,


Operator_st200_shrrne_ph_1nolink_2general_3xsrc2,


Operator_st200_sub_ph_1general_2general_3general,


Operator_st200_subs_ph_1general_2general_3general,


Operator_st200_shuff_pbh_1general_2general_3general,


Operator_st200_shuff_pbl_1general_2general_3general,


Operator_st200_shuff_phh_1general_2general_3general,


Operator_st200_shuff_phl_1general_2general_3general,


Operator_st200_shuffodd_pb_1general_2general_3general,


Operator_st200_shuffeve_pb_1general_2general_3general,


Operator_st200_perm_pb_1general_2general_3general,


Operator_st200_perm_pb_1general_2general_3isrc2,


Operator_st200_perm_pb_1general_2general_3xsrc2,


Operator_st200_ext1_pb_1general_2general_3general,


Operator_st200_ext2_pb_1general_2general_3general,


Operator_st200_ext3_pb_1general_2general_3general,


Operator_st200_packsu_pb_1general_2general_3general,


Operator_st200_pack_pb_1general_2general_3general,


Operator_st200_packrnp_phh_1general_2general_3general,


Operator_st200_packs_ph_1general_2general_3general,


Operator_st200_cmpeq_ph_1general_2general_3general,


Operator_st200_cmpgt_ph_1general_2general_3general,


Operator_st200_sadu_pb_1nolink_2general_3general,


Operator_st200_absubu_pb_1general_2general_3general,


Operator_st200_muladdus_pb_1nolink_2general_3general,


Operator_st200_avg4u_pb_1nolink_2branch_3general_4general,


Operator_st200_avgu_pb_1general_2branch_3general_4general,


Operator_st200_cmpeq_pb_1general_2general_3general,


Operator_st200_cmpgtu_pb_1general_2general_3general,


Operator_st200_slct_pb_1general_2branch_3general_4general,


Operator_st200_slct_pb_1general_2branch_3general_4isrc2,


Operator_st200_slct_pb_1general_2branch_3general_4xsrc2,


Operator_st200_slctf_pb_1general_2branch_3general_4isrc2,


Operator_st200_slctf_pb_1general_2branch_3general_4xsrc2,


Operator_st200_cmpeq_ph_bdest_1branch_2general_3general,


Operator_st200_cmpeq_pb_bdest_1branch_2general_3general,


Operator_st200_cmpgt_ph_bdest_1branch_2general_3general,


Operator_st200_cmpgtu_pb_bdest_1branch_2general_3general,


Operator_st240_mov_bdest_1branch_2general,


Operator_st240_mov_bsrc_1general_2branch,


Operator_st200_extl_pb_1general_2branch_3general_4general,


Operator_st200_extr_pb_1general_2branch_3general_4general,


Operator_st200_addf_n_1nolink_2general_3general,


Operator_st200_addpc_1general_2isrc2,


Operator_st200_addpc_1general_2xsrc2,


Operator_st200_adds_1general_2general_3general,


Operator_st200_addso_1general_2general_3general,


Operator_st200_andl_bdest_1branch_2branch_3branch,


Operator_st200_cmpeqf_n_1general_2general_3general,


Operator_st200_cmpeqf_n_1branch_2general_3general,


Operator_st200_cmpgef_n_1general_2general_3general,


Operator_st200_cmpgef_n_1branch_2general_3general,


Operator_st200_cmpgtf_n_1general_2general_3general,


Operator_st200_cmpgtf_n_1branch_2general_3general,


Operator_st200_convfi_n_1nolink_2general,


Operator_st200_convif_n_1nolink_2general,


Operator_st200_dbgsbrk,


Operator_st200_dib,


Operator_st200_div_1nolink_2general_3general,


Operator_st200_divu_1nolink_2general_3general,


Operator_st200_extract_1general_2general_3isrc2,


Operator_st200_extract_1general_2general_3xsrc2,


Operator_st200_extractu_1general_2general_3isrc2,


Operator_st200_extractu_1general_2general_3xsrc2,


Operator_st200_extractl_1general_2general_3isrc2,


Operator_st200_extractl_1general_2general_3xsrc2,


Operator_st200_extractlu_1general_2general_3isrc2,


Operator_st200_extractlu_1general_2general_3xsrc2,


Operator_st200_flushadd_1isrc2_2general,


Operator_st200_flushadd_1xsrc2_2general,


Operator_st200_flushadd_l1_1isrc2_2general,


Operator_st200_flushadd_l1_1xsrc2_2general,


Operator_st200_invadd_1isrc2_2general,


Operator_st200_invadd_1xsrc2_2general,


Operator_st200_invadd_l1_1isrc2_2general,


Operator_st200_invadd_l1_1xsrc2_2general,


Operator_st200_ldbc_1nolink_2predicate_3isrc2_4general,


Operator_st200_ldbc_1nolink_2predicate_3xsrc2_4general,


Operator_st200_ldbuc_1nolink_2predicate_3isrc2_4general,


Operator_st200_ldbuc_1nolink_2predicate_3xsrc2_4general,


Operator_st200_ldhc_1nolink_2predicate_3isrc2_4general,


Operator_st200_ldhc_1nolink_2predicate_3xsrc2_4general,


Operator_st200_ldhuc_1nolink_2predicate_3isrc2_4general,


Operator_st200_ldhuc_1nolink_2predicate_3xsrc2_4general,


Operator_st200_ldl_1nzpaired_2isrc2_3general,


Operator_st200_MULTI_ldl_1nzpaired_2isrc2_3general,


Operator_st200_ldl_1nzpaired_2xsrc2_3general,


Operator_st200_MULTI_ldl_1nzpaired_2xsrc2_3general,


Operator_st200_ldlc_1nzpaired_2predicate_3isrc2_4general,


Operator_st200_MULTI_ldlc_1nzpaired_2predicate_3isrc2_4general,


Operator_st200_ldlc_1nzpaired_2predicate_3xsrc2_4general,


Operator_st200_MULTI_ldlc_1nzpaired_2predicate_3xsrc2_4general,


Operator_st200_ldwc_1general_2predicate_3isrc2_4general,


Operator_st200_ldwc_1general_2predicate_3xsrc2_4general,


Operator_st200_mov_bsrc_bdest_1branch_2branch,


Operator_st200_mulf_n_1nolink_2general_3general,


Operator_st200_nandl_bdest_1branch_2branch_3branch,


Operator_st200_norl_bdest_1branch_2branch_3branch,


Operator_st200_orl_bdest_1branch_2branch_3branch,


Operator_st200_pftc_1predicate_2isrc2_3general,


Operator_st200_pftc_1predicate_2xsrc2_3general,


Operator_st200_prgadd_l1_1isrc2_2general,


Operator_st200_prgadd_l1_1xsrc2_2general,


Operator_st200_prginsadd_1isrc2_2general,


Operator_st200_prginsadd_1xsrc2_2general,


Operator_st200_prginsadd_l1_1isrc2_2general,


Operator_st200_prginsadd_l1_1xsrc2_2general,


Operator_st200_prginsset_1isrc2_2general,


Operator_st200_prginsset_1xsrc2_2general,


Operator_st200_prginsset_l1_1isrc2_2general,


Operator_st200_prginsset_l1_1xsrc2_2general,


Operator_st200_prgset_l1_1isrc2_2general,


Operator_st200_prgset_l1_1xsrc2_2general,


Operator_st200_pswmask_1nolink_2general_3isrc2,


Operator_st200_pswmask_1nolink_2general_3xsrc2,


Operator_st200_rem_1nolink_2general_3general,


Operator_st200_remu_1nolink_2general_3general,


Operator_st200_retention,


Operator_st200_rotl_1general_2general_3general,


Operator_st200_rotl_1general_2general_3isrc2,


Operator_st200_rotl_1general_2general_3xsrc2,


Operator_st200_sats_1general_2general,


Operator_st200_satso_1general_2general,


Operator_st240_sbrk,


Operator_st200_sh1adds_1general_2general_3general,


Operator_st200_sh1addso_1general_2general_3general,


Operator_st200_sh1subs_1general_2general_3general,


Operator_st200_sh1subso_1general_2general_3general,


Operator_st200_shls_1nolink_2general_3general,


Operator_st200_shls_1nolink_2general_3isrc2,


Operator_st200_shls_1nolink_2general_3xsrc2,


Operator_st200_shlso_1nolink_2general_3general,


Operator_st200_shlso_1nolink_2general_3isrc2,


Operator_st200_shlso_1nolink_2general_3xsrc2,


Operator_st200_shrrnp_1nolink_2general_3isrc2,


Operator_st200_shrrnp_1nolink_2general_3xsrc2,


Operator_st200_slct_rsrc_1general_2branch_3general_4general,


Operator_st200_stbc_1isrc2_2general_3predicate_4general,


Operator_st200_stbc_1xsrc2_2general_3predicate_4general,


Operator_st200_sthc_1isrc2_2general_3predicate_4general,


Operator_st200_sthc_1xsrc2_2general_3predicate_4general,


Operator_st200_stl_1isrc2_2general_3paired,


Operator_st200_MULTI_stl_1isrc2_2general_3paired,


Operator_st200_stl_1xsrc2_2general_3paired,


Operator_st200_MULTI_stl_1xsrc2_2general_3paired,


Operator_st200_stlc_1isrc2_2general_3predicate_4paired,


Operator_st200_MULTI_stlc_1isrc2_2general_3predicate_4paired,


Operator_st200_stlc_1xsrc2_2general_3predicate_4paired,


Operator_st200_MULTI_stlc_1xsrc2_2general_3predicate_4paired,


Operator_st200_stwc_1isrc2_2general_3predicate_4general,


Operator_st200_stwc_1xsrc2_2general_3predicate_4general,


Operator_st200_subf_n_1nolink_2general_3general,


Operator_st200_subs_1general_2general_3general,


Operator_st200_subso_1general_2general_3general,


Operator_st200_sxt_1general_2general_3general,


Operator_st200_sxt_1general_2general_3isrc2,


Operator_st200_sxt_1general_2general_3xsrc2,


Operator_st240_syscall,


Operator_st200_waitl,


Operator_st200_zxt_1general_2general_3general,


Operator_st200_zxt_1general_2general_3isrc2,


Operator_st200_zxt_1general_2general_3xsrc2,


Operator_st200_cmplef_n_1general_2general_3general,


Operator_st200_cmplef_n_1branch_2general_3general,


Operator_st200_cmpltf_n_1general_2general_3general,


Operator_st200_cmpltf_n_1branch_2general_3general,


Operator_st240_mull_1nolink_2general_3xsrc2,


Operator_st200_slctf_pb_1general_2branch_3general_4general,


Operator_st200_unpacku_pbh_1general_2general,


Operator_st200_unpacku_pbl_1general_2general,


Operator_st200_pack_ph_1general_2general_3general,



#undef Operator


#define Operator_IMMEDIATE_COUNT_MAX 1




#define OperatorParameter_CONFLICTS_COUNT_MAX 0



#define OperatorParameters(INDEX,PARAMETERS) 
#undef OperatorParameters


#define OperatorParameterArray_COUNT_MAX 5


  Operator__
#undef Operator
} Operator;
typedef uint16_t short_Operator;

/*
 * Bundling --	Enumeration.
 */
typedef enum Bundling {
#define Bundling(NAME) Bundling_ ##NAME,


/*
  st200/Bundling.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Bundling_st200_ANY,
Bundling_st200_ANYX,
Bundling_st200_FIRST,
Bundling_st200_EVEN,
Bundling_st200_MEM,
Bundling_st200_MEMX,
Bundling_st200_ODD,
Bundling_st200_ALONE,

#undef Bundling


#define Bundling_LOG2_MAX 3


  Bundling__
#undef Bundling
} Bundling;
typedef uint8_t short_Bundling;

/*
 * Template --	Enumeration.
 */
typedef enum Template {
#define Template(NAME,ALIGNMENT,INCREMENT,DISTANCES,ENCODE,DECODE) Template_ ##NAME,


/*
  st200/Template.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Template_st200_T0,


Template_st200_T1,


Template_st200_T2,


Template_st200_T3,


Template_st200_T4,


Template_st200_T5,


Template_st200_T6,


Template_st200_T7,


Template_st200_T8,


Template_st200_T9,


Template_st200_T10,


Template_st200_T11,


Template_st200_T12,


Template_st200_T13,


Template_st200_T14,


Template_st200_T15,


Template_st200_T16,


Template_st200_T17,


Template_st200_T18,


Template_st200_T19,


Template_st200_T20,


Template_st200_T21,


Template_st200_T22,


Template_st200_T23,


Template_st200_T24,


Template_st200_T25,


Template_st200_T26,


Template_st200_T27,


Template_st200_T28,


Template_st200_T29,


Template_st200_T30,


Template_st200_T31,


Template_st200_T32,


Template_st200_T33,


Template_st200_T34,


Template_st200_T35,


Template_st200_T36,


Template_st200_T37,


Template_st200_T38,


Template_st200_T39,


Template_st200_T40,


Template_st200_T41,


Template_st200_T42,


Template_st200_T43,


Template_st200_T44,


Template_st200_T45,


Template_st200_T46,


Template_st200_T47,


Template_st200_T48,


Template_st200_T49,


Template_st200_T50,


Template_st200_T51,


Template_st200_T52,


Template_st200_T53,


Template_st200_T54,


Template_st200_T55,


Template_st200_T56,


Template_st200_T57,


Template_st200_T58,


Template_st200_T59,


Template_st200_T60,


Template_st200_T61,


Template_st200_T62,


Template_st200_T63,


Template_st200_T64,


Template_st200_T65,


Template_st200_T66,


Template_st200_T67,


Template_st200_T68,


Template_st200_T69,


Template_st200_T70,


Template_st200_T71,


Template_st200_T72,


Template_st200_T73,


Template_st200_T74,


Template_st200_T75,


Template_st200_T76,


Template_st200_T77,


Template_st200_T78,


Template_st200_T79,


Template_st200_T80,


Template_st200_T81,


Template_st200_T82,


Template_st200_T83,


Template_st200_T84,


Template_st200_T85,


Template_st200_T86,


Template_st200_T87,


Template_st200_T88,


Template_st200_T89,


Template_st200_T90,


Template_st200_T91,


Template_st200_T92,


Template_st200_T93,


Template_st200_T94,


Template_st200_T95,


Template_st200_T96,


Template_st200_T97,


Template_st200_T98,


Template_st200_T99,


Template_st200_T100,


Template_st200_T0_NOP_S6,


Template_st200_T0_NOP_S23,


Template_st200_T0_NOP_S34,


Template_st200_T1_NOP_S6,


Template_st200_T1_NOP_S6_S18,


Template_st200_T1_NOP_S6_S34,


Template_st200_T1_NOP_S6_S46,


Template_st200_T1_NOP_S18,


Template_st200_T1_NOP_S18_S6,


Template_st200_T1_NOP_S18_S34,


Template_st200_T1_NOP_S18_S46,


Template_st200_T1_NOP_S34,


Template_st200_T1_NOP_S34_S6,


Template_st200_T1_NOP_S34_S18,


Template_st200_T1_NOP_S34_S46,


Template_st200_T1_NOP_S46,


Template_st200_T1_NOP_S46_S6,


Template_st200_T1_NOP_S46_S18,


Template_st200_T1_NOP_S46_S34,


Template_st200_T2_NOP_S6,


Template_st200_T2_NOP_S6_S23,


Template_st200_T2_NOP_S6_S34,


Template_st200_T2_NOP_S6_S42,


Template_st200_T2_NOP_S23,


Template_st200_T2_NOP_S23_S6,


Template_st200_T2_NOP_S23_S34,


Template_st200_T2_NOP_S23_S42,


Template_st200_T2_NOP_S34,


Template_st200_T2_NOP_S34_S6,


Template_st200_T2_NOP_S34_S23,


Template_st200_T2_NOP_S34_S42,


Template_st200_T2_NOP_S42,


Template_st200_T2_NOP_S42_S6,


Template_st200_T2_NOP_S42_S23,


Template_st200_T2_NOP_S42_S34,


Template_st200_T3_NOP_S34,


Template_st200_T4_NOP_S34,


Template_st200_T4_NOP_S42,


Template_st200_T5_NOP_S34,


Template_st200_T5_NOP_S46,


Template_st200_T6_NOP_S0,


Template_st200_T7_NOP_S5,


Template_st200_T7_NOP_S24,


Template_st200_T8_NOP_S6,


Template_st200_T8_NOP_S23,


Template_st200_T9_NOP_S5,


Template_st200_T9_NOP_S24,


Template_st200_T9_NOP_S36,


Template_st200_T10_NOP_S6,


Template_st200_T10_NOP_S24,


Template_st200_T10_NOP_S35,


Template_st200_T11_NOP_S6,


Template_st200_T11_NOP_S23,


Template_st200_T11_NOP_S36,


Template_st200_T12_NOP_S5,


Template_st200_T12_NOP_S5_S24,


Template_st200_T12_NOP_S5_S36,


Template_st200_T12_NOP_S5_S47,


Template_st200_T12_NOP_S24,


Template_st200_T12_NOP_S24_S5,


Template_st200_T12_NOP_S24_S36,


Template_st200_T12_NOP_S24_S47,


Template_st200_T12_NOP_S36,


Template_st200_T12_NOP_S36_S5,


Template_st200_T12_NOP_S36_S24,


Template_st200_T12_NOP_S36_S47,


Template_st200_T12_NOP_S47,


Template_st200_T12_NOP_S47_S5,


Template_st200_T12_NOP_S47_S24,


Template_st200_T12_NOP_S47_S36,


Template_st200_T13_NOP_S6,


Template_st200_T13_NOP_S6_S24,


Template_st200_T13_NOP_S6_S35,


Template_st200_T13_NOP_S6_S47,


Template_st200_T13_NOP_S24,


Template_st200_T13_NOP_S24_S6,


Template_st200_T13_NOP_S24_S35,


Template_st200_T13_NOP_S24_S47,


Template_st200_T13_NOP_S35,


Template_st200_T13_NOP_S35_S6,


Template_st200_T13_NOP_S35_S24,


Template_st200_T13_NOP_S35_S47,


Template_st200_T13_NOP_S47,


Template_st200_T13_NOP_S47_S6,


Template_st200_T13_NOP_S47_S24,


Template_st200_T13_NOP_S47_S35,


Template_st200_T14_NOP_S6,


Template_st200_T14_NOP_S6_S23,


Template_st200_T14_NOP_S6_S36,


Template_st200_T14_NOP_S6_S47,


Template_st200_T14_NOP_S23,


Template_st200_T14_NOP_S23_S6,


Template_st200_T14_NOP_S23_S36,


Template_st200_T14_NOP_S23_S47,


Template_st200_T14_NOP_S36,


Template_st200_T14_NOP_S36_S6,


Template_st200_T14_NOP_S36_S23,


Template_st200_T14_NOP_S36_S47,


Template_st200_T14_NOP_S47,


Template_st200_T14_NOP_S47_S6,


Template_st200_T14_NOP_S47_S23,


Template_st200_T14_NOP_S47_S36,


Template_st200_T15_NOP_S6,


Template_st200_T15_NOP_S6_S24,


Template_st200_T15_NOP_S6_S36,


Template_st200_T15_NOP_S6_S46,


Template_st200_T15_NOP_S24,


Template_st200_T15_NOP_S24_S6,


Template_st200_T15_NOP_S24_S36,


Template_st200_T15_NOP_S24_S46,


Template_st200_T15_NOP_S36,


Template_st200_T15_NOP_S36_S6,


Template_st200_T15_NOP_S36_S24,


Template_st200_T15_NOP_S36_S46,


Template_st200_T15_NOP_S46,


Template_st200_T15_NOP_S46_S6,


Template_st200_T15_NOP_S46_S24,


Template_st200_T15_NOP_S46_S36,


Template_st200_T16_NOP_S10,


Template_st200_T17_NOP_S2,


Template_st200_T17_NOP_S21,


Template_st200_T18_NOP_S10,


Template_st200_T18_NOP_S24,


Template_st200_T19_NOP_S2,


Template_st200_T19_NOP_S18,


Template_st200_T19_NOP_S34,


Template_st200_T20_NOP_S2,


Template_st200_T20_NOP_S21,


Template_st200_T20_NOP_S36,


Template_st200_T21_NOP_S4,


Template_st200_T21_NOP_S21,


Template_st200_T21_NOP_S35,


Template_st200_T22_NOP_S10,


Template_st200_T22_NOP_S24,


Template_st200_T22_NOP_S32,


Template_st200_T23_NOP_S2,


Template_st200_T23_NOP_S2_S18,


Template_st200_T23_NOP_S2_S31,


Template_st200_T23_NOP_S2_S44,


Template_st200_T23_NOP_S18,


Template_st200_T23_NOP_S18_S2,


Template_st200_T23_NOP_S18_S31,


Template_st200_T23_NOP_S18_S44,


Template_st200_T23_NOP_S31,


Template_st200_T23_NOP_S31_S2,


Template_st200_T23_NOP_S31_S18,


Template_st200_T23_NOP_S31_S44,


Template_st200_T23_NOP_S44,


Template_st200_T23_NOP_S44_S2,


Template_st200_T23_NOP_S44_S18,


Template_st200_T23_NOP_S44_S31,


Template_st200_T24_NOP_S2,


Template_st200_T24_NOP_S2_S18,


Template_st200_T24_NOP_S2_S34,


Template_st200_T24_NOP_S2_S47,


Template_st200_T24_NOP_S18,


Template_st200_T24_NOP_S18_S2,


Template_st200_T24_NOP_S18_S34,


Template_st200_T24_NOP_S18_S47,


Template_st200_T24_NOP_S34,


Template_st200_T24_NOP_S34_S2,


Template_st200_T24_NOP_S34_S18,


Template_st200_T24_NOP_S34_S47,


Template_st200_T24_NOP_S47,


Template_st200_T24_NOP_S47_S2,


Template_st200_T24_NOP_S47_S18,


Template_st200_T24_NOP_S47_S34,


Template_st200_T25_NOP_S2,


Template_st200_T25_NOP_S2_S21,


Template_st200_T25_NOP_S2_S36,


Template_st200_T25_NOP_S2_S47,


Template_st200_T25_NOP_S21,


Template_st200_T25_NOP_S21_S2,


Template_st200_T25_NOP_S21_S36,


Template_st200_T25_NOP_S21_S47,


Template_st200_T25_NOP_S36,


Template_st200_T25_NOP_S36_S2,


Template_st200_T25_NOP_S36_S21,


Template_st200_T25_NOP_S36_S47,


Template_st200_T25_NOP_S47,


Template_st200_T25_NOP_S47_S2,


Template_st200_T25_NOP_S47_S21,


Template_st200_T25_NOP_S47_S36,


Template_st200_T26_NOP_S4,


Template_st200_T26_NOP_S4_S18,


Template_st200_T26_NOP_S4_S35,


Template_st200_T26_NOP_S4_S44,


Template_st200_T26_NOP_S18,


Template_st200_T26_NOP_S18_S4,


Template_st200_T26_NOP_S18_S35,


Template_st200_T26_NOP_S18_S44,


Template_st200_T26_NOP_S35,


Template_st200_T26_NOP_S35_S4,


Template_st200_T26_NOP_S35_S18,


Template_st200_T26_NOP_S35_S44,


Template_st200_T26_NOP_S44,


Template_st200_T26_NOP_S44_S4,


Template_st200_T26_NOP_S44_S18,


Template_st200_T26_NOP_S44_S35,


Template_st200_T27_NOP_S4,


Template_st200_T27_NOP_S4_S21,


Template_st200_T27_NOP_S4_S35,


Template_st200_T27_NOP_S4_S47,


Template_st200_T27_NOP_S21,


Template_st200_T27_NOP_S21_S4,


Template_st200_T27_NOP_S21_S35,


Template_st200_T27_NOP_S21_S47,


Template_st200_T27_NOP_S35,


Template_st200_T27_NOP_S35_S4,


Template_st200_T27_NOP_S35_S21,


Template_st200_T27_NOP_S35_S47,


Template_st200_T27_NOP_S47,


Template_st200_T27_NOP_S47_S4,


Template_st200_T27_NOP_S47_S21,


Template_st200_T27_NOP_S47_S35,


Template_st200_T28_NOP_S6,


Template_st200_T28_NOP_S6_S23,


Template_st200_T28_NOP_S6_S36,


Template_st200_T28_NOP_S6_S44,


Template_st200_T28_NOP_S23,


Template_st200_T28_NOP_S23_S6,


Template_st200_T28_NOP_S23_S36,


Template_st200_T28_NOP_S23_S44,


Template_st200_T28_NOP_S36,


Template_st200_T28_NOP_S36_S6,


Template_st200_T28_NOP_S36_S23,


Template_st200_T28_NOP_S36_S44,


Template_st200_T28_NOP_S44,


Template_st200_T28_NOP_S44_S6,


Template_st200_T28_NOP_S44_S23,


Template_st200_T28_NOP_S44_S36,


Template_st200_T29_NOP_S6,


Template_st200_T29_NOP_S6_S21,


Template_st200_T29_NOP_S6_S36,


Template_st200_T29_NOP_S6_S46,


Template_st200_T29_NOP_S21,


Template_st200_T29_NOP_S21_S6,


Template_st200_T29_NOP_S21_S36,


Template_st200_T29_NOP_S21_S46,


Template_st200_T29_NOP_S36,


Template_st200_T29_NOP_S36_S6,


Template_st200_T29_NOP_S36_S21,


Template_st200_T29_NOP_S36_S46,


Template_st200_T29_NOP_S46,


Template_st200_T29_NOP_S46_S6,


Template_st200_T29_NOP_S46_S21,


Template_st200_T29_NOP_S46_S36,


Template_st200_T30_NOP_S10,


Template_st200_T30_NOP_S10_S24,


Template_st200_T30_NOP_S10_S32,


Template_st200_T30_NOP_S10_S47,


Template_st200_T30_NOP_S24,


Template_st200_T30_NOP_S24_S10,


Template_st200_T30_NOP_S24_S32,


Template_st200_T30_NOP_S24_S47,


Template_st200_T30_NOP_S32,


Template_st200_T30_NOP_S32_S10,


Template_st200_T30_NOP_S32_S24,


Template_st200_T30_NOP_S32_S47,


Template_st200_T30_NOP_S47,


Template_st200_T30_NOP_S47_S10,


Template_st200_T30_NOP_S47_S24,


Template_st200_T30_NOP_S47_S32,


Template_st200_T31_NOP_S2,


Template_st200_T31_NOP_S18,


Template_st200_T32_NOP_S6,


Template_st200_T32_NOP_S18,


Template_st200_T33_NOP_S6,


Template_st200_T33_NOP_S23,


Template_st200_T34_NOP_S2,


Template_st200_T35_NOP_S6,


Template_st200_T36_NOP_S2,


Template_st200_T36_NOP_S42,


Template_st200_T37_NOP_S6,


Template_st200_T37_NOP_S42,


Template_st200_T38_NOP_S6,


Template_st200_T38_NOP_S46,


Template_st200_T40_NOP_S36,


Template_st200_T41_NOP_S29,


Template_st200_T42_NOP_S36,


Template_st200_T42_NOP_S42,


Template_st200_T43_NOP_S29,


Template_st200_T43_NOP_S42,


Template_st200_T44_NOP_S36,


Template_st200_T44_NOP_S46,


Template_st200_T47_NOP_S11,


Template_st200_T47_NOP_S22,


Template_st200_T48_NOP_S3,


Template_st200_T48_NOP_S22,


Template_st200_T48_NOP_S35,


Template_st200_T49_NOP_S11,


Template_st200_T49_NOP_S22,


Template_st200_T49_NOP_S30,


Template_st200_T50_NOP_S3,


Template_st200_T50_NOP_S3_S22,


Template_st200_T50_NOP_S3_S35,


Template_st200_T50_NOP_S3_S47,


Template_st200_T50_NOP_S22,


Template_st200_T50_NOP_S22_S3,


Template_st200_T50_NOP_S22_S35,


Template_st200_T50_NOP_S22_S47,


Template_st200_T50_NOP_S35,


Template_st200_T50_NOP_S35_S3,


Template_st200_T50_NOP_S35_S22,


Template_st200_T50_NOP_S35_S47,


Template_st200_T50_NOP_S47,


Template_st200_T50_NOP_S47_S3,


Template_st200_T50_NOP_S47_S22,


Template_st200_T50_NOP_S47_S35,


Template_st200_T51_NOP_S11,


Template_st200_T51_NOP_S11_S22,


Template_st200_T51_NOP_S11_S30,


Template_st200_T51_NOP_S11_S47,


Template_st200_T51_NOP_S22,


Template_st200_T51_NOP_S22_S11,


Template_st200_T51_NOP_S22_S30,


Template_st200_T51_NOP_S22_S47,


Template_st200_T51_NOP_S30,


Template_st200_T51_NOP_S30_S11,


Template_st200_T51_NOP_S30_S22,


Template_st200_T51_NOP_S30_S47,


Template_st200_T51_NOP_S47,


Template_st200_T51_NOP_S47_S11,


Template_st200_T51_NOP_S47_S22,


Template_st200_T51_NOP_S47_S30,


Template_st200_T52_NOP_S3,


Template_st200_T52_NOP_S22,


Template_st200_T53_NOP_S11,


Template_st200_T53_NOP_S22,


Template_st200_T54_NOP_S9,


Template_st200_T55_NOP_S3,


Template_st200_T55_NOP_S22,


Template_st200_T56_NOP_S9,


Template_st200_T56_NOP_S20,


Template_st200_T57_NOP_S1,


Template_st200_T57_NOP_S24,


Template_st200_T57_NOP_S33,


Template_st200_T58_NOP_S3,


Template_st200_T58_NOP_S17,


Template_st200_T58_NOP_S33,


Template_st200_T59_NOP_S3,


Template_st200_T59_NOP_S22,


Template_st200_T59_NOP_S36,


Template_st200_T60_NOP_S9,


Template_st200_T60_NOP_S20,


Template_st200_T60_NOP_S36,


Template_st200_T61_NOP_S9,


Template_st200_T61_NOP_S24,


Template_st200_T61_NOP_S35,


Template_st200_T62_NOP_S1,


Template_st200_T62_NOP_S1_S24,


Template_st200_T62_NOP_S1_S33,


Template_st200_T62_NOP_S1_S47,


Template_st200_T62_NOP_S24,


Template_st200_T62_NOP_S24_S1,


Template_st200_T62_NOP_S24_S33,


Template_st200_T62_NOP_S24_S47,


Template_st200_T62_NOP_S33,


Template_st200_T62_NOP_S33_S1,


Template_st200_T62_NOP_S33_S24,


Template_st200_T62_NOP_S33_S47,


Template_st200_T62_NOP_S47,


Template_st200_T62_NOP_S47_S1,


Template_st200_T62_NOP_S47_S24,


Template_st200_T62_NOP_S47_S33,


Template_st200_T63_NOP_S3,


Template_st200_T63_NOP_S3_S16,


Template_st200_T63_NOP_S3_S30,


Template_st200_T63_NOP_S3_S45,


Template_st200_T63_NOP_S16,


Template_st200_T63_NOP_S16_S3,


Template_st200_T63_NOP_S16_S30,


Template_st200_T63_NOP_S16_S45,


Template_st200_T63_NOP_S30,


Template_st200_T63_NOP_S30_S3,


Template_st200_T63_NOP_S30_S16,


Template_st200_T63_NOP_S30_S45,


Template_st200_T63_NOP_S45,


Template_st200_T63_NOP_S45_S3,


Template_st200_T63_NOP_S45_S16,


Template_st200_T63_NOP_S45_S30,


Template_st200_T64_NOP_S3,


Template_st200_T64_NOP_S3_S19,


Template_st200_T64_NOP_S3_S33,


Template_st200_T64_NOP_S3_S46,


Template_st200_T64_NOP_S19,


Template_st200_T64_NOP_S19_S3,


Template_st200_T64_NOP_S19_S33,


Template_st200_T64_NOP_S19_S46,


Template_st200_T64_NOP_S33,


Template_st200_T64_NOP_S33_S3,


Template_st200_T64_NOP_S33_S19,


Template_st200_T64_NOP_S33_S46,


Template_st200_T64_NOP_S46,


Template_st200_T64_NOP_S46_S3,


Template_st200_T64_NOP_S46_S19,


Template_st200_T64_NOP_S46_S33,


Template_st200_T65_NOP_S3,


Template_st200_T65_NOP_S3_S17,


Template_st200_T65_NOP_S3_S33,


Template_st200_T65_NOP_S3_S47,


Template_st200_T65_NOP_S17,


Template_st200_T65_NOP_S17_S3,


Template_st200_T65_NOP_S17_S33,


Template_st200_T65_NOP_S17_S47,


Template_st200_T65_NOP_S33,


Template_st200_T65_NOP_S33_S3,


Template_st200_T65_NOP_S33_S17,


Template_st200_T65_NOP_S33_S47,


Template_st200_T65_NOP_S47,


Template_st200_T65_NOP_S47_S3,


Template_st200_T65_NOP_S47_S17,


Template_st200_T65_NOP_S47_S33,


Template_st200_T66_NOP_S3,


Template_st200_T66_NOP_S3_S22,


Template_st200_T66_NOP_S3_S36,


Template_st200_T66_NOP_S3_S43,


Template_st200_T66_NOP_S22,


Template_st200_T66_NOP_S22_S3,


Template_st200_T66_NOP_S22_S36,


Template_st200_T66_NOP_S22_S43,


Template_st200_T66_NOP_S36,


Template_st200_T66_NOP_S36_S3,


Template_st200_T66_NOP_S36_S22,


Template_st200_T66_NOP_S36_S43,


Template_st200_T66_NOP_S43,


Template_st200_T66_NOP_S43_S3,


Template_st200_T66_NOP_S43_S22,


Template_st200_T66_NOP_S43_S36,


Template_st200_T67_NOP_S9,


Template_st200_T67_NOP_S9_S20,


Template_st200_T67_NOP_S9_S36,


Template_st200_T67_NOP_S9_S47,


Template_st200_T67_NOP_S20,


Template_st200_T67_NOP_S20_S9,


Template_st200_T67_NOP_S20_S36,


Template_st200_T67_NOP_S20_S47,


Template_st200_T67_NOP_S36,


Template_st200_T67_NOP_S36_S9,


Template_st200_T67_NOP_S36_S20,


Template_st200_T67_NOP_S36_S47,


Template_st200_T67_NOP_S47,


Template_st200_T67_NOP_S47_S9,


Template_st200_T67_NOP_S47_S20,


Template_st200_T67_NOP_S47_S36,


Template_st200_T68_NOP_S9,


Template_st200_T68_NOP_S9_S24,


Template_st200_T68_NOP_S9_S36,


Template_st200_T68_NOP_S9_S46,


Template_st200_T68_NOP_S24,


Template_st200_T68_NOP_S24_S9,


Template_st200_T68_NOP_S24_S36,


Template_st200_T68_NOP_S24_S46,


Template_st200_T68_NOP_S36,


Template_st200_T68_NOP_S36_S9,


Template_st200_T68_NOP_S36_S24,


Template_st200_T68_NOP_S36_S46,


Template_st200_T68_NOP_S46,


Template_st200_T68_NOP_S46_S9,


Template_st200_T68_NOP_S46_S24,


Template_st200_T68_NOP_S46_S36,


Template_st200_T69_NOP_S9,


Template_st200_T69_NOP_S9_S24,


Template_st200_T69_NOP_S9_S35,


Template_st200_T69_NOP_S9_S47,


Template_st200_T69_NOP_S24,


Template_st200_T69_NOP_S24_S9,


Template_st200_T69_NOP_S24_S35,


Template_st200_T69_NOP_S24_S47,


Template_st200_T69_NOP_S35,


Template_st200_T69_NOP_S35_S9,


Template_st200_T69_NOP_S35_S24,


Template_st200_T69_NOP_S35_S47,


Template_st200_T69_NOP_S47,


Template_st200_T69_NOP_S47_S9,


Template_st200_T69_NOP_S47_S24,


Template_st200_T69_NOP_S47_S35,


Template_st200_T70_NOP_S1,


Template_st200_T70_NOP_S24,


Template_st200_T71_NOP_S3,


Template_st200_T71_NOP_S17,


Template_st200_T72_NOP_S3,


Template_st200_T72_NOP_S24,


Template_st200_T73_NOP_S1,


Template_st200_T74_NOP_S3,


Template_st200_T75_NOP_S1,


Template_st200_T75_NOP_S47,


Template_st200_T76_NOP_S3,


Template_st200_T76_NOP_S41,


Template_st200_T77_NOP_S3,


Template_st200_T77_NOP_S47,


Template_st200_T79_NOP_S30,


Template_st200_T80_NOP_S35,


Template_st200_T81_NOP_S30,


Template_st200_T81_NOP_S47,


Template_st200_T82_NOP_S30,


Template_st200_T82_NOP_S41,


Template_st200_T83_NOP_S35,


Template_st200_T83_NOP_S47,


Template_st200_T86_NOP_S10,


Template_st200_T86_NOP_S23,


Template_st200_T87_NOP_S10,


Template_st200_T87_NOP_S23,


Template_st200_T87_NOP_S36,


Template_st200_T88_NOP_S10,


Template_st200_T88_NOP_S10_S18,


Template_st200_T88_NOP_S10_S36,


Template_st200_T88_NOP_S10_S46,


Template_st200_T88_NOP_S18,


Template_st200_T88_NOP_S18_S10,


Template_st200_T88_NOP_S18_S36,


Template_st200_T88_NOP_S18_S46,


Template_st200_T88_NOP_S36,


Template_st200_T88_NOP_S36_S10,


Template_st200_T88_NOP_S36_S18,


Template_st200_T88_NOP_S36_S46,


Template_st200_T88_NOP_S46,


Template_st200_T88_NOP_S46_S10,


Template_st200_T88_NOP_S46_S18,


Template_st200_T88_NOP_S46_S36,


Template_st200_T89_NOP_S10,


Template_st200_T89_NOP_S10_S23,


Template_st200_T89_NOP_S10_S36,


Template_st200_T89_NOP_S10_S42,


Template_st200_T89_NOP_S23,


Template_st200_T89_NOP_S23_S10,


Template_st200_T89_NOP_S23_S36,


Template_st200_T89_NOP_S23_S42,


Template_st200_T89_NOP_S36,


Template_st200_T89_NOP_S36_S10,


Template_st200_T89_NOP_S36_S23,


Template_st200_T89_NOP_S36_S42,


Template_st200_T89_NOP_S42,


Template_st200_T89_NOP_S42_S10,


Template_st200_T89_NOP_S42_S23,


Template_st200_T89_NOP_S42_S36,


Template_st200_T90_NOP_S10,


Template_st200_T90_NOP_S18,


Template_st200_T91_NOP_S10,


Template_st200_T91_NOP_S23,


Template_st200_T92_NOP_S10,


Template_st200_T93_NOP_S10,


Template_st200_T93_NOP_S42,


Template_st200_T94_NOP_S10,


Template_st200_T94_NOP_S46,


Template_st200_T95_NOP_S3,


Template_st200_T95_NOP_S3_S24,


Template_st200_T95_NOP_S3_S35,


Template_st200_T95_NOP_S3_S45,


Template_st200_T95_NOP_S24,


Template_st200_T95_NOP_S24_S3,


Template_st200_T95_NOP_S24_S35,


Template_st200_T95_NOP_S24_S45,


Template_st200_T95_NOP_S35,


Template_st200_T95_NOP_S35_S3,


Template_st200_T95_NOP_S35_S24,


Template_st200_T95_NOP_S35_S45,


Template_st200_T95_NOP_S45,


Template_st200_T95_NOP_S45_S3,


Template_st200_T95_NOP_S45_S24,


Template_st200_T95_NOP_S45_S35,


Template_st200_T96_NOP_S11,


Template_st200_T96_NOP_S11_S24,


Template_st200_T96_NOP_S11_S30,


Template_st200_T96_NOP_S11_S45,


Template_st200_T96_NOP_S24,


Template_st200_T96_NOP_S24_S11,


Template_st200_T96_NOP_S24_S30,


Template_st200_T96_NOP_S24_S45,


Template_st200_T96_NOP_S30,


Template_st200_T96_NOP_S30_S11,


Template_st200_T96_NOP_S30_S24,


Template_st200_T96_NOP_S30_S45,


Template_st200_T96_NOP_S45,


Template_st200_T96_NOP_S45_S11,


Template_st200_T96_NOP_S45_S24,


Template_st200_T96_NOP_S45_S30,


Template_st200_T97_NOP_S3,


Template_st200_T97_NOP_S45,


Template_st200_T98_NOP_S11,


Template_st200_T98_NOP_S45,


Template_st200_T99_NOP_S30,


Template_st200_T99_NOP_S45,


Template_st200_T100_NOP_S35,


Template_st200_T100_NOP_S45,



#undef Template


#define Template_SYLLABLES_COUNT_MAX 4



#define Template_INCREMENT_MAX 16


  Template__
#undef Template
} Template;
typedef uint16_t short_Template;

/*
 * Bundle --	Enumeration.
 */
typedef enum Bundle {
#define Bundle(NAME,ALIGNMENT,CONTENTS,INVERSE,TEMPLATE) Bundle_ ##NAME,


/*
  st200/Bundle.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Bundle_st200_EVEN_ANY_MEM_0_8,
Bundle_st200_ANY_EVEN_MEM_4_8,
Bundle_st200_FIRST_EVEN_MEM_4_8,
Bundle_st200_FIRST_MEM_EVEN_0_16,
Bundle_st200_EVEN_ANY_MEM_ANY_0_8,
Bundle_st200_ANY_EVEN_ANY_MEM_4_8,
Bundle_st200_EVEN_ODD_MEM_ANY_0_8,
Bundle_st200_ODD_EVEN_ANY_MEM_4_8,
Bundle_st200_FIRST_EVEN_ANY_MEM_4_8,
Bundle_st200_FIRST_MEM_EVEN_ANY_0_16,
Bundle_st200_FIRST_EVEN_ODD_MEM_4_8,
Bundle_st200_FIRST_MEM_EVEN_ODD_0_16,
Bundle_st200_MEMX_EVEN_0_16,
Bundle_st200_EVEN_MEMX_4_16,
Bundle_st200_EVEN_MEMX_8_16,
Bundle_st200_MEMX_EVEN_12_16,
Bundle_st200_MEMX_EVEN_ANY_0_16,
Bundle_st200_ANY_EVEN_MEMX_4_16,
Bundle_st200_EVEN_MEMX_ANY_8_16,
Bundle_st200_MEMX_ANY_EVEN_12_16,
Bundle_st200_MEMX_EVEN_ODD_0_16,
Bundle_st200_ODD_EVEN_MEMX_4_16,
Bundle_st200_EVEN_MEMX_ODD_8_16,
Bundle_st200_MEMX_ODD_EVEN_12_16,
Bundle_st200_ANYX_EVEN_MEM_0_16,
Bundle_st200_MEM_EVEN_ANYX_4_16,
Bundle_st200_EVEN_ANYX_MEM_8_16,
Bundle_st200_MEM_ANYX_EVEN_12_16,
Bundle_st200_ANY_0_4,
Bundle_st200_FIRST_0_4,
Bundle_st200_MEM_0_4,
Bundle_st200_ALONE_0_4,
Bundle_st200_ANY_ANY_0_4,
Bundle_st200_FIRST_ANY_0_4,
Bundle_st200_ANY_MEM_0_4,
Bundle_st200_FIRST_MEM_0_4,
Bundle_st200_ANY_ANY_ANY_0_4,
Bundle_st200_FIRST_ANY_ANY_0_4,
Bundle_st200_MEM_ANY_ANY_0_4,
Bundle_st200_FIRST_MEM_ANY_0_4,
Bundle_st200_ANY_ANY_ANY_ANY_0_4,
Bundle_st200_FIRST_ANY_ANY_ANY_0_4,
Bundle_st200_ANY_ANY_ANY_MEM_0_4,
Bundle_st200_FIRST_ANY_ANY_MEM_0_4,
Bundle_st200_EVEN_0_8,
Bundle_st200_EVEN_4_8,
Bundle_st200_ANY_ODD_0_8,
Bundle_st200_ODD_ANY_4_8,
Bundle_st200_FIRST_ODD_0_8,
Bundle_st200_FIRST_ODD_4_8,
Bundle_st200_EVEN_ODD_0_8,
Bundle_st200_ODD_EVEN_4_8,
Bundle_st200_MEM_ODD_0_8,
Bundle_st200_ODD_MEM_4_8,
Bundle_st200_EVEN_ANY_0_8,
Bundle_st200_ANY_EVEN_4_8,
Bundle_st200_EVEN_ANY_ANY_0_8,
Bundle_st200_ANY_EVEN_ANY_4_8,
Bundle_st200_EVEN_ODD_ANY_0_8,
Bundle_st200_ODD_EVEN_ANY_4_8,
Bundle_st200_FIRST_ANY_EVEN_0_8,
Bundle_st200_FIRST_EVEN_ANY_4_8,
Bundle_st200_FIRST_ODD_EVEN_0_8,
Bundle_st200_FIRST_EVEN_ODD_4_8,
Bundle_st200_EVEN_ANY_EVEN_0_8,
Bundle_st200_ANY_EVEN_EVEN_4_8,
Bundle_st200_EVEN_ODD_EVEN_0_8,
Bundle_st200_ODD_EVEN_EVEN_4_8,
Bundle_st200_EVEN_ODD_MEM_0_8,
Bundle_st200_ODD_EVEN_MEM_4_8,
Bundle_st200_ANY_ODD_ANY_0_8,
Bundle_st200_ODD_ANY_ANY_4_8,
Bundle_st200_FIRST_ODD_ANY_0_8,
Bundle_st200_FIRST_ANY_ODD_4_8,
Bundle_st200_ANY_ODD_MEM_0_8,
Bundle_st200_ODD_ANY_MEM_4_8,
Bundle_st200_FIRST_ODD_MEM_0_8,
Bundle_st200_FIRST_MEM_ODD_4_8,
Bundle_st200_ANY_ODD_ANY_ANY_0_8,
Bundle_st200_ODD_ANY_ANY_ANY_4_8,
Bundle_st200_EVEN_ODD_ANY_ANY_0_8,
Bundle_st200_ODD_EVEN_ANY_ANY_4_8,
Bundle_st200_ANY_ODD_ANY_ODD_0_8,
Bundle_st200_ODD_ANY_ODD_ANY_4_8,
Bundle_st200_ANY_ODD_EVEN_ODD_0_8,
Bundle_st200_ODD_EVEN_ODD_ANY_4_8,
Bundle_st200_FIRST_ODD_ANY_ANY_0_8,
Bundle_st200_FIRST_ANY_ODD_ANY_4_8,
Bundle_st200_FIRST_ODD_EVEN_ANY_0_8,
Bundle_st200_FIRST_EVEN_ODD_ANY_4_8,
Bundle_st200_FIRST_ODD_ANY_ODD_0_8,
Bundle_st200_FIRST_ODD_EVEN_ODD_0_8,
Bundle_st200_EVEN_ODD_EVEN_ANY_0_8,
Bundle_st200_ANY_EVEN_ODD_EVEN_4_8,
Bundle_st200_EVEN_ODD_EVEN_ODD_0_8,
Bundle_st200_ODD_EVEN_ODD_EVEN_4_8,
Bundle_st200_ANY_ODD_ANY_MEM_0_8,
Bundle_st200_ODD_ANY_MEM_ANY_4_8,
Bundle_st200_ANY_ODD_MEM_ODD_0_8,
Bundle_st200_ODD_MEM_ODD_ANY_4_8,
Bundle_st200_EVEN_ODD_MEM_ODD_0_8,
Bundle_st200_ODD_EVEN_ODD_MEM_4_8,
Bundle_st200_EVEN_ANY_ANY_ANY_0_8,
Bundle_st200_ANY_EVEN_ANY_ANY_4_8,
Bundle_st200_FIRST_ANY_EVEN_ANY_0_8,
Bundle_st200_FIRST_EVEN_ANY_ANY_4_8,
Bundle_st200_EVEN_ANY_EVEN_ANY_0_8,
Bundle_st200_ANY_EVEN_ANY_EVEN_4_8,
Bundle_st200_FIRST_ODD_ANY_MEM_0_8,
Bundle_st200_FIRST_MEM_ODD_ANY_4_8,
Bundle_st200_FIRST_ODD_MEM_ODD_0_8,
Bundle_st200_ANYX_ANY_ANY_0_8,
Bundle_st200_ANYX_ANY_ANY_4_8,
Bundle_st200_ANYX_ANY_ODD_0_8,
Bundle_st200_ANYX_ODD_ANY_4_8,
Bundle_st200_FIRST_ANYX_ANY_0_8,
Bundle_st200_FIRST_ANYX_ANY_4_8,
Bundle_st200_FIRST_ANYX_ODD_0_8,
Bundle_st200_ANYX_EVEN_ANY_0_8,
Bundle_st200_ANYX_ANY_EVEN_4_8,
Bundle_st200_ANYX_EVEN_ODD_0_8,
Bundle_st200_ANYX_ODD_EVEN_4_8,
Bundle_st200_ANYX_ANY_MEM_0_8,
Bundle_st200_ANYX_MEM_ANY_4_8,
Bundle_st200_ANYX_MEM_ODD_0_8,
Bundle_st200_ANYX_ODD_MEM_4_8,
Bundle_st200_MEMX_ANY_ANY_0_8,
Bundle_st200_MEMX_ANY_ANY_4_8,
Bundle_st200_MEMX_ANY_ODD_0_8,
Bundle_st200_MEMX_ODD_ANY_4_8,
Bundle_st200_FIRST_MEMX_ANY_0_8,
Bundle_st200_FIRST_MEMX_ANY_4_8,
Bundle_st200_FIRST_MEMX_ODD_0_8,
Bundle_st200_FIRST_ANYX_MEM_0_8,
Bundle_st200_FIRST_ANYX_MEM_4_8,
Bundle_st200_ANYX_ANY_0_8,
Bundle_st200_ANYX_ANY_4_8,
Bundle_st200_FIRST_ANYX_0_8,
Bundle_st200_FIRST_ANYX_4_8,
Bundle_st200_ANYX_EVEN_0_8,
Bundle_st200_ANYX_EVEN_4_8,
Bundle_st200_ANYX_MEM_0_8,
Bundle_st200_ANYX_MEM_4_8,
Bundle_st200_MEMX_ANY_0_8,
Bundle_st200_MEMX_ANY_4_8,
Bundle_st200_FIRST_MEMX_0_8,
Bundle_st200_FIRST_MEMX_4_8,
Bundle_st200_ANYX_0_8,
Bundle_st200_ANYX_4_8,
Bundle_st200_MEMX_0_8,
Bundle_st200_MEMX_4_8,
Bundle_st200_ANYX_ANYX_0_8,
Bundle_st200_ANYX_ANYX_4_8,
Bundle_st200_ANYX_MEMX_0_8,
Bundle_st200_ANYX_MEMX_4_8,
Bundle_st200_EVEN_MEM_0_8,
Bundle_st200_EVEN_MEM_4_8,
Bundle_st200_FIRST_EVEN_MEMX_4_16,
Bundle_st200_FIRST_MEMX_EVEN_12_16,
Bundle_st200_ODD_0_8,
Bundle_st200_ODD_4_8,
Bundle_st200_FIRST_EVEN_0_8,
Bundle_st200_FIRST_EVEN_4_8,
Bundle_st200_ANY_ODD_ODD_0_8,
Bundle_st200_ODD_ANY_ODD_4_8,
Bundle_st200_EVEN_ODD_ODD_0_8,
Bundle_st200_ODD_EVEN_ODD_4_8,
Bundle_st200_ODD_MEM_ODD_0_8,
Bundle_st200_ODD_MEM_ODD_4_8,
Bundle_st200_FIRST_EVEN_ANY_EVEN_4_8,
Bundle_st200_FIRST_EVEN_ODD_EVEN_4_8,
Bundle_st200_FIRST_ANYX_EVEN_4_8,
Bundle_st200_ANYX_ODD_0_8,
Bundle_st200_ANYX_ODD_4_8,
Bundle_st200_MEMX_ODD_0_8,
Bundle_st200_MEMX_ODD_4_8,
Bundle_st200_0_4,
Bundle_st200_EVEN_EVEN_0_8,
Bundle_st200_EVEN_EVEN_4_8,
Bundle_st200_ODD_ODD_0_8,
Bundle_st200_ODD_ODD_4_8,
Bundle_st200_FIRST_ODD_ODD_0_8,
Bundle_st200_FIRST_EVEN_EVEN_4_8,

#undef Bundle


#define Bundle_ISSUE_MAX 4



#define BundleMatch(HASH,CANONIC,BUNDLES) 
#undef BundleMatch


#define BundleMatch_HASH_MAX 2431



#define BundleMatch_COUNT_MAX 4


  Bundle__
#undef Bundle
} Bundle;
typedef uint16_t short_Bundle;

/*
 * Resource --	Enumeration.
 */
typedef enum Resource {
#define Resource(NAME,AVAILABILITY) Resource_ ##NAME,


/*
  st200/Resource.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Resource_st200_ISSUE,

Resource_st200_MEM,

Resource_st200_CTL,

Resource_st200_ODD,

Resource_st200_EVEN,

Resource_st200_LANE0,


#undef Resource

  Resource__
#undef Resource
} Resource;
typedef uint8_t short_Resource;

/*
 * Reservation --	Enumeration.
 */
typedef enum Reservation {
#define Reservation(NAME,TABLE) Reservation_ ##NAME,


/*
  st200/Reservation.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Reservation_st220_ALL,
Reservation_st220_ALU,
Reservation_st220_ALUX,
Reservation_st220_CTL,
Reservation_st220_ODD,
Reservation_st220_ODDX,
Reservation_st220_MEM,
Reservation_st220_MEMX,
Reservation_st220_PSW,
Reservation_st220_EVEN,
Reservation_st231_ALL,
Reservation_st231_ALU,
Reservation_st231_ALUX,
Reservation_st231_CTL,
Reservation_st231_ODD,
Reservation_st231_ODDX,
Reservation_st231_MEM,
Reservation_st231_MEMX,
Reservation_st231_PSW,
Reservation_st231_EVEN,
Reservation_st240_ALL,
Reservation_st240_ALU,
Reservation_st240_ALUX,
Reservation_st240_CTL,
Reservation_st240_ODD,
Reservation_st240_ODDX,
Reservation_st240_MEM,
Reservation_st240_MEMX,
Reservation_st240_PSW,
Reservation_st240_EVEN,

#undef Reservation


#define ReservationColumn(COLUMNINDEX,REQUIREMENTS) 
#undef ReservationColumn


#define Reservation_COLUMNS_COUNT_MAX 1


  Reservation__
#undef Reservation
} Reservation;
typedef uint8_t short_Reservation;

/*
 * Scheduling --	Enumeration.
 */
typedef enum Scheduling {
#define Scheduling(NAME,PROCESSOR,BUNDLING,RESERVATION) Scheduling_ ##NAME,


/*
  st200/Scheduling.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Scheduling_st220_ALL,
Scheduling_st220_ALU,
Scheduling_st220_ALUX,
Scheduling_st220_CTL,
Scheduling_st220_ODD,
Scheduling_st220_ODDX,
Scheduling_st220_MEM,
Scheduling_st220_MEMX,
Scheduling_st220_PSW,
Scheduling_st220_EVEN,
Scheduling_st231_ALL,
Scheduling_st231_ALU,
Scheduling_st231_ALUX,
Scheduling_st231_CTL,
Scheduling_st231_ODD,
Scheduling_st231_ODDX,
Scheduling_st231_MEM,
Scheduling_st231_MEMX,
Scheduling_st231_PSW,
Scheduling_st231_EVEN,
Scheduling_st240_ALL,
Scheduling_st240_ALU,
Scheduling_st240_ALUX,
Scheduling_st240_CTL,
Scheduling_st240_ODD,
Scheduling_st240_ODDX,
Scheduling_st240_MEM,
Scheduling_st240_MEMX,
Scheduling_st240_PSW,
Scheduling_st240_EVEN,

#undef Scheduling

  Scheduling__
#undef Scheduling
} Scheduling;
typedef uint8_t short_Scheduling;

/*
 * Processor --	Enumeration.
 */
typedef enum Processor {
#define Processor(NAME,MINTAKEN,INTERLOCKS,AVAILABILITY) Processor_ ##NAME,


/*
  st200/Processor.enum --
  Automatically generated from the Machine Description System (MDS).
*/



Processor_st220_cpu,

Processor_st231_cpu,

Processor_st240_cpu,


#undef Processor

  Processor__
#undef Processor
} Processor;
typedef uint8_t short_Processor;

/*
 * Convention --	Enumeration.
 */
typedef enum Convention {
#define Convention(NAME,RESERVED,ARGUMENT,RESULT,STRUCT,CALLER,CALLEE,PROGRAM,RETURN,STACK,STATIC,FRAME,GLOBAL,LOCAL,WIRED,ZERO,ONE,ALIGNTEXT,ALIGNDATA,ALIGNHEAP,ALIGNSTACK,NATIVEINT,NATIVEUINT,NATIVEFLOAT,NATIVEPTR) Convention_ ##NAME,





/*
  st200/Convention.enum --
  Automatically generated from the Machine Description System (MDS).
*/







Convention_st200_embedded,
Convention_st200_PIC,
#undef Convention

  Convention__
#undef Convention
} Convention;
typedef uint8_t short_Convention;

//






/*
 * Decode_Encoding function prototypes.
 */

#define Encoding(NAME,PROCESSOR,WORDTYPE,WORDCOUNT) extern Instance Decode_Encoding_ ##NAME(const void *buffer);



/*
  st200/Encoding.enum --
  Automatically generated from the Machine Description System (MDS).
*/



extern Instance Decode_Encoding_st220_ANY(const void *buffer);
extern Instance Decode_Encoding_st220_ANYX(const void *buffer);
extern Instance Decode_Encoding_st231_ANY(const void *buffer);
extern Instance Decode_Encoding_st231_ANYX(const void *buffer);
extern Instance Decode_Encoding_st240_ANY(const void *buffer);
extern Instance Decode_Encoding_st240_ANYX(const void *buffer);

#undef Encoding







//


#define Platform_h_INCLUDED 

/*
 * !!!!	Platform.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Platform_NAME_ --	NAME array for the Platform enumeration.
 */
extern const char *Platform_NAME_[];

#define Platform_NAME_(this) (Platform_NAME_[this])




/*
 * Platform_charWidth --	This Platform charWidth.
 */
extern const int8_t
Platform_CharWidth[];
static inline int
Platform_charWidth(Platform this)
{
  ;
  return Platform_CharWidth[this];
}

/*
 * Platform_addrWidth --	This Platform addrWidth.
 */
extern const int8_t
Platform_AddrWidth[];
static inline int
Platform_addrWidth(Platform this)
{
  ;
  return Platform_AddrWidth[this];
}

//
typedef enum {
  PlatformEndian_Little,
  PlatformEndian_Big,
  PlatformEndian__
} PlatformEndian;
typedef uint8_t short_PlatformEndian;

/*
 * Platform_endian --	Endian of this Platform.
 */
extern const short_PlatformEndian
Platform_Endian[];
static inline PlatformEndian
Platform_endian(Platform this)
{
  ;
  return (PlatformEndian)Platform_Endian[this];
}





#define Resource_h_INCLUDED 

/*
 * !!!!	Resource.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Pack a vector of Resource__ units in a word.
 */
union ResourceVector_ {
  uint8_t UNITS[Resource__];
  uint64_t PACKED;
};
typedef union ResourceVector_ ResourceVector_, *ResourceVector;
typedef const union ResourceVector_ *const_ResourceVector;
typedef union ResourceVector_ *restrict restrict_ResourceVector;
#define ResourceVector_UNITS(this) ((this)->UNITS)
#define ResourceVector_PACKED(this) ((this)->PACKED)
#define ResourceVector__PACKED(this) (&(this)->PACKED)

/*
 * ResourceVector_clear --	Clear this ResourceVector.
 */




static inline void
ResourceVector_clear(ResourceVector this) {
  *(&(this)->PACKED) = 0;
}


/*
 * ResourceVector_accumulate --	Accumulate =that= ResourceVector to =this= ResourceVector.
 */




static inline void
ResourceVector_accumulate(ResourceVector this, const_ResourceVector that)
{
  *(&(this)->PACKED) += ((that)->PACKED);
}


/*
 * ResourceVector_mayIncrease --	True if =this= + =increase= <= =limit=.
 */






static inline bool
ResourceVector_mayIncrease(const_ResourceVector this,
                           const_ResourceVector increase,
                           const_ResourceVector limit)
{
  uint64_t mask = 0x8080808080808080ULL;
  uint64_t x = ((limit)->PACKED);
  uint64_t y = ((this)->PACKED) + ((increase)->PACKED);
  x |= mask; // Set high bit of each unit.
  x -= y; // Carry does not propagate across units.
  x &= mask; // Grab high bits after substract.
  return x != mask; // High bit change means this + increase > limit.
}


/*
 * ResourceVector_maxMerge --	Max-merge =that= ResourceVector into =this= ResourceVector.
 *
 * Return:	true if the merge changed =this= else false.
 */




static inline bool
ResourceVector_maxMerge(ResourceVector this, const_ResourceVector that)
{
  uint64_t mask = 0x8080808080808080ULL;
  uint64_t x = ((that)->PACKED);
  uint64_t y = ((this)->PACKED);
  uint64_t z = x, t = 0;
  z |= mask; // Set high bit of each unit.
  z -= y; // Carry does not propagate across units.
  z ^= mask; // z = (that - this).
  t = mask & z; // Grab the sign bits of (that - this).
  t = (t << 1) - (t >> 7); // All ones if (that < this) else all zeros.
  z &= ~t; // z = MAX(that - this, 0).
  y += z; // y = MAX(that, this).
  *(&(this)->PACKED) = y;
  return z != 0;
}


/*
 * Resource_NAME_ --	NAME array for the Resource enumeration.
 */
extern const char *Resource_NAME_[];

#define Resource_NAME_(this) (Resource_NAME_[this])
#define Resource_NAME(this) (Resource_NAME_[this] + sizeof(MDS_TARGET))





/*
 * Resource_availability --	This Resource availability units for a Processor.
 */
int
Resource_availability(Resource this, Processor processor);





#define Processor_h_INCLUDED 

/*
 * !!!!	Processor.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Processor_NAME_ --	NAME array for the Processor enumeration.
 */
extern const char *Processor_NAME_[];

#define Processor_NAME_(this) (Processor_NAME_[this])




/*
 * Processor_minTaken --	This Processor minTaken.
 */
extern /*const*/ int8_t
Processor_MinTaken[];
static inline int
Processor_minTaken(Processor this)
{
  ;
  return Processor_MinTaken[this];
}

/*
 * Processor_maxTakenCost --	This processor maximum branch taken cost.
 */
int
Processor_maxTakenCost(Processor this);

/*
 * Processor_interlocks --	Whether this Processor interlocks registers.
 */
extern const bool
Processor_Interlocks[];
bool
Processor_interlocks(Processor this);

/*
 * Processor_availability --	This Processor availability of Resource(s).
 */
extern /*const*/ ResourceVector_
Processor_Availability[];
static inline const_ResourceVector
Processor_availability(Processor this)
{
  ;
  return Processor_Availability + this;
}





#define Encoding_h_INCLUDED 

/*
 * !!!!	Encoding.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Encoding_NAME_ --	NAME array for the Encoding enumeration.
 */
extern const char *Encoding_NAME_[];

#define Encoding_NAME_(this) (Encoding_NAME_[this])




/*
 * Encoding_processor --	This Encoding Processor.
 */
extern const short_Processor
Encoding_Processor[];
static inline Processor
Encoding_processor(Encoding this)
{
  ;
  return (Processor)Encoding_Processor[this];
}

/*
 * Encoding_wordCount --	This Encoding word count.
 */
extern const uint8_t
Encoding_WordCount[];
static inline uint8_t
Encoding_wordCount(Encoding this)
{
  ;
  return Encoding_WordCount[this];
}

/*
 * Encoding_wordSize --	This Encoding word size.
 */
extern const uint8_t
Encoding_WordSize[];
static inline uint8_t
Encoding_wordSize(Encoding this)
{
  ;
  return Encoding_WordSize[this];
}

/*
 * Encoding_decode --	This Encoding decode function.
 */

typedef Instance (*EncodingDecode)(const void *buffer);
extern const EncodingDecode
Encoding_Decode[];
static inline EncodingDecode
Encoding_decode(Encoding this)
{
  ;
  return Encoding_Decode[this];
}






#define NativeType_h_INCLUDED 

/*
 * !!!!	NativeType.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * NativeType_NAME_ --	NAME array for the NativeType enumeration.
 */
extern const char *NativeType_NAME_[];

#define NativeType_NAME_(this) (NativeType_NAME_[this])




/*
 * NativeType_format --	This NativeType bit syntax.
 */
const char *
NativeType_format(NativeType this);

/*
 * NativeType_width --	This NativeType bit width.
 */
extern const uint8_t
NativeType_Width[];
static inline unsigned
NativeType_width(NativeType this)
{
  ;
  return NativeType_Width[this];
}

/*
 * NativeType_signed --	This NativeType is signed.
 */
extern const bool
NativeType_Signed[];
static inline bool
NativeType_signed(NativeType this)
{
  ;
  return NativeType_Signed[this];
}

/*
 * NativeType_sizeOf --	This NativeType size in bytes when stored to memory.
 */
extern const uint8_t
NativeType_SizeOf[];
static inline unsigned
NativeType_sizeOf(NativeType this)
{
  ;
  return NativeType_SizeOf[this];
}

/*
 * NativeType_align --	This NativeType Alignment Base
 */
extern const uint8_t
NativeType_Align[];
static inline unsigned
NativeType_align(NativeType this)
{
  ;
  return NativeType_Align[this];
}

/*
 * NativeType_slice --	This NativeType slice width in bits.
 */
extern const uint8_t
NativeType_Slice[];
static inline unsigned
NativeType_slice(NativeType this)
{
  ;
  return NativeType_Slice[this];
}





#define Storage_h_INCLUDED 

/*
 * !!!!	Storage.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * StorageCell_NAME_ --	NAME array for the StorageCell enumeration.
 */
extern const char *StorageCell_NAME_[];

#define StorageCell_NAME_(this) (StorageCell_NAME_[this])
#define StorageCell_NAME(this) (StorageCell_NAME_[this] + sizeof(MDS_TARGET))
#define Register_h_INCLUDED 

/*
 * !!!!	Register.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Register_NAME_ --	NAME array for the Register enumeration.
 */
extern const char *Register_NAME_[];

#define Register_NAME_(this) (Register_NAME_[this])
#define Register_NAME(this) (Register_NAME_[this] + sizeof(MDS_TARGET))





/*
 * Register_names --	The names of this Register.
 */
extern const char *
Register_Names[][1 +1];
static inline const char **
Register_names(Register this)
{
  ;
  return Register_Names[this];
}

/*
 * Register_regFile --	The RegFile of this Register.
 */
extern const short_RegFile
Register_RegFile[];
static inline enum RegFile
Register_regFile(Register this)
{
  ;
  return (RegFile)Register_RegFile[this];
}

/*
 * Register_isWired --	True if this Register is wired.
 */
extern bool
Register_Wired[];
static inline bool
Register_isWired(Register this)
{
  ;
  return Register_Wired[this];
}

/*
 * RegisterStorageCells --	Sequence of StorageCell(s).
 */
struct RegisterStorageCells_ {
  int8_t COUNT;
  short_StorageCell ITEMS[2];
};
typedef struct RegisterStorageCells_ RegisterStorageCells_, *RegisterStorageCells;
typedef const struct RegisterStorageCells_ *const_RegisterStorageCells;
typedef struct RegisterStorageCells_ * restrict_RegisterStorageCells;

#define RegisterStorageCells_COUNT(this) ((this)->COUNT)
#define RegisterStorageCells__COUNT(this) (&(this)->COUNT)
#define RegisterStorageCells_ITEMS(this) ((this)->ITEMS)
#define RegisterStorageCells__ITEMS(this) (&(this)->ITEMS)


/*
 * RegisterStorageCells_count --	Count of StorageCell(s) in this RegisterStorageCells.
 */
static inline int
RegisterStorageCells_count(const_RegisterStorageCells this)
{
  return ((this)->COUNT);
}

/*
 * RegisterStorageCells_items --	StorageCell(s) in this RegisterStorageCells.
 */
static inline const short_StorageCell *
RegisterStorageCells_items(const_RegisterStorageCells this)
{
  return ((this)->ITEMS);
}

/*
 * RegisterStorageCells_access --	Access a StorageCell in this RegisterStorageCells.
 */
static inline StorageCell
RegisterStorageCells_access(const_RegisterStorageCells this, int index)
{
  Except_CHECK(index >=0 && index < ((this)->COUNT));
  return (StorageCell)((this)->ITEMS)[index];
}

/*
 * RegisterStorageCells_FOREACH_StorageCell --	Iterate this RegisterStorageCells.
 */
#define RegisterStorageCells_FOREACH_StorageCell(this,cell) { const short_StorageCell *RegisterStorageCells_ITEMS = RegisterStorageCells_items(this); int RegisterStorageCells_COUNT = RegisterStorageCells_count(this); int RegisterStorageCells_INDEX = 0; for (; RegisterStorageCells_INDEX < RegisterStorageCells_COUNT; RegisterStorageCells_INDEX++) { StorageCell cell = RegisterStorageCells_ITEMS[RegisterStorageCells_INDEX];






#define RegisterStorageCells_ENDEACH_StorageCell } }



/*
 * Register_storageCells --	This Register RegisterStorageCells.
 */
extern RegisterStorageCells_
Register_StorageCells[];
static inline const_RegisterStorageCells
Register_storageCells(Register this)
{
  ;
  return Register_StorageCells + this;
}

/*
 * Register_minReadStage --	This Register minimum read stage for each Processor.
 */
extern const uint8_t
Register_MinReadStages[][Processor__];
static inline int
Register_minReadStage(Register this, Processor processor)
{
  ;
  ;
  return Register_MinReadStages[this][processor];
}

/*
 * RegisterList --	Non-mutable list of Register(s).
 */
struct RegisterList_ {
  //@args
  uint8_t COUNT;
  short_Register ITEMS[104];
};
typedef struct RegisterList_ RegisterList_, *RegisterList;
typedef const struct RegisterList_ *const_RegisterList;
typedef struct RegisterList_ * restrict_RegisterList;

extern RegisterList
RegisterList_Ctor(RegisterList this);

extern RegisterList
RegisterList_Copy(RegisterList this, const_RegisterList that);

extern void
RegisterList_Dtor(RegisterList this);

extern size_t
RegisterList_Size(void);

#define RegisterList_COUNT(this) ((this)->COUNT)
#define RegisterList__COUNT(this) (&(this)->COUNT)
#define RegisterList_ITEMS(this) ((this)->ITEMS)
#define RegisterList__ITEMS(this) (&(this)->ITEMS)
/*
 * RegisterList_count --	Count the Register(s) in this RegisterList.
 */
static inline int
RegisterList_count(const_RegisterList this)
{
  return ((this)->COUNT);
}

/*
 * RegisterList_first --	First item of the RegisterList.
 * Return:       The first Register.
 */
static inline Register
RegisterList_first(const_RegisterList this)
{
  ;
  return (Register)((this)->ITEMS)[0];
}

/*
 * RegisterList_access --	Access the RegisterList by index.
 * index:        The index.
 * Return:       Corresponding Register.
 */
static inline Register
RegisterList_access(const_RegisterList this, int32_t index)
{
  ;
  return (Register)((this)->ITEMS)[index];
}

/*
 * RegisterList_items --	For use by RegisterList_FOREACH_Register.
 */
static inline const short_Register *
RegisterList_items(const_RegisterList this)
{
  return ((this)->ITEMS);
}

/*
 * RegisterList_FOREACH_Register --	Iterate over this RegisterList Register(s).
 */
#define RegisterList_FOREACH_Register(this,registre) { const short_Register *RegisterList_ITEMS = RegisterList_items(this); int RegisterList_COUNT = RegisterList_count(this), RegisterList_INDEX = 0; for (; RegisterList_INDEX < RegisterList_COUNT; RegisterList_INDEX++) { Register registre = RegisterList_ITEMS[RegisterList_INDEX];




#define RegisterList_ENDEACH_Register } }



/*
 * RegisterList_contains --	True if this RegisterList contains the given Register.
 */
bool
RegisterList_contains(const_RegisterList this, Register member);

/*
 * Register_isLifetime --	Test if this Register Lifetime should be minimized.
 */
bool
Register_isLifetime(Register this, Convention convention);

//

/*
  st200/Register.enum --
  Automatically generated from the Machine Description System (MDS).
*/

#define Register(NAME,NAMES,REGFILE,WIRED,STORAGECELLS,MINREADSTAGES) 
#undef Register
typedef uint32_t RegisterSetWord;

/*
 * RegisterSet --	Set of architectural registers.
 *
 * See the CCL/RegisterSet.xcc code to add RegisterSet methods.
 */
struct RegisterSet_ {
  //@args
  RegisterSetWord WORDS[(((Register)(104)/((sizeof(uint32_t)*8))) + 1)];
    //@ctor	int i;
    //@ctor	for (i = 0; i < RegisterSet_WORDCOUNT; i++) {
    //@ctor	  RegisterSet_WORDS(this)[i] = 0;
    //@ctor	}
    //@copy	*(this) = *(that);
};
typedef struct RegisterSet_ RegisterSet_, *RegisterSet;
typedef const struct RegisterSet_ *const_RegisterSet;
typedef struct RegisterSet_ * restrict_RegisterSet;

extern RegisterSet
RegisterSet_Ctor(RegisterSet this);

extern RegisterSet
RegisterSet_Copy(RegisterSet this, const_RegisterSet that);

extern void
RegisterSet_Dtor(RegisterSet this);

extern size_t
RegisterSet_Size(void);

#define RegisterSet_WORDS(this) ((this)->WORDS)
#define RegisterSet__WORDS(this) (&(this)->WORDS)
/*
 * RegisterSet_words --	Return the RegisterSet word array.
 */
static inline const RegisterSetWord *
RegisterSet_words(const_RegisterSet this)
{
  return ((this)->WORDS);
}

/*
 * RegisterSet_isEmpty --	True iff this RegisterSet is empty.
 */
bool
RegisterSet_isEmpty(const_RegisterSet this);

/*
 * RegisterSet_count --	Count members contained in the RegisterSet.
 * Return:	The count of members in this RegisterSet.
 */
int
RegisterSet_count(const_RegisterSet this);

/*
 * RegisterSet_first --	First Register in this RegisterSet.
 */
Register
RegisterSet_first(const_RegisterSet this);

/*
 * RegisterSet_empty --	Empty this RegisterSet.
 */
void
RegisterSet_empty(RegisterSet this);

/*
 * RegisterSet_choose --	Choose and remove a member of the RegisterSet.
 *
 * Return:	Valid Register or Register__ if this RegisterSet is empty.
 */
Register
RegisterSet_choose(RegisterSet this);

/*
 * RegisterSet_chooseFromLast --	Choose and remove a member of the RegisterSet
 *                               starting from the last_reg, e.g., if rn was
 *                               last used, rn+1 will be return if it is avaiable.
 *
 * Return:	Valid Register or Register__ if this RegisterSet is empty.
 */
Register
RegisterSet_chooseFromLast(RegisterSet set, Register last_reg);

/*
 * RegisterSet_contains --	Test a member for containment.
 * Return:	True if this RegisterSet contains member.
 */
bool
RegisterSet_contains(const_RegisterSet this, Register member);

/*
 * RegisterSet_insert --	Insert a member in this RegisterSet.
 * Return:	False iff member was already contained in this RegisterSet.
 */
bool
RegisterSet_insert(RegisterSet this, Register member);

/*
 * RegisterSet_remove --	Remove a member from this RegisterSet.
 * Return:	False iff member was not contained in this RegisterSet.
 */
bool
RegisterSet_remove(RegisterSet this, Register member);

/*
 * RegisterSet_equals --	Test for RegisterSet equality.
 */
bool
RegisterSet_equals(const_RegisterSet this, const_RegisterSet that);

/*
 * RegisterSet_union --	Union of this RegisterSet with that RegisterSet.
 */
void
RegisterSet_union(RegisterSet this, const_RegisterSet that);

/*
 * RegisterSet_inter --	Intersect this RegisterSet with that RegisterSet.
 */
void
RegisterSet_inter(RegisterSet this, const_RegisterSet that);

/*
 * RegisterSet_diff --	Remove that RegisterSet members from this RegisterSet.
 */
void
RegisterSet_diff(RegisterSet this, const_RegisterSet that);

/*
 * RegisterSet_FOREACH_Register --	Iterate over this RegisterSet registers
 */
#define RegisterSet_FOREACH_Register(this,reg) { Register reg = (Register)0; const_RegisterSet RegisterSet_THIS = (this); int RegisterSet_COUNT = RegisterSet_WORDCOUNT, RegisterSet_I, RegisterSet_J; for (RegisterSet_I = 0; RegisterSet_I < RegisterSet_COUNT; RegisterSet_I++) { RegisterSetWord RegisterSet_WORD = RegisterSet_WORDS(RegisterSet_THIS)[RegisterSet_I]; for (RegisterSet_J = 0; RegisterSet_J < RegisterSet_WORDBITS; RegisterSet_J++, RegisterSet_WORD >>= 1, reg++) { if (RegisterSet_WORD & 1) {
#define RegisterSet_ENDEACH_Register } } if (RegisterSet_J != RegisterSet_WORDBITS) break; } }






/*
 * RegisterSet_pretty --	Pretty-print this RegisterSet.
 */
bool
RegisterSet_pretty(const_RegisterSet this, FILE *file);

/*
 * RegisterAction --	Action on a Register for scoreboarding and bundling.
 */
struct RegisterAction_ {
  short_Register REGISTER; // Implicit register if rank == 0.
  short_RegClass REGCLASS; // RegClass if not implicit register.
  int8_t XXXINDEX; // Index of argument or result.
  int8_t RANK; // Operand rank in Operands.
  int8_t STAGE; // Access stage in the pipeline.
};
typedef struct RegisterAction_ RegisterAction_, *RegisterAction;
typedef const struct RegisterAction_ *const_RegisterAction;
typedef struct RegisterAction_ * restrict_RegisterAction;

#define RegisterAction_REGISTER(this) ((this)->REGISTER)
#define RegisterAction__REGISTER(this) (&(this)->REGISTER)
#define RegisterAction_REGCLASS(this) ((this)->REGCLASS)
#define RegisterAction__REGCLASS(this) (&(this)->REGCLASS)
#define RegisterAction_XXXINDEX(this) ((this)->XXXINDEX)
#define RegisterAction__XXXINDEX(this) (&(this)->XXXINDEX)
#define RegisterAction_RANK(this) ((this)->RANK)
#define RegisterAction__RANK(this) (&(this)->RANK)
#define RegisterAction_STAGE(this) ((this)->STAGE)
#define RegisterAction__STAGE(this) (&(this)->STAGE)


/*
 * RegisterAction_register --	Register of this RegisterAction.
 */
static inline Register
RegisterAction_register(const_RegisterAction this)
{
  return (Register)((this)->REGISTER);
}

/*
 * RegisterAction_regClass --	RegClass of this RegisterAction.
 */
static inline RegClass
RegisterAction_regClass(const_RegisterAction this)
{
  return (RegClass)((this)->REGCLASS);
}

/*
 * RegisterAction_xxxIndex --	Index of argument or result OperatorParameter(s).
 */
static inline int
RegisterAction_xxxIndex(const_RegisterAction this)
{
  return (Register)((this)->XXXINDEX);
}

/*
 * RegisterAction_rank --	Rank of this RegisterAction in the Instance Operand list.
 *
 * Return:	0 if the RegisterAction has no corresponding Operand.
 */
static inline int
RegisterAction_rank(const_RegisterAction this)
{
  return ((this)->RANK);
}

/*
 * RegisterAction_stage --	The pipeline stage of this RegisterAction.
 */
static inline int
RegisterAction_stage(const_RegisterAction this)
{
  return ((this)->STAGE);
}

/*
 * RegisterAction_setStage --	Set the pipeline stage of this RegisterAction.
 */
static inline void
RegisterAction_setStage(RegisterAction this, int stage)
{
  *(&(this)->STAGE) = stage;
}

/*
 * RegisterActionArray --	Array of RegisterAction(s).
 */
struct RegisterActionArray_ {
  uint8_t READCOUNT; // Count of Read RegisterAction(s).
  uint8_t READSTART; // Start index of variant Read RegisterAction(s).
  uint8_t WRITECOUNT; // Count of Write RegisterAction(s).
  uint8_t WRITESTART; // Start index of variant Write RegisterAction(s).
  RegisterAction_ *ITEMS; // This RegisterActionArray items.
};
typedef struct RegisterActionArray_ RegisterActionArray_, *RegisterActionArray;
typedef const struct RegisterActionArray_ *const_RegisterActionArray;
typedef struct RegisterActionArray_ * restrict_RegisterActionArray;

#define RegisterActionArray_READCOUNT(this) ((this)->READCOUNT)
#define RegisterActionArray__READCOUNT(this) (&(this)->READCOUNT)
#define RegisterActionArray_READSTART(this) ((this)->READSTART)
#define RegisterActionArray__READSTART(this) (&(this)->READSTART)
#define RegisterActionArray_WRITECOUNT(this) ((this)->WRITECOUNT)
#define RegisterActionArray__WRITECOUNT(this) (&(this)->WRITECOUNT)
#define RegisterActionArray_WRITESTART(this) ((this)->WRITESTART)
#define RegisterActionArray__WRITESTART(this) (&(this)->WRITESTART)
#define RegisterActionArray_ITEMS(this) ((this)->ITEMS)
#define RegisterActionArray__ITEMS(this) (&(this)->ITEMS)


/*
 * RegisterActionArray_readCount --	Count of Read RegisterAction(s).
 */
static inline int
RegisterActionArray_readCount(const_RegisterActionArray this)
{
  return ((this)->READCOUNT);
}

/*
 * RegisterActionArray_readStart --	Start index of variant Read RegisterAction(s).
 */
static inline int
RegisterActionArray_readStart(const_RegisterActionArray this)
{
  return ((this)->READSTART);
}

/*
 * RegisterActionArray_writeCount --	Count of Write RegisterAction(s).
 */
static inline int
RegisterActionArray_writeCount(const_RegisterActionArray this)
{
  return ((this)->WRITECOUNT);
}

/*
 * RegisterActionArray_writeStart --	Start index of variant Write RegisterAction(s).
 */
static inline int
RegisterActionArray_writeStart(const_RegisterActionArray this)
{
  return ((this)->WRITESTART);
}

/*
 * RegisterActionArray_count --	Count of Read and Write RegisterAction(s).
 */
static inline int
RegisterActionArray_count(const_RegisterActionArray this)
{
  return ((this)->READCOUNT) + ((this)->WRITECOUNT);
}

/*
 * RegisterActionArray_readActions --	this RegisterActionArray read RegisterAction(s).
 */
static inline const RegisterAction_ *
RegisterActionArray_readActions(const_RegisterActionArray this)
{
  return ((this)->ITEMS) + 0;
}

/*
 * RegisterActionArray_writeActions --	this RegisterActionArray write RegisterAction(s).
 */
static inline const RegisterAction_ *
RegisterActionArray_writeActions(const_RegisterActionArray this)
{
  return ((this)->ITEMS) + ((this)->READCOUNT);
}

/*
 * RegisterActionArray_items --	For use by RegisterActionArray_FOREACH_RegisterAction.
 */
static inline const RegisterAction_ *
RegisterActionArray_items(const_RegisterActionArray this)
{
  return ((this)->ITEMS);
}

/*
 * RegisterActionArray_FOREACH_RegisterAction --	Iterate over this RegisterActionArray RegisterAction(s).
 */
#define RegisterActionArray_FOREACH_RegisterAction(this,action) { const RegisterAction_ *RegisterActionArray_ITEMS = RegisterActionArray_items(this); int RegisterActionArray_COUNT = RegisterActionArray_count(this); int RegisterActionArray_INDEX = 0; for (; RegisterActionArray_INDEX < RegisterActionArray_COUNT; RegisterActionArray_INDEX++) { const_RegisterAction action = RegisterActionArray_ITEMS + RegisterActionArray_INDEX;







#define RegisterActionArray_ENDEACH_RegisterAction } }



/*
 * RegisterActionArray_FORREAD_RegisterAction --	Iterate over this RegisterActionArray Read RegisterAction(s).
 */
#define RegisterActionArray_FORREAD_RegisterAction(this,action) { const RegisterAction_ *RegisterActionArray_ITEMS = RegisterActionArray_items(this); int RegisterActionArray_READCOUNT = RegisterActionArray_readCount(this); int RegisterActionArray_INDEX = 0; for (; RegisterActionArray_INDEX < RegisterActionArray_READCOUNT; RegisterActionArray_INDEX++) { const_RegisterAction action = RegisterActionArray_ITEMS + RegisterActionArray_INDEX;







#define RegisterActionArray_ENDREAD_RegisterAction } }



/*
 * RegisterActionArray_FORWRITE_RegisterAction --	Iterate over this RegisterActionArray Write RegisterAction(s).
 */
#define RegisterActionArray_FORWRITE_RegisterAction(this,action) { const RegisterAction_ *RegisterActionArray_ITEMS = RegisterActionArray_items(this); int RegisterActionArray_READCOUNT = RegisterActionArray_readCount(this); int RegisterActionArray_COUNT = RegisterActionArray_count(this); int RegisterActionArray_INDEX = RegisterActionArray_READCOUNT; for (; RegisterActionArray_INDEX < RegisterActionArray_COUNT; RegisterActionArray_INDEX++) { const_RegisterAction action = RegisterActionArray_ITEMS + RegisterActionArray_INDEX;
#define RegisterActionArray_ENDWRITE_RegisterAction } }







#define RegFile_h_INCLUDED 

/*
 * !!!!	RegFile.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * RegFile_NAME_ --	NAME array for the RegFile enumeration.
 */
extern const char *RegFile_NAME_[];

#define RegFile_NAME_(this) (RegFile_NAME_[this])
#define RegFile_NAME(this) (RegFile_NAME_[this] + sizeof(MDS_TARGET))





/*
 * RegFile_width --	This RegFile Width attribute.
 */
extern const uint8_t
RegFile_Width[];
static inline unsigned
RegFile_width(RegFile this)
{
  ;
  return RegFile_Width[this];
}

/*
 * RegFile_getNativeType --	Return the default NativeType for this RegFile.
 * If this regFile has no associated storage type, return NativeType__.
 */
extern const short_NativeType
RegFile_NativeType[][NativeType__+1];
static inline NativeType
RegFile_getNativeType(RegFile this)
{
  ;
  return (NativeType)RegFile_NativeType[this][0];
}

/*
 * RegFile_lowRegister --	This RegFile low Register.
 */
extern const short_Register
RegFile_LowReg[];
static inline enum Register
RegFile_lowRegister(RegFile this)
{
  ;
  return (Register)RegFile_LowReg[this];
}

/*
 * RegFile_highRegister --	This RegFile high Register.
 */
extern const short_Register
RegFile_HighReg[];
static inline enum Register
RegFile_highRegister(RegFile this)
{
  ;
  return (Register)RegFile_HighReg[this];
}

/*
 * RegFile_FOREACH_Register --	Iterate in this RegFile Registers
 */
#define RegFile_FOREACH_Register(this,reg) { Register RegFile_LOWREG = RegFile_lowRegister(this), reg; Register RegFile_HIGHREG = RegFile_highRegister(this); for (reg = RegFile_LOWREG; reg <= RegFile_HIGHREG; reg++) {



#define RegFile_ENDEACH_Register } }



/*
 * RegFile_registerSet --	A RegisterSet with the members of this RegFile.
 */
extern /*const*/ RegisterSet_
RegFile_RegisterSet[];
static inline const_RegisterSet
RegFile_registerSet(RegFile this)
{
  ;
  return RegFile_RegisterSet + this;
}





#define RegClass_h_INCLUDED 

/*
 * !!!!	RegClass.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * RegClass_NAME_ --	NAME array for the RegClass enumeration.
 */
extern const char *RegClass_NAME_[];

#define RegClass_NAME_(this) (RegClass_NAME_[this])




/*
 * RegClass_regFile --	The RegFile this RegClass belongs to.
 */
extern const short_RegFile
RegClass_RegFile[];
static inline RegFile
RegClass_regFile(RegClass this)
{
  ;
  return (RegFile)RegClass_RegFile[this];
}

/*
 * RegClass_registerList --	This RegClass Register(s) as a RegisterList.
 */
extern const RegisterList_
RegClass_RegisterList[];
static inline const_RegisterList
RegClass_registerList(RegClass this)
{
  ;
  return &RegClass_RegisterList[this];
}
#define RegClass_firstRegister(this) RegisterList_first(RegClass_registerList(this))
#define RegClass_lastRegister(this) RegisterList_last(RegClass_registerList(this))

/*
 * RegClass_registerSet --	This RegClass Register(s) as a RegisterSet.
 */
extern RegisterSet_
RegClass_RegisterSet[];
static inline const_RegisterSet
RegClass_registerSet(RegClass this)
{
  ;
  return &RegClass_RegisterSet[this];
}

/*
 * RegClass_minReadStage --	This RegClass minimum read stage for each Processor.
 */
extern const uint8_t
RegClass_MinReadStages[][Processor__];
static inline int
RegClass_minReadStage(RegClass this, Processor processor)
{
  ;
  ;
  return RegClass_MinReadStages[this][processor];
}





#define RegMask_h_INCLUDED 

/*
 * !!!!	RegMask.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * RegMask_NAME_ --	NAME array for the RegMask enumeration.
 */
extern const char *RegMask_NAME_[];

#define RegMask_NAME_(this) (RegMask_NAME_[this])
#define RegMask_NAME(this) (RegMask_NAME_[this] + sizeof(MDS_TARGET))





/*
 * RegMask_registerList --	This RegMask Register(s) as a RegisterList.
 */
extern const RegisterList_
RegMask_RegisterList[];
static inline const_RegisterList
RegMask_registerList(RegMask this)
{
  ;
  return &RegMask_RegisterList[this];
}

/*
 * RegMask_regFile --	The RegFile this RegMask belongs to.
 */
extern const short_RegFile
RegMask_RegFile[];
static inline RegFile
RegMask_regFile(RegMask this)
{
  ;
  return (RegFile)RegMask_RegFile[this];
}

/*
 * RegMask_registerSet --	This RegMask Register(s) as a RegisterSet.
 */
extern RegisterSet_
RegMask_RegisterSet[];
static inline const_RegisterSet
RegMask_registerSet(RegMask this)
{
  ;
  return &RegMask_RegisterSet[this];
}





#define Modifier_h_INCLUDED 

/*
 * !!!!	Modifier.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 * Stefan Freudenberger (Stefan.Freudenberger@st.com)
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * ModifierClass_NAME_ --	NAME array for the ModifierClass enumeration.
 */
extern const char *ModifierClass_NAME_[];

#define ModifierClass_NAME_(this) (ModifierClass_NAME_[this])




/*
 * Modifier_NAME_ --	NAME array for the Modifier enumeration.
 */
extern const char *Modifier_NAME_[];

#define Modifier_NAME_(this) (Modifier_NAME_[this])




/*
 * Modifier_names --	The names of this Modifier.
 */
extern const char *
Modifier_Names[][0 +1];
static inline const char **
Modifier_names(Modifier this)
{
  ;
  return Modifier_Names[this];
}

/*
 * Modifier_complement --	Complement the condition of this Modifier.
 */
Modifier
Modifier_complement(Operator this);

/*
 * !!!!	Modifier.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 * Stefan Freudenberger (Stefan.Freudenberger@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */





#define Relocation_h_INCLUDED 

/*
 * !!!!	Relocation.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Relocation_NAME_ --	NAME array for the Relocation enumeration.
 */
extern const char *Relocation_NAME_[];

#define Relocation_NAME_(this) (Relocation_NAME_[this])




/*
 * RelocationRelative --	Enumeration for the Relocation_relative values.
 */
typedef enum {
  RelocationRelative_,
  RelocationRelative_PC,
  RelocationRelative_GP,
} RelocationRelative;
typedef uint8_t short_RelocationRelative;
#define Relocation_isRelativePC(this) (Relocation_relative(this) == RelocationRelative_PC)
#define Relocation_isRelativeGP(this) (Relocation_relative(this) == RelocationRelative_GP)

/*
 * Relocation_relative --	This Relocation RelocationRelative.
 */
extern const short_RelocationRelative
Relocation_Relative[];
static inline RelocationRelative
Relocation_relative(Relocation this)
{
  ;
  return (RelocationRelative)Relocation_Relative[this];
}





#define Immediate_h_INCLUDED 

/*
 * !!!!	Immediate.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * ImmediateValue --	Type for the largest Immediate value.
 */
typedef int64_t ImmediateValue;

/*
 * ImmediateConstant --	Base class for decoded Immediate constants.
 */
struct ImmediateConstant_ {
  //@args	ImmediateValue value
  ImmediateValue VALUE; // Value of this ImmediateConstant once resolved.
    //@ctor	*ImmediateConstant__VALUE(this) = value;
};
typedef struct ImmediateConstant_ ImmediateConstant_, *ImmediateConstant;
typedef const struct ImmediateConstant_ *const_ImmediateConstant;
typedef struct ImmediateConstant_ * restrict_ImmediateConstant;

extern ImmediateConstant
ImmediateConstant_Ctor(ImmediateConstant this, ImmediateValue value);

extern ImmediateConstant
ImmediateConstant_Copy(ImmediateConstant this, const_ImmediateConstant that);

extern void
ImmediateConstant_Dtor(ImmediateConstant this);

extern size_t
ImmediateConstant_Size(ImmediateValue value);

#define ImmediateConstant_VALUE(this) ((this)->VALUE)
#define ImmediateConstant__VALUE(this) (&(this)->VALUE)
/*
 * Immediate_NAME_ --	NAME array for the Immediate enumeration.
 */
extern const char *Immediate_NAME_[];

#define Immediate_NAME_(this) (Immediate_NAME_[this])




/*
 * Immediate_minValue --	This Immediate MinValue attribute.
 */
extern const int64_t
Immediate_MinValue[];
static inline int64_t
Immediate_minValue(Immediate this)
{
  ;
  return Immediate_MinValue[this];
}

/*
 * Immediate_maxValue --	This Immediate MaxValue attribute.
 */
extern const int64_t
Immediate_MaxValue[];
static inline int64_t
Immediate_maxValue(Immediate this)
{
  ;
  return Immediate_MaxValue[this];
}

/*
 * ImmediateRelocations --	Sequence of Relocation(s).
 */
struct ImmediateRelocations_ {
  int8_t COUNT;
  short_Relocation ITEMS[4];
};
typedef struct ImmediateRelocations_ ImmediateRelocations_, *ImmediateRelocations;
typedef const struct ImmediateRelocations_ *const_ImmediateRelocations;
typedef struct ImmediateRelocations_ * restrict_ImmediateRelocations;

#define ImmediateRelocations_COUNT(this) ((this)->COUNT)
#define ImmediateRelocations__COUNT(this) (&(this)->COUNT)
#define ImmediateRelocations_ITEMS(this) ((this)->ITEMS)
#define ImmediateRelocations__ITEMS(this) (&(this)->ITEMS)


/*
 * ImmediateRelocations_count --	Count of Relocation(s) in this ImmediateRelocations.
 */
static inline int
ImmediateRelocations_count(const_ImmediateRelocations this)
{
  return ((this)->COUNT);
}

/*
 * ImmediateRelocations_items --	Relocation(s) in this ImmediateRelocations.
 */
static inline const short_Relocation *
ImmediateRelocations_items(const_ImmediateRelocations this)
{
  return ((this)->ITEMS);
}

/*
 * ImmediateRelocations_access --	Access a Relocation in this ImmediateRelocations.
 */
static inline Relocation
ImmediateRelocations_access(const_ImmediateRelocations this, int index)
{
  Except_CHECK(index >=0 && index < ((this)->COUNT));
  return (Relocation)((this)->ITEMS)[index];
}

/*
 * ImmediateRelocations_FOREACH_Relocation --	Iterate this ImmediateRelocations.
 */
#define ImmediateRelocations_FOREACH_Relocation(this,relocation) { const short_Relocation *ImmediateRelocations_ITEMS = ImmediateRelocations_items(this); int ImmediateRelocations_COUNT = ImmediateRelocations_count(this); int ImmediateRelocations_INDEX = 0; for (; ImmediateRelocations_INDEX < ImmediateRelocations_COUNT; ImmediateRelocations_INDEX++) { Relocation relocation = ImmediateRelocations_ITEMS[ImmediateRelocations_INDEX];






#define ImmediateRelocations_ENDEACH_Relocation } }



/*
 * Immediate_relocations --	This Immediate Relocations.
 */
extern const ImmediateRelocations_
Immediate_Relocations[];
static inline const_ImmediateRelocations
Immediate_relocations(Immediate this)
{
  ;
  return &Immediate_Relocations[this];
}

/*
 * Immediate_canEncode --	Check whether this Immediate can encode value.
 */
bool
Immediate_canEncode(Immediate this, int64_t value);





#define Operand_h_INCLUDED 

/*
 * !!!!	Operand.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

//
typedef PlatformUInt OperandEncoded;
typedef PlatformUInt OperandDecoded;

/*
 * Operand_NAME_ --	NAME array for the Operand enumeration.
 */
extern const char *Operand_NAME_[];

#define Operand_NAME_(this) (Operand_NAME_[this])




//
typedef enum {
  OperandType_Register,
  OperandType_RegClass,
  OperandType_Immediate,
  OperandType_Modifier,
  OperandType_RegMask,
  OperandType__,
} OperandType;
typedef uint8_t short_OperandType;
extern const char *
OperandType_NAME_[];
#define OperandType_NAME_(type) OperandType_NAME_[type]

//
#define OperandType_hasRegisters(type) ((unsigned)(type) <= OperandType_RegClass)

/*
 * Operand_type --	The OperandType of this Operand.
 */
extern const short_OperandType
Operand_Type[];
static inline OperandType
Operand_type(Operand this)
{
  ;
  return (OperandType)Operand_Type[this];
}

/*
 * Operand_enum --	The RegClass or Immediate or Modifier or Regmask of this Operand.
 */
extern const int8_t
Operand_Enum[];
static inline int
Operand_enum(Operand this)
{
  ;
  return Operand_Enum[this];
}

/*
 * Operand_modifier --	The Modifier of this Operand.
 */
static inline ModifierClass
Operand_modifier(Operand this)
{
  if (Operand_type(this) == OperandType_Modifier) {
    return (ModifierClass)Operand_Enum[this];
  }
  return ModifierClass__;
}

/*
 * Operand_immediate --	The Immediate of this Operand.
 */
static inline Immediate
Operand_immediate(Operand this)
{
  if (Operand_type(this) == OperandType_Immediate) {
    return (Immediate)Operand_Enum[this];
  }
  return Immediate__;
}

/*
 * Operand_regClass --	The RegClass of this Operand.
 */
static inline RegClass
Operand_regClass(Operand this)
{
  if (Operand_type(this) == OperandType_RegClass) {
    return (RegClass)Operand_Enum[this];
  }
  return RegClass__;
}

/*
 * Operand_regMask --	The RegMask of this Operand.
 */
static inline RegMask
Operand_regMask(Operand this)
{
  if (Operand_type(this) == OperandType_RegMask) {
    return (RegMask)Operand_Enum[this];
  }
  return RegMask__;
}

/*
 * Operand_encode --	This Operand encode function.
 */
typedef void (*OperandEncode)(OperandDecoded decoded, void *restrict opcodes);
extern const OperandEncode
Operand_Encode[];
static inline OperandEncode
Operand_encode(Operand this)
{
  ;
  return Operand_Encode[this];
}

/*
 * Operand_encodeImmediateValue --	Encode a ImmediateValue.
 */
static inline void
Operand_encodeImmediateValue(Operand this, ImmediateValue value, void *opcodes)
{
  (*Operand_encode(this))((OperandDecoded)(&value), opcodes);
}

/*
 * Operand_decode --	This Operand decode function.
 */
typedef void (*OperandDecode)(const void *restrict opcodes,
                              void *restrict result);
extern const OperandDecode
Operand_Decode[];
static inline OperandDecode
Operand_decode(Operand this)
{
  ;
  return Operand_Decode[this];
}

/*
  Decode_Operand function prototypes.
 */
#define Operand(NAME,METHOD,WORDTYPE,ENCODE,DECODE) void Decode_Operand_ ##NAME(const void *opcodes, void *restrict result);



/*
  st200/Operand.enum --
  Automatically generated from the Machine Description System (MDS).
*/



void Decode_Operand_st200_bcond(const void *opcodes, void *restrict result);


void Decode_Operand_st200_bdest(const void *opcodes, void *restrict result);


void Decode_Operand_st200_bdest2(const void *opcodes, void *restrict result);


void Decode_Operand_st200_btarg(const void *opcodes, void *restrict result);


void Decode_Operand_st200_dest(const void *opcodes, void *restrict result);


void Decode_Operand_st200_nldest(const void *opcodes, void *restrict result);


void Decode_Operand_st200_ibdest(const void *opcodes, void *restrict result);


void Decode_Operand_st200_idest(const void *opcodes, void *restrict result);


void Decode_Operand_st200_nlidest(const void *opcodes, void *restrict result);


void Decode_Operand_st200_isrc2(const void *opcodes, void *restrict result);


void Decode_Operand_st200_imm(const void *opcodes, void *restrict result);


void Decode_Operand_st200_scond(const void *opcodes, void *restrict result);


void Decode_Operand_st200_src1(const void *opcodes, void *restrict result);


void Decode_Operand_st200_src2(const void *opcodes, void *restrict result);


void Decode_Operand_st200_sbrknum(const void *opcodes, void *restrict result);


void Decode_Operand_st200_xsrc2(const void *opcodes, void *restrict result);


void Decode_Operand_st200_bsrc1(const void *opcodes, void *restrict result);


void Decode_Operand_st200_bsrc2(const void *opcodes, void *restrict result);


void Decode_Operand_st200_idestp(const void *opcodes, void *restrict result);


void Decode_Operand_st200_pcond(const void *opcodes, void *restrict result);


void Decode_Operand_st200_src2p(const void *opcodes, void *restrict result);


void Decode_Operand_st200_brknum(const void *opcodes, void *restrict result);



#undef Operand


#define Operands(NAME,OPERANDS,RELOCATABLE,ENCODE,DECODE) 
#undef Operands
/*
 * Operand_decodeImmediateValue --	Macro to decode an ImmediateConstant.
 */
#define Operand_decodeImmediateValue(operand,opcodes,value_ptr) (*Operand_decode(operand))(opcodes, (void *restrict)(value_ptr))


/*
 * OperandList --	Sequence of Operand(s).
 */
struct OperandList_ {
  uint8_t COUNT;
  short_Operand ITEMS[5];
};
typedef struct OperandList_ OperandList_, *OperandList;
typedef const struct OperandList_ *const_OperandList;
typedef struct OperandList_ * restrict_OperandList;

#define OperandList_COUNT(this) ((this)->COUNT)
#define OperandList__COUNT(this) (&(this)->COUNT)
#define OperandList_ITEMS(this) ((this)->ITEMS)
#define OperandList__ITEMS(this) (&(this)->ITEMS)


/*
 * OperandList_count --	Count the Operand(s) in this OperandList.
 */
static inline int
OperandList_count(const_OperandList this)
{
  return ((this)->COUNT);
}

/*
 * OperandList_access --	Access the Operand at the given index.
 */
static inline Operand
OperandList_access(const_OperandList this, int index)
{
  ;
  return (Operand)((this)->ITEMS)[index];
}

/*
 * OperandList_items --	For use by OperandList_FOREACH_Operand.
 */
static inline const short_Operand *
OperandList_items(const_OperandList this)
{
  return ((this)->ITEMS);
}

/*
 * OperandList_FOREACH_Operand --	Iterate over this OperandList Operand(s).
 */
#define OperandList_FOREACH_Operand(this,operand) { const short_Operand *OperandList_ITEMS = OperandList_items(this); int OperandList_COUNT = OperandList_count(this), OperandList_INDEX = 0; for (; OperandList_INDEX < OperandList_COUNT; OperandList_INDEX++) { Operand operand = OperandList_ITEMS[OperandList_INDEX];




#define OperandList_ENDEACH_Operand } }



/*
 * Operands_NAME_ --	NAME array for the Operands enumeration.
 */
extern const char *Operands_NAME_[];

#define Operands_NAME_(this) (Operands_NAME_[this])
#define Operands_NAME(this) (Operands_NAME_[this] + sizeof(MDS_TARGET))





/*
 * Operands_operandList --	This Operands OperandList.
 */
extern const OperandList_
Operands_OperandList[];
static inline const_OperandList
Operands_operandList(Operands this)
{
  ;
  return &Operands_OperandList[this];
}

/*
 * Operands_FOREACH_Operand --	Iterate over this Operands Operand(s).
 */
#define Operands_FOREACH_Operand(this,operand) OperandList_FOREACH_Operand(Operands_operandList(this), operand) { int Operands_INDEX = OperandList_INDEX;


#define Operands_ENDEACH_Operand } OperandList_ENDEACH_Operand;


/*
 * Operands_count --	This Operands count of Operand(s).
 */
static inline int
Operands_count(Operands this)
{
  ;
  return OperandList_count(&Operands_OperandList[this]);
}

/*
 * Operands_access --	Access the Operand at the given index.
 */
static inline Operand
Operands_access(Operands this, int index)
{
  ;
  return OperandList_access(&Operands_OperandList[this], index);
}

/*
 * OperandsBuffer --	Buffer used to encode or decode Operands.
 */
struct OperandsBuffer_ {
  //@args
    //@ctor	int i;
  OperandDecoded DECODED[5];

  ImmediateConstant_ CONSTANTS[1];
    //@ctor	for (i = 0; i < Operands_IMMEDIATE_COUNT_MAX; i++) {
    //@ctor	  ImmediateConstant_Ctor(&OperandsBuffer_CONSTANTS(this)[i], 0);
    //@ctor	}







};
typedef struct OperandsBuffer_ OperandsBuffer_, *OperandsBuffer;
typedef const struct OperandsBuffer_ *const_OperandsBuffer;
typedef struct OperandsBuffer_ * restrict_OperandsBuffer;

extern OperandsBuffer
OperandsBuffer_Ctor(OperandsBuffer this);

extern OperandsBuffer
OperandsBuffer_Copy(OperandsBuffer this, const_OperandsBuffer that);

extern void
OperandsBuffer_Dtor(OperandsBuffer this);

extern size_t
OperandsBuffer_Size(void);

#define OperandsBuffer_DECODED(this) ((this)->DECODED)
#define OperandsBuffer__DECODED(this) (&(this)->DECODED)
#define OperandsBuffer_CONSTANTS(this) ((this)->CONSTANTS)
#define OperandsBuffer__CONSTANTS(this) (&(this)->CONSTANTS)
#define OperandsBuffer_REGISTERSETS(this) ((this)->REGISTERSETS)
#define OperandsBuffer__REGISTERSETS(this) (&(this)->REGISTERSETS)
/*
 * Operands_encode --	This Operands encode function.
 */
typedef void
(*OperandsEncode)(const_OperandsBuffer buffer, void *restrict opcodes);
extern const OperandsEncode
Operands_Encode[];
static inline OperandsEncode
Operands_encode(Operands this)
{
  ;
  return Operands_Encode[this];
}

/*
 * OperandsEncode function prototypes.
 */
#define Operands(NAME,OPERANDS,RELOCATABLE,ENCODE,DECODE) void OperandsEncode_ ##NAME(const_OperandsBuffer buffer, void *restrict opcodes);



/*
  st200/Operand.enum --
  Automatically generated from the Machine Description System (MDS).
*/

#define Operand(NAME,METHOD,WORDTYPE,ENCODE,DECODE) 
#undef Operand




void OperandsEncode_st200_dest_src1_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_src1_isrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_src1_xsrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_dest_bdest_src1_src2_scond(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_bdest_src1_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_ibdest_src1_isrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_ibdest_src1_xsrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_bcond_btarg(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_btarg(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_imm(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_nlidest_isrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_nlidest_xsrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_isrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_xsrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_nldest_src1_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_nlidest_src1_isrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_nlidest_src1_xsrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_isrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_xsrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_sbrknum(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_dest_scond_src1_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_scond_src1_isrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_scond_src1_xsrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_isrc2_src1_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_xsrc2_src1_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_dest_src2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_scond(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_bdest_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_dest_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_isrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_xsrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_bdest2_src1_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_dest_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_nldest_scond_src1_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_bdest2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_dest_scond(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_bdest2_bsrc1_bsrc2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_nldest_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_brknum(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_nlidest_pcond_isrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_nlidest_pcond_xsrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idestp_isrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idestp_xsrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idestp_pcond_isrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idestp_pcond_xsrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_pcond_isrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_idest_pcond_xsrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_bdest2_bsrc1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_pcond_isrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_pcond_xsrc2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_isrc2_src1_pcond_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_xsrc2_src1_pcond_src2(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_isrc2_src1_src2p(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_xsrc2_src1_src2p(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_isrc2_src1_pcond_src2p(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_xsrc2_src1_pcond_src2p(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_bdest2_src2_src1(const_OperandsBuffer buffer, void *restrict opcodes);


void OperandsEncode_st200_dest_scond_src2_src1(const_OperandsBuffer buffer, void *restrict opcodes);



#undef Operands
void
OperandsEncode__(const_OperandsBuffer buffer, void *restrict opcodes);

/*
 * Operands_relocatableRank --	Rank of relocatable Immediate in this Operands.
 */
extern int8_t
Operands_RelocatableRank[];
static inline int
Operands_relocatableRank(Operands this)
{
  ;
  return Operands_RelocatableRank[this];
}

/*
 * Operands_relocatableOperand --	Relocatable Operand in this Operands.
 */
extern const short_Operand
Operands_RelocatableOperand[];
static inline Operand
Operands_relocatableOperand(Operands this)
{
  ;
  return (Operand)Operands_RelocatableOperand[this];
}

/*
 * Operands_relocatableImmediate --	Relocatable Immediate in this Operands.
 */
extern const short_Immediate
Operands_RelocatableImmediate[];
static inline Immediate
Operands_relocatableImmediate(Operands this)
{
  ;
  return (Immediate)Operands_RelocatableImmediate[this];
}

//






/*
  Operands_decode -- This Operands decode function.
 */

typedef void
(*OperandsDecode)(const void *opcodes, OperandsBuffer buffer);
extern OperandsDecode
Operands_Decode[];
static inline OperandsDecode
Operands_decode(Operands this)
{
  ;
  return Operands_Decode[this];
}


/*
 * Decode_Operands function prototypes.
 */

#define Operands(NAME,OPERANDS,RELOCATABLE,ENCODE,DECODE) void Decode_Operands_ ##NAME(const void *opcodes, OperandsBuffer buffer);



/*
  st200/Operand.enum --
  Automatically generated from the Machine Description System (MDS).
*/

#define Operand(NAME,METHOD,WORDTYPE,ENCODE,DECODE) 
#undef Operand




void Decode_Operands_st200_dest_src1_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_src1_isrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_src1_xsrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_dest_bdest_src1_src2_scond(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_bdest_src1_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_ibdest_src1_isrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_ibdest_src1_xsrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_bcond_btarg(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_btarg(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_imm(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_nlidest_isrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_nlidest_xsrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_isrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_xsrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_nldest_src1_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_nlidest_src1_isrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_nlidest_src1_xsrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_isrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_xsrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_sbrknum(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_dest_scond_src1_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_scond_src1_isrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_scond_src1_xsrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_isrc2_src1_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_xsrc2_src1_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_dest_src2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_scond(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_bdest_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_dest_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_isrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_xsrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_bdest2_src1_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_dest_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_nldest_scond_src1_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_bdest2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_dest_scond(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_bdest2_bsrc1_bsrc2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_nldest_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_brknum(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_nlidest_pcond_isrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_nlidest_pcond_xsrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idestp_isrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idestp_xsrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idestp_pcond_isrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idestp_pcond_xsrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_pcond_isrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_idest_pcond_xsrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_bdest2_bsrc1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_pcond_isrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_pcond_xsrc2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_isrc2_src1_pcond_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_xsrc2_src1_pcond_src2(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_isrc2_src1_src2p(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_xsrc2_src1_src2p(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_isrc2_src1_pcond_src2p(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_xsrc2_src1_pcond_src2p(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_bdest2_src2_src1(const void *opcodes, OperandsBuffer buffer);


void Decode_Operands_st200_dest_scond_src2_src1(const void *opcodes, OperandsBuffer buffer);



#undef Operands
//

void
Decode_Operands__(const void *opcodes, OperandsBuffer buffer);






#define Format_h_INCLUDED 

/*
 * !!!!	Format.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Format_NAME_ --	NAME array for the Format enumeration.
 */
extern const char *Format_NAME_[];

#define Format_NAME_(this) (Format_NAME_[this])
#define Syntax_h_INCLUDED 

/*
 * !!!!	Syntax.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Syntax_NAME_ --	NAME array for the Syntax enumeration.
 */
extern const char *Syntax_NAME_[];

#define Syntax_NAME_(this) (Syntax_NAME_[this])
#define Instance_h_INCLUDED 

/*
 * !!!!	Instance.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Instance_NAME_ --	NAME array for the Instance enumeration.
 */
extern const char *Instance_NAME_[];

#define Instance_NAME_(this) (Instance_NAME_[this])




/*
 * Instance_scheduling --	This Instance Scheduling class.
 */
extern const short_Scheduling
Instance_Scheduling[];
static inline Scheduling
Instance_scheduling(Instance this)
{
  ;
  return (Scheduling)Instance_Scheduling[this];
}

/*
 * Instance_encoding --	This Instance Encoding.
 */
extern const short_Encoding
Instance_Encoding[];
static inline Encoding
Instance_encoding(Instance this)
{
  ;
  return (Encoding)Instance_Encoding[this];
}

//
struct InstanceOpcodes_ {
  //@args	
  uint32_t _[2];
    //@ctor	InstanceOpcodes__(this)[0] = 0;
    //@ctor	InstanceOpcodes__(this)[1] = 0;
};
typedef struct InstanceOpcodes_ InstanceOpcodes_, *InstanceOpcodes;
typedef const struct InstanceOpcodes_ *const_InstanceOpcodes;
typedef struct InstanceOpcodes_ * restrict_InstanceOpcodes;

extern InstanceOpcodes
InstanceOpcodes_Ctor(InstanceOpcodes this);

extern InstanceOpcodes
InstanceOpcodes_Copy(InstanceOpcodes this, const_InstanceOpcodes that);

extern void
InstanceOpcodes_Dtor(InstanceOpcodes this);

extern size_t
InstanceOpcodes_Size(void);

#define InstanceOpcodes__(this) ((this)->_)
#define InstanceOpcodes___(this) (&(this)->_)
/*
 * Instance_opcodes --	This Instance opcodes.
 */
extern const InstanceOpcodes_
Instance_Opcodes[];
static inline const_InstanceOpcodes
Instance_opcodes(Instance this)
{
  ;
  return &Instance_Opcodes[this];
}

/*
 * Instance_operands --	This Instance Operands.
 */
extern const short_Operands
Instance_Operands[];
static inline Operands
Instance_operands(Instance this)
{
  ;
  return (Operands)Instance_Operands[this];
}

/*
 * Instance_increment --	This Instance PC Increment.
 */
/*
 * Instance_mnemonic --	This Instance mnemonic string.
 */
const char *
Instance_mnemonic(Instance this);

/*
 * Instance_syntax --	This Instance syntax string.
 */
const char *
Instance_syntax(Instance this);

/*
 * Instance_unitCost --	This Instance unit cost estimate.
 */
int
Instance_unitCost(Instance this);

/*
 * Instance_actionArray --	This Instance RegisterActionArray.
 */
extern /*const*/ RegisterActionArray_
Instance_ActionArray[];
static inline const_RegisterActionArray
Instance_actionArray(Instance this)
{
  ;
  return Instance_ActionArray + this;
}

/*
 * Instance_operator --	This Instance Operator class.
 */
extern const short_Operator
Instance_Operator[];
static inline Operator
Instance_operator(Instance this)
{
  ;
  return (Operator)Instance_Operator[this];
}

/*
 * Instance_makeRegisterActionItems --	Make this Instance RegisterActionArray_ITEMS.
 *
 * Only used to replace the MDS-initialized ITEMS with a writeable copy for patching.
 */
RegisterAction_ *
Instance_makeRegisterActionItems(Instance this, Memory memory);

//
typedef enum {
  InstanceAttribute_Control,
  InstanceAttribute_MemoryRead,
  InstanceAttribute_MemoryWrite,
  InstanceAttribute_FixRegisterRAW,
} InstanceAttribute;
typedef uint8_t InstanceAttributes;

//
#define Instance_isControl(this) (Instance_attributes(this)>>InstanceAttribute_Control & 1)

#define Instance_isMemoryRead(this) (Instance_attributes(this)>>InstanceAttribute_MemoryRead & 1)

#define Instance_isMemoryWrite(this) (Instance_attributes(this)>>InstanceAttribute_MemoryWrite & 1)

#define Instance_isFixRegisterRAW(this) (Instance_attributes(this)>>InstanceAttribute_FixRegisterRAW & 1)


/*
 * Instance_attributes --	Access this Instance attributes.
 */
extern /*const*/ InstanceAttributes
Instance_Attributes[];
static inline InstanceAttributes
Instance_attributes(Instance this)
{
  ;
  return Instance_Attributes[this];
}

//
static inline unsigned
Instance_fixupRAW(Instance this, Instance that)
{
  unsigned attributes;
  Except_CHECK((unsigned)this <= Instance__);
  attributes = Instance_Attributes[this] | Instance_Attributes[that];
  return attributes & (1<<InstanceAttribute_FixRegisterRAW);
}

//
int
Instance_latencyRAW(Instance this, Instance that, StorageCell cell);





#define Operator_h_INCLUDED 

/*
 * !!!!	Operator.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

//
typedef enum {
  OperatorParameterKind_Read,
  OperatorParameterKind_ReadCond,
  OperatorParameterKind_ReadPred,
  OperatorParameterKind_ReadBase,
  OperatorParameterKind_ReadOffset,
  OperatorParameterKind_ReadStored,
  OperatorParameterKind_ReadTarget,
  OperatorParameterKind_ReadLeft,
  OperatorParameterKind_ReadRight,
  OperatorParameterKind_ReadList,
  OperatorParameterKind_ReadMultiStored,
  OperatorParameterKind_Write,
  OperatorParameterKind_WriteList,
  OperatorParameterKind_WriteMulti,
  OperatorParameterKind__
} OperatorParameterKind;
typedef uint8_t short_OperatorParameterKind;

//
struct OperatorParameter_ {
  short_OperatorParameterKind KIND;
  //@access isRead	(OperatorParameter_kind(this) < OperatorParameterKind_Write)
  //@access isWrite	(OperatorParameter_kind(this) >= OperatorParameterKind_Write)
  int8_t RANK; // The rank of this OperatorParameter in the Operand list.
  short_OperandType TYPE; // The OperandType of this OperatorParameter.
  int8_t ENUM; // Modifier|Immediate|RegMask|RegClass|Register enum.
  int8_t SAME;
  int8_t COUNT;
  int8_t CONFLICTS[0];
};
typedef struct OperatorParameter_ OperatorParameter_, *OperatorParameter;
typedef const struct OperatorParameter_ *const_OperatorParameter;
typedef struct OperatorParameter_ * restrict_OperatorParameter;

#define OperatorParameter_KIND(this) ((this)->KIND)
#define OperatorParameter__KIND(this) (&(this)->KIND)
#define OperatorParameter_RANK(this) ((this)->RANK)
#define OperatorParameter__RANK(this) (&(this)->RANK)
#define OperatorParameter_TYPE(this) ((this)->TYPE)
#define OperatorParameter__TYPE(this) (&(this)->TYPE)
#define OperatorParameter_ENUM(this) ((this)->ENUM)
#define OperatorParameter__ENUM(this) (&(this)->ENUM)
#define OperatorParameter_SAME(this) ((this)->SAME)
#define OperatorParameter__SAME(this) (&(this)->SAME)
#define OperatorParameter_COUNT(this) ((this)->COUNT)
#define OperatorParameter__COUNT(this) (&(this)->COUNT)
#define OperatorParameter_CONFLICTS(this) ((this)->CONFLICTS)
#define OperatorParameter__CONFLICTS(this) (&(this)->CONFLICTS)
#define OperatorParameter_isRead(this) ((OperatorParameter_kind(this) < OperatorParameterKind_Write))
#define OperatorParameter_isWrite(this) ((OperatorParameter_kind(this) >= OperatorParameterKind_Write))


/*
 * OperatorParameter_kind --	OperatorParameterKind of this OperatorParameter.
 */
static inline OperatorParameterKind
OperatorParameter_kind(const_OperatorParameter this)
{
  return (OperatorParameterKind)((this)->KIND);
}

/*
 * OperatorParameter_rank --	Rank of this OperatorParameter in the Instance Operand list.
 * Return:	0 if the OperatorParameter has no corresponding Operand.
 */
static inline int
OperatorParameter_rank(const_OperatorParameter this)
{
  return ((this)->RANK);
}

/*
 * OperatorParameter_type --	The OperandType of this OperatorParameter.
 */
static inline OperandType
OperatorParameter_type(const_OperatorParameter this)
{
  return (OperandType)((this)->TYPE);
}

/*
 * OperatorParameter_enum --	The Modifier/Immediate/RegClass/Regmask of this OperatorParameter.
 */
static inline int
OperatorParameter_enum(const_OperatorParameter this)
{
  return ((this)->ENUM);
}

/*
 * OperatorParameter_same --	The Index of the OperatorParameter that must get
 * the same encoding as this OperatorParameter;  -1 if none.  Used to identify
 * Instance Operands that are both read and written.
 */
static inline int
OperatorParameter_same(const_OperatorParameter this)
{
  return ((this)->SAME);
}

/*
 * OperatorParameter_FOREACH_ConflictIndex --	Iterate over this OperatorParameter
 * conflicting OperatorParameter indices .  These Parameters must get different
 * encodings (e.g., different Registers).  The indices are listed in increasing
 * order.
 * Continuing with =continue=, and exiting with =break= or =return= are allowed.
 */
#define OperatorParameter_FOREACH_ConflictIndex(this,index) { const int8_t* OperatorParameter_ITER = OperatorParameter_CONFLICTS(this); const int8_t* OperatorParameter_FENCE = OperatorParameter_ITER + OperatorParameter_COUNT(this); for (; OperatorParameter_ITER < OperatorParameter_FENCE; ++OperatorParameter_ITER) { const int index = *OperatorParameter_ITER;






#define OperatorParameter_ENDEACH_ConflictIndex } }



/*
 * OperatorParameterArray --	Array of OperatorParameter(s).
 */
struct OperatorParameterArray_ {
  int16_t WRITECOUNT;
  int16_t READCOUNT;
  const OperatorParameter_ *ITEMS;
};
typedef struct OperatorParameterArray_ OperatorParameterArray_, *OperatorParameterArray;
typedef const struct OperatorParameterArray_ *const_OperatorParameterArray;
typedef struct OperatorParameterArray_ * restrict_OperatorParameterArray;

#define OperatorParameterArray_WRITECOUNT(this) ((this)->WRITECOUNT)
#define OperatorParameterArray__WRITECOUNT(this) (&(this)->WRITECOUNT)
#define OperatorParameterArray_READCOUNT(this) ((this)->READCOUNT)
#define OperatorParameterArray__READCOUNT(this) (&(this)->READCOUNT)
#define OperatorParameterArray_ITEMS(this) ((this)->ITEMS)
#define OperatorParameterArray__ITEMS(this) (&(this)->ITEMS)


/*
 * OperatorParameterArray_readCount --	Argument count in this OperatorParameterArray.
 */
static inline int
OperatorParameterArray_readCount(const_OperatorParameterArray this)
{
  return ((this)->READCOUNT);
}

/*
 * OperatorParameterArray_writeCount --	Result count in this OperatorParameterArray.
 */
static inline int
OperatorParameterArray_writeCount(const_OperatorParameterArray this)
{
  return ((this)->WRITECOUNT);
}

/*
 * OperatorParameterArray_count --	OperatorParameter count in this OperatorParameterArray.
 */
static inline int
OperatorParameterArray_count(const_OperatorParameterArray this)
{
  return ((this)->READCOUNT) + ((this)->WRITECOUNT);
}

/*
 * OperatorParameterArray_items --	For use by OperatorParameterArray_FOREACH_OperatorParameter.
 */
static inline const OperatorParameter_ *
OperatorParameterArray_items(const_OperatorParameterArray this)
{
  return ((this)->ITEMS);
}

/*
 * OperatorParameterArray_readParameters --	Pointer to the argument OperatorParameter(s).
 */
static inline const OperatorParameter_ *
OperatorParameterArray_readParameters(const_OperatorParameterArray this)
{
  return ((this)->ITEMS) + ((this)->WRITECOUNT);
}

/*
 * OperatorParameterArray_writeParameters --	Pointer to the result OperatorParameter(s).
 */
static inline const OperatorParameter_ *
OperatorParameterArray_writeParameters(const_OperatorParameterArray this)
{
  return ((this)->ITEMS) + 0;
}

/*
 * OperatorParameterArray_FOREACH_OperatorParameter --	Iterate over this OperatorParameterArray OperatorParameter(s).
 */
#define OperatorParameterArray_FOREACH_OperatorParameter(this,parameter) { const OperatorParameter_ *OperatorParameterArray_ITEMS = OperatorParameterArray_items(this); int OperatorParameterArray_COUNT = OperatorParameterArray_count(this); int OperatorParameterArray_INDEX = 0; for (; OperatorParameterArray_INDEX < OperatorParameterArray_COUNT; OperatorParameterArray_INDEX++) { const_OperatorParameter parameter = OperatorParameterArray_ITEMS + OperatorParameterArray_INDEX;
#define OperatorParameterArray_ENDEACH_OperatorParameter } }



/*
 * Operator_NAME_ --	NAME array for the Operator enumeration.
 */
extern const char *Operator_NAME_[];

#define Operator_NAME_(this) (Operator_NAME_[this])




/*
 * Operator_name --	returns operator name
 */

const char *
Operator_name(Operator this);


//
typedef enum {
  OperatorAttribute_Pseudo,
  OperatorAttribute_ReadList,
  OperatorAttribute_WriteList,
  OperatorAttribute_Control,
  OperatorAttribute_MemoryRead,
  OperatorAttribute_MemoryWrite,
  OperatorAttribute_MemoryProbe,
  OperatorAttribute_Conditional,
  OperatorAttribute_Multi,
} OperatorAttribute;
typedef uint16_t OperatorAttributes;

/*
 * Operator_attributes --	Access this Operator attributes.
 */
extern const OperatorAttributes
Operator_Attributes[];
static inline OperatorAttributes
Operator_attributes(Operator this)
{
  ;
  return Operator_Attributes[this];
}

/*
 * Operator_instance --	This Operator Instance for a Processor.
 */
extern const short_Instance
Operator_Instances[][Processor__];
static inline Instance
Operator_instance(Operator this, Processor processor)
{
  ;
  ;
  return (Instance)Operator_Instances[this][processor];
}

/*
 * Operator_mnemonic --	This Operator Mnemonic attribute.
 */
const char *
Operator_mnemonic(Operator this);

/*
 * Operator_parameterArray --	This Operator OperatorParameterArray.
 */
extern const OperatorParameterArray_
Operator_ParameterArray[];
static inline const_OperatorParameterArray
Operator_parameterArray(Operator this)
{
  ;
  return Operator_ParameterArray + this;
}

/*
 * Operator_readCount --	This Operator count of argument OperatorParameter(s).
 */
static inline int
Operator_readCount(Operator this) {
  const_OperatorParameterArray parameterArray = Operator_parameterArray(this);
  return OperatorParameterArray_readCount(parameterArray);
}

/*
 * Operator_writeCount --	This Operator count of result OperatorParameter(s).
 */
static inline int
Operator_writeCount(Operator this) {
  const_OperatorParameterArray parameterArray = Operator_parameterArray(this);
  return OperatorParameterArray_writeCount(parameterArray);
}

/*
 * Operator_readParameter --	Access the read OperatorParameter at readIndex.
 */
static inline const_OperatorParameter
Operator_readParameter(Operator this, int readIndex)
{
  const_OperatorParameterArray parameterArray = Operator_parameterArray(this);
  ;

  return OperatorParameterArray_readParameters(parameterArray) + readIndex;
}

/*
 * Operator_writeParameter --	Access the write OperatorParameter at writeIndex.
 */
static inline const_OperatorParameter
Operator_writeParameter(Operator this, int writeIndex)
{
  const_OperatorParameterArray parameterArray = Operator_parameterArray(this);
  ;

  return OperatorParameterArray_writeParameters(parameterArray) + writeIndex;
}

/*
 * Operator_getReadOperandType --	The Operator read index where the OperandType is.
 */
int8_t
Operator_getReadOperandType(Operator this, OperandType type);

//
#define Operator_immediateIndex(this) Operator_getReadOperandType(this, OperandType_Immediate)


/*
 * Operator_getReadParameterKind --	The Operator read index where the OperatorParameterKind is.
 */
int8_t
Operator_getReadParameterKind(Operator this, OperatorParameterKind kind);

//
#define Operator_baseIndex(this) Operator_getReadParameterKind(this, OperatorParameterKind_ReadBase)


//
#define Operator_offsetIndex(this) Operator_getReadParameterKind(this, OperatorParameterKind_ReadOffset)


//
#define Operator_storedIndex(this) Operator_getReadParameterKind(this, OperatorParameterKind_ReadStored)


//
#define Operator_leftIndex(this) Operator_getReadParameterKind(this, OperatorParameterKind_ReadLeft)

#define Operator_rightIndex(this) Operator_getReadParameterKind(this, OperatorParameterKind_ReadRight)


/*
 * Operator_isFixRegisterRAW --	True if Register RAW latency needs a fix.
 */
bool
Operator_isFixRegisterRAW(Operator this);

/*
 * Operator_selectInstance --	Select a suitable instance for the processor.
 */
Instance
Operator_selectInstance(Operator this, Processor processor);

/*
 * Operator_require --	The register lifetime flow requirements.
 */
int
Operator_require(Operator this, RegFile regFile);

/*
 * Operator_baseAddressIndex --	The index of this Operator base address OperatorParameter(s).
 * Return:	The index starting at 0 of base address OperatorParameter among writes.
 */
int
Operator_baseAddressIndex(Operator this);

/*
 * Operator_memoryAccessSize --	Get the access size in bytes of a memory access.
 */
int
Operator_memoryAccessSize(Operator this);

/*
 * Operator_isXXX --	Test if this Operator is a XXX.
 */
#define Operator_isEntry(this) ((this) == Operator_ENTRY)
#define Operator_isLabel(this) ((this) == Operator_LABEL)
#define Operator_isFall(this) ((this) == Operator_FALL)
#define Operator_isLoop(this) ((this) == Operator_LOOP)
#define Operator_isPhi(this) ((this) == Operator_PHI)
#define Operator_isPsi(this) ((this) == Operator_PSI)
#define Operator_isSigma(this) ((this) == Operator_SIGMA)
#define Operator_isSsa(this) ((this) >= Operator_PHI && (this) <= Operator_SIGMA)
#define Operator_isKill(this) ((this) == Operator_KILL)
#define Operator_isPCopy(this) ((this) == Operator_PCOPY)
#define Operator_isPseudo(this) (Operator_attributes(this)>>OperatorAttribute_Pseudo & 1)

#define Operator_isReadList(this) (Operator_attributes(this)>>OperatorAttribute_ReadList & 1)

#define Operator_isWriteList(this) (Operator_attributes(this)>>OperatorAttribute_WriteList & 1)

#define Operator_isMulti(this) (Operator_attributes(this)>>OperatorAttribute_Multi & 1)

#define Operator_isControl(this) (Operator_attributes(this)>>OperatorAttribute_Control & 1)

#define Operator_isMemoryRead(this) (Operator_attributes(this)>>OperatorAttribute_MemoryRead & 1)

#define Operator_isMemoryWrite(this) (Operator_attributes(this)>>OperatorAttribute_MemoryWrite & 1)

#define Operator_isMemoryEffect(this) ( (Operator_attributes(this) & ((1<<OperatorAttribute_MemoryWrite))) || Operator_isMemoryBarrier(this) || Operator_isPrefetch(this) )




#define Operator_isMemory(this) ( ( Operator_attributes(this) & ((1<<OperatorAttribute_MemoryRead)|(1<<OperatorAttribute_MemoryWrite))) || Operator_isMemoryBarrier(this) || Operator_isPrefetch(this) )





#define Operator_isConditional(this) (Operator_attributes(this)>>OperatorAttribute_Conditional & 1)


/*
 * Operator_isCopy --	Test if this Operator is a COPY.
 *
 * In this case result 0 is the destination and argument 0 is the source.
 */
bool
Operator_isCopy(Operator this);

/*
 * Operator_isAdd --	Test if this Operator is an ADD.
 */
bool
Operator_isAdd(Operator this);

/*
 * Operator_isAdditive --	Test if this Operator is additive.
 *
 * An operator OP is additive if OP(a, b) = OP(a+c, b-c).
 */
bool
Operator_isAdditive(Operator this, int aIndex, int bIndex);

/*
 * Operator_isSubtractive --	Test if this Operator is subtractive.
 *
 * An operator OP is subtractive if OP(a, b) = OP(a+c, b+c).
 */
bool
Operator_isSubtractive(Operator this, int aIndex, int bIndex);

/*
 * Operator_isTranslative --	Test if this Operator is translative.
 *
 * An operator OP is translative if OP(a+c, b+c) = OP(a, b) + c.
 */
bool
Operator_isTranslative(Operator this, int aIndex, int bIndex);

/*
 * Operator_isAssociative --	Test if this Operator is associative.
 *
 * An operator OP is associative if OP(OP(a, b), c) = OP(a, OP(b, c)).
 */
bool
Operator_isAssociative(Operator this, int aIndex, int bIndex);

/*
 * Operator_isCommutative --	Test if this Operator is commutative.
 *
 * An operator OP is commutative if OP(a, b) = OP(b, a).
 */
bool
Operator_isCommutative(Operator this, int aIndex, int bIndex);

/*
 * Operator_isGoTo --	Test if this Operator is a GOTO operator.
 *
 * A GOTO operator branches to a PC-relative or an absolute address, and has one
 * or two targets.
 */
bool
Operator_isGoTo(Operator this);

/*
 * Operator_isJump --	Test if this Operator is a JUMP operator.
 *
 * A JUMP operator branches to an address contained in a register.
 */
bool
Operator_isJump(Operator this);

/*
 * Operator_isBranch --	Test if this Operator is a branch operator.
 *
 * A branch is a control-flow change that remains inside the function.
 */
bool
Operator_isBranch(Operator this);

/*
 * Operator_isCall --	Test if this Operator is a CALL operator.
 *
 * A CALL operator branches to a PC-relative or an absolute address.
 */
bool
Operator_isCall(Operator this);

/*
 * Operator_isLink --	Test if this Operator is a LINK operator.
 */
bool
Operator_isLink(Operator this);

/*
 * Operator_isRoutine --	Test if this Operator is a function call operator.
 */
bool
Operator_isRoutine(Operator this);

/*
 * Operator_isReturn --	Test if this Operator is a function return operator.
 */
bool
Operator_isReturn(Operator this);

/*
 * Operator_isGNUASM --	Test if this Operator is a GNU ASM.
 */
bool
Operator_isGNUASM(Operator this);

/*
 * Operator_isMemoryBarrier --	Test if this Operator is a memory barrier.
 */
bool
Operator_isMemoryBarrier(Operator this);

/*
 * Operator_isStalling --	Test if this Operator is stalling the processor.
 *
 * Should be true for Operators that almost always stall the processor, and not true for
 * Operators that occasionally stall like memory accesses with cache misses.
 */
bool
Operator_isStalling(Operator this);

/*
 * Operator_isPrefetch --	Test if this Operator prefetches memory.
 */
bool
Operator_isPrefetch(Operator this);

/*
 * Operator_isSafeLoad --	Test if this Operator is a safe memory load.
 */
bool
Operator_isSafeLoad(Operator this);

/*
 * Operator_speculate --	Speculate this Operator.
 */
Operator
Operator_speculate(Operator this, Processor processor);

/*
 * Operator_predicatePositive --	The predicated on true variant of this Operator.
 */
Operator
Operator_predicatePositive(Operator this, Processor processor);

/*
 * Operator_predicateNegative --	The predicated on false variant of this Operator.
 */
Operator
Operator_predicateNegative(Operator this, Processor processor);

/*
 * Operator_predicateIndex --	This Operator predicate argument index.
 */
int
Operator_predicateIndex(Operator this);

/*
 * Operator_predicatePolarity --	This Operator predicate polarity.
 */
int
Operator_predicatePolarity(Operator this);

/*
 * Operator_unpredicate --	The predicated on false variant of this Operator.
 */
Operator
Operator_unpredicate(Operator this, Processor processor);

/*
 * Operator_complementWrite --	Complement this operator on the designated write parameter.
 */
Operator
Operator_complementWrite(Operator this, Processor processor, int32_t writeIndex);

/*
 * Operator_complementRead --	Complement this operator on the designated read parameter.
 */
Operator
Operator_complementRead(Operator this, Processor processor, int32_t readIndex);

/*
 * Operator_isHWLSkip --	Test if this Operator is a Hardware Loop Skip.
 */
static inline bool
Operator_isHWLSkip(Operator this)
{
  return false;
}

/*
 * Operator_isHWLBreak --	Test if this Operator is a Hardware Loop Break.
 */
static inline bool
Operator_isHWLBreak(Operator this)
{
  return false;
}

/*
 * Operator_isHWLIter --	Test if this Operator is a Hardware Loop Iter.
 */
static inline bool
Operator_isHWLIter(Operator this)
{
  return false;
}

/*
 * Operator_isHWLBranch --	Test if this Operator is a Hardware Loop Branch.
 */
static inline bool
Operator_isHWLBranch(Operator this)
{
  return false;
}

/*
 * Operator_isHWLPseudo --	Test if this Operator is a Hardware Loop Pseudo.
 */
static inline bool
Operator_isHWLPseudo(Operator this)
{
  return false;
}

/*
 * !!!!	st200-Operator.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */





#define Bundling_h_INCLUDED 

/*
 * !!!!	Bundling.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Bundling_NAME_ --	NAME array for the Bundling enumeration.
 */
extern const char *Bundling_NAME_[];

#define Bundling_NAME_(this) (Bundling_NAME_[this])




/*
 * BundlingBuffer --	Buffer used to reorder Bundling(s).
 */

struct BundlingBuffer_ {
  short_Bundling BUNDLINGS[4];
  uint8_t PERMUTE[4];
};

typedef struct BundlingBuffer_ BundlingBuffer_, *BundlingBuffer;
typedef const struct BundlingBuffer_ *const_BundlingBuffer;
typedef struct BundlingBuffer_ * restrict_BundlingBuffer;

#define BundlingBuffer_BUNDLINGS(this) ((this)->BUNDLINGS)
#define BundlingBuffer__BUNDLINGS(this) (&(this)->BUNDLINGS)
#define BundlingBuffer_PERMUTE(this) ((this)->PERMUTE)
#define BundlingBuffer__PERMUTE(this) (&(this)->PERMUTE)


/*
 * BundlingBuffer_sort --	Sort the BUNDLINGS array and fill the PERMUTE array.
 *
 * Return:	hash value suitable for use by =BundleMatch_FindBundle=.
 *
 * The hash value is computed as follows:
 *
 *	hash = -1;
 *	for (i = 0; i < count; i++) {
 *	  hash++; hash *= Bundling__;
 *	  hash += bundlings[i];
 *	}
 *	hash++;
 */
int32_t
BundlingBuffer_sort(BundlingBuffer this, int count);





#define Template_h_INCLUDED 

/*
 * !!!!	Template.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Template_NAME_ --	NAME array for the Template enumeration.
 */
extern const char *Template_NAME_[];

#define Template_NAME_(this) (Template_NAME_[this])




/*
 * Template_increment --	This Template increment of the PC.
 */
extern const int8_t
Template_Increment[];
static inline int
Template_increment(Template this)
{
  ;
  return Template_Increment[this];
}

/*
 * Template_count --	This Template count of Syllables.
 */
extern const uint8_t
Template_Count[];
static inline int
Template_count(Template this)
{
  ;
  return Template_Count[this];
}

/*
 * Template_distances --	This Template Syllable PC distances from Bundle PC.
 */
extern const uint8_t
Template_Distances[][4];
static inline const uint8_t *
Template_distances(Template this)
{
  ;
  return Template_Distances[this];
}

/*
 * Template_encode --	This Template encode function.
 */
typedef void
(*TemplateEncode)(const_InstanceOpcodes *restrict opcodes, void *restrict buffer);
extern TemplateEncode
Template_Encode[];
static inline TemplateEncode
Template_encode(Template this)
{
  ;
  return Template_Encode[this];
}





#define Bundle_h_INCLUDED 

/*
 * !!!!	Bundle.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Bundle_NAME_ --	NAME array for the Bundle enumeration.
 */
extern const char *Bundle_NAME_[];

#define Bundle_NAME_(this) (Bundle_NAME_[this])




/*
 * Bundle_alignBias --	This Bundle align bias.
 */

extern const uint8_t
Bundle_AlignBias[];
static inline int
Bundle_alignBias(Bundle this)
{
  ;
  return Bundle_AlignBias[this];
}


/*
 * Bundle_alignBase --	This Bundle align bias.
 */

extern const uint8_t
Bundle_AlignBase[];
static inline int
Bundle_alignBase(Bundle this)
{
  ;
  return Bundle_AlignBase[this];
}


/*
 * Bundle_count --	This Bundle count of Bundling classes.
 */

extern const uint8_t
Bundle_Count[];
static inline int
Bundle_count(Bundle this)
{
  ;
  return Bundle_Count[this];
}


/*
 * Bundle_contents --	This Bundle contents.
 */

extern const short_Bundling
Bundle_Contents[][4];
static inline const short_Bundling *
Bundle_contents(Bundle this)
{
  ;
  return Bundle_Contents[this];
}


/*
 * Bundle_inverse --	This Bundle inverse permutation.
 */

extern const uint8_t
Bundle_Inverse[][4];
static inline const uint8_t *
Bundle_inverse(Bundle this)
{
  ;
  return Bundle_Inverse[this];
}


/*
 * Bundle_template --	This Bundle Template.
 */

extern const short_Template
Bundle_Template[];
static inline Template
Bundle_template(Bundle this)
{
  ;
  return (Template)Bundle_Template[this];
}


/*
 * BundleMatch --	Match between a canonic sequence of Bundling classes an Bundle(s).
 *
 * The HASH value is computed from a sorted sequence of Bundling classes as follows:
 *
 *	HASH = -1;
 *	for (i = 0; i < length; i++) {
 *	  HASH++; HASH *= Bundling__; HASH += bundlings[i];
 *	}
 *	HASH++;
 */

struct BundleMatch_ {
  uint16_t HASH; // HASH value for this BundleMatch.
  uint16_t COUNT; // Count of Bundle(s) in ITEMS.
  short_Bundle ITEMS[4];
};

typedef struct BundleMatch_ BundleMatch_, *BundleMatch;
typedef const struct BundleMatch_ *const_BundleMatch;
typedef struct BundleMatch_ * restrict_BundleMatch;

#define BundleMatch_HASH(this) ((this)->HASH)
#define BundleMatch__HASH(this) (&(this)->HASH)
#define BundleMatch_COUNT(this) ((this)->COUNT)
#define BundleMatch__COUNT(this) (&(this)->COUNT)
#define BundleMatch_ITEMS(this) ((this)->ITEMS)
#define BundleMatch__ITEMS(this) (&(this)->ITEMS)


/*
 * BundleMatch_FindBundle --	Given a HASH and nativePC, find a matching Bundle.
 */
Bundle
BundleMatch_FindBundle(uint32_t hash, PlatformUInt nativePC);





#define Reservation_h_INCLUDED 

/*
 * !!!!	Reservation.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * ReservationTable --	Reservation table.
 */
struct ReservationTable_ {
  int COLUMNCOUNT;
  ResourceVector_ *COLUMNS;
};
typedef struct ReservationTable_ ReservationTable_, *ReservationTable;
typedef const struct ReservationTable_ *const_ReservationTable;
typedef struct ReservationTable_ * restrict_ReservationTable;

#define ReservationTable_COLUMNCOUNT(this) ((this)->COLUMNCOUNT)
#define ReservationTable__COLUMNCOUNT(this) (&(this)->COLUMNCOUNT)
#define ReservationTable_COLUMNS(this) ((this)->COLUMNS)
#define ReservationTable__COLUMNS(this) (&(this)->COLUMNS)


/*
 * ReservationTable_columnCount --	Count of columns of this ReservationTable.
 */
static inline int
ReservationTable_columnCount(const_ReservationTable this)
{
  return ((this)->COLUMNCOUNT);
}

/*
 * ReservationTable_columns --	Array of columns of this ReservationTable.
 */
static inline const ResourceVector_ *
ReservationTable_columns(const_ReservationTable this)
{
  return ((this)->COLUMNS);
}

/*
 * Reservation_NAME_ --	NAME array for the Reservation enumeration.
 */
extern const char *Reservation_NAME_[];

#define Reservation_NAME_(this) (Reservation_NAME_[this])
#define Reservation_NAME(this) (Reservation_NAME_[this] + sizeof(MDS_TARGET))





/*
 * Reservation_table --	Access to this Reservation class ReservationTable
 */
extern /*const*/ ReservationTable_
Reservation_Table[];
static inline const_ReservationTable
Reservation_table(Reservation this)
{
  ;
  return Reservation_Table + this;
}

/*
 * Reservation_requirements --	The Resource requirements of this Reservation.
 */
static inline const_ResourceVector
Reservation_requirements(Reservation this)
{
  const_ReservationTable table = Reservation_table(this);
  return ((table)->COLUMNS);
}

/*
 * Reservation_odot --	The minimum number of cycles between two Reservation classes.
 */
extern int8_t
Reservation_ODot[Reservation__+1][Reservation__+1][Processor__];
static inline int
Reservation_odot(Reservation this, Reservation that, Processor processor)
{
  ;
  return Reservation_ODot[this][that][processor];
}





#define Scheduling_h_INCLUDED 

/*
 * !!!!	Scheduling.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * Scheduling_NAME_ --	NAME array for the Scheduling enumeration.
 */
extern const char *Scheduling_NAME_[];

#define Scheduling_NAME_(this) (Scheduling_NAME_[this])
#define Scheduling_NAME(this) (Scheduling_NAME_[this] + sizeof(MDS_TARGET))





/*
 * Scheduling_processor --	This Scheduling class processor.
 */
extern const short_Processor
Scheduling_Processor[];
static inline Processor
Scheduling_processor(Scheduling this)
{
  ;
  return (Processor)Scheduling_Processor[this];
}

/*
 * Scheduling_bundling --	This Scheduling class Bundling class.
 */
extern const short_Bundling
Scheduling_Bundling[];
static inline Bundling
Scheduling_bundling(Scheduling this)
{
  ;
  return (Bundling)Scheduling_Bundling[this];
}

/*
 * Scheduling_reservation --	This Scheduling class Reservation.
 */
extern const short_Reservation
Scheduling_Reservation[];
static inline Reservation
Scheduling_reservation(Scheduling this)
{
  ;
  return (Reservation)Scheduling_Reservation[this];
}





#define Convention_h_INCLUDED 

/*
 * !!!!	Convention.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

/*
 * ConventionRole --	Enumerate the Convention Register roles.
 */
typedef enum {
  ConventionRole_Reserved, // Reserved (non allocatable) Register(s).
  ConventionRole_Argument, // Function call argument Register(s).
  ConventionRole_Result, // Function call result Register(s).
  ConventionRole_Struct, // Pointer to result structure Register(s).
  ConventionRole_Caller, // Caller saved (scratch) Register(s).
  ConventionRole_Callee, // Callee saved (preserved) Register(s).
  ConventionRole_Program, // Program counter Register(s).
  ConventionRole_Return, // Return address (link) Register(s).
  ConventionRole_Stack, // Stack pointer Register(s)
  ConventionRole_Static, // Static link pointer Register(s).
  ConventionRole_Frame, // Frame pointer Register(s).
  ConventionRole_Global, // Global data or GOT pointer Register(s).
  ConventionRole_Local, // Local data or TLS pointer Register(s).
  ConventionRole_Wired, // Wired (constant or bucket) Register(s).
  ConventionRole_Zero, // Constant zero value Register(s).
  ConventionRole_One, // Constant one value Register(s).
  ConventionRole__
} ConventionRole;
typedef uint8_t short_ConventionRole;
extern const char *
ConventionRole_NAME_[];
#define ConventionRole_NAME_(type) ConventionRole_NAME_[type]

/*
 * Convention_NAME_ --	NAME array for the Convention enumeration.
 */
extern const char *Convention_NAME_[];

#define Convention_NAME_(this) (Convention_NAME_[this])




/*
 * Convention_roleRegisterSets --	RegisterSet(s) indexed by ConventionRole(s).
 */
extern RegisterSet_
Convention_RoleRegisterSets[Convention__+1][ConventionRole__+1];
static inline const_RegisterSet
Convention_roleRegisterSets(Convention this, ConventionRole role)
{
  ;
  ;
  return &Convention_RoleRegisterSets[this][role];
}

/*
 * Convention_stackRegister --	This Convention Stack pointer Register.
 */
extern short_Register
Convention_StackRegister[Convention__+1];
static inline Register
Convention_stackRegister(Convention this)
{
  ;
  return (Register)Convention_StackRegister[this];
}

/*
 * Convention_frameRegister --	This Convention Frame pointer Register.
 */
extern short_Register
Convention_FrameRegister[Convention__+1];
static inline Register
Convention_frameRegister(Convention this)
{
  ;
  return (Register)Convention_FrameRegister[this];
}

/*
 * Convention_globalRegister --	This Convention Global pointer Register.
 */
extern short_Register
Convention_GlobalRegister[Convention__+1];
static inline Register
Convention_globalRegister(Convention this)
{
  ;
  return (Register)Convention_GlobalRegister[this];
}

/*
 * Convention_localRegister --	This Convention Local pointer Register.
 */
extern short_Register
Convention_LocalRegister[Convention__+1];
static inline Register
Convention_localRegister(Convention this)
{
  ;
  return (Register)Convention_LocalRegister[this];
}

/*
 * Convention_alignText --	This Convention Text Alignment Base.
 */
extern const uint8_t
Convention_AlignText[];
static inline unsigned
Convention_alignText(Convention this)
{
  ;
  return Convention_AlignText[this];
}

/*
 * Convention_alignData --	This Convention Data Alignment Base.
 */
extern const uint8_t
Convention_AlignData[];
static inline unsigned
Convention_alignData(Convention this)
{
  ;
  return Convention_AlignData[this];
}

/*
 * Convention_alignHeap --	This Convention Heap Alignment Base.
 */
extern const uint8_t
Convention_AlignHeap[];
static inline unsigned
Convention_alignHeap(Convention this)
{
  ;
  return Convention_AlignHeap[this];
}

/*
 * Convention_alignStack --	This Convention Stack Alignment Base.
 */
extern const uint8_t
Convention_AlignStack[];
static inline unsigned
Convention_alignStack(Convention this)
{
  ;
  return Convention_AlignStack[this];
}

/*
 * Convention_nativeInt --	This Convention Native Int.
 */
extern const short_NativeType
Convention_NativeInt[];
static inline NativeType
Convention_nativeInt(Convention this)
{
  ;
  return (NativeType)Convention_NativeInt[this];
}

/*
 * Convention_nativeUInt --	This Convention Native UInt.
 */
extern const short_NativeType
Convention_NativeUInt[];
static inline NativeType
Convention_nativeUInt(Convention this)
{
  ;
  return (NativeType)Convention_NativeUInt[this];
}

/*
 * Convention_nativeFloat --	This Convention Native Float.
 */
extern const short_NativeType
Convention_NativeFloat[];
static inline NativeType
Convention_nativeFloat(Convention this)
{
  ;
  return (NativeType)Convention_NativeFloat[this];
}

/*
 * Convention_nativePtr --	This Convention Native Ptr.
 */
extern const short_NativeType
Convention_NativePtr[];
static inline NativeType
Convention_nativePtr(Convention this)
{
  ;
  return (NativeType)Convention_NativePtr[this];
}





#define Decode_h_INCLUDED 

/*
 * !!!!	Decode.xcc
 *
 * Benoit Dupont de Dinechin (Benoit.Dupont-de-Dinechin@st.com).
 *
 * Copyright 2002 - 2007 STMicroelectronics.
 * Copyright 1995 - 1998 Commissariat a l'Energie Atomique.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either (at your option): the GNU
 * General Public License (GPL) version 2; the GNU Lesser General
 * Public License (LGPL) version 2.1; any later version of these
 * licences as published by the Free Software Foundation.
 */

//






//

extern Instance
Decode_Encoding_st220_ANY(const void *buffer);


//

extern Instance
Decode_Encoding_st220_ANYX(const void *buffer);


//

extern Instance
Decode_Encoding_st231_ANY(const void *buffer);


//

extern Instance
Decode_Encoding_st231_ANYX(const void *buffer);


//

extern Instance
Decode_Encoding_st240_ANY(const void *buffer);


//

extern Instance
Decode_Encoding_st240_ANYX(const void *buffer);





/*
 * MDS_TRACE --	File handle used to trace the MDS.
 */
extern FILE *MDS_TRACE;




/*
 * Variables used to control MDS in non-release mode.
 */
extern int FORCE_MAXISSUE;
extern int FORCE_MINTAKEN;

//
void
MDS_setMaxIssue(Processor processor, int maxIssue);

//
void
MDS_setMinTaken(Processor processor, int minTaken);

//
void
MDS_setReserved(Convention convention, Register registre);

/*
 * MDS_INIT --	MDS init function.
 */
void
MDS_INIT(void);

/*
 * MDS_FINI --	MDS fini function.
 */
void
MDS_FINI(void);

//
#define MDS_TARGET "st200"
#define MDS_TARGET_st200 
#define MDS_CORE_st220 
#define MDS_CORE_st231 
#define MDS_CORE_st240 
