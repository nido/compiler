#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for ir_tools
#

include	$(COMMONDEFS)

TARGDIR = $(BUILD_AREA)

CVERSION =
LCOPTS += $(STD_COMPILE_OPTS)
ifeq ($(BUILD_COMPILER), EDG)
WOFF += -fullwarn
else
WOFF +=
endif
HOSTDEFS += -DIR_TOOLS
HOSTDEFS += -D_NEW_SYMTAB
ifeq ($(BUILD_COMPILER), GNU)
HOSTDEFS += -D__GNU_BUG_WORKAROUND
endif
ifeq ($(BUILD_TARGET), IA64)
TARGDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_TARGET), IA32)
TARGDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_TARGET), ST200)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H -DTARG_ST200
endif
ifeq ($(BUILD_TARGET), STxP70)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H -DTARG_STxP70
endif

ifeq ($(DSO_MODE),DLL)
HOSTDEFS += -DBE_EXPORTED= -DCG_EXPORTED= -DTARGINFO_EXPORTED=
endif

ifeq ($(BUILD_OPTIMIZE), DEBUG)
# don't use is_true_on because ir_a2b doesn't have config info
LCDEFS += -DInsist_On -DDEBUG_IR
endif

LCDEFS += $(HOSTDEFS) $(TARGDEFS)
LC++DEFS += $(HOSTDEFS) $(TARGDEFS)

GLDOPTS = $(STD_LOAD_OPTS)

#Reconfigurability: Some symbols needs to be exported fron the main 
#to be visible by the extension.so
LDFLAGS += -Wl,--export-dynamic

LIBCOMUTIL = $(BUILD_AREA)/libcomutil/libcomutil.a

ifeq ($(BUILD_COMPILER), EDG)
LLDLIBS	= $(LIBCOMUTIL) -lgen -lm
else
LLDLIBS	= $(LIBCOMUTIL) 
endif

ifneq ($(HOST_OS), CYGWIN_NT)
ifneq ($(HOST_OS), MINGW)
# all we need is already in lcygwin and mingwin
LIBSYS = $(BUILD_AREA)/libSYS/libSYS.a
LIBIBERTY = $(BUILD_AREA)/libiberty/libiberty.a
LLDLIBS	+= -lm -ldl $(LIBSYS) $(LIBIBERTY)
endif
endif

ifeq ($(HOST_OS), MINGW)
LIBSYS = $(BUILD_AREA)/libSYS/libSYS.a
LIBIBERTY = $(BUILD_AREA)/libiberty/libiberty.a
LLDLIBS += $(LIBSYS) $(LIBIBERTY)
endif
ifeq ($(HOST_OS), CYGWIN_NT)
LIBIBERTY = $(BUILD_AREA)/libiberty/libiberty.a
LLDLIBS += $(LIBIBERTY)
endif

LIBTARGINFO = $(TARG_TARG_INFO_DIR)/libtarginfo.a
LLDLIBS += $(LIBTARGINFO)

TARGETS = ir_b2a$(HEXE) ir_size$(HEXE)

# ST compilers have a different target info directory structure:
ifeq ($(BUILD_TARGET), ST100)
COMMON_COM_TARG_DIR=
COMMON_TARG_INFO_ACCESS_DIR = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/access
COMMON_TARGINFO_CONFIG_DIR  = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
COMMON_UTIL_TARG_DIR	    = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/util
endif
ifeq ($(BUILD_TARGET), ST200)
COMMON_COM_TARG_DIR=
COMMON_TARG_INFO_ACCESS_DIR = $(BUILD_TOT)/targinfo/access
COMMON_TARGINFO_CONFIG_DIR  = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
COMMON_UTIL_TARG_DIR	    = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/util
else
ifeq ($(BUILD_TARGET), STxP70)
COMMON_COM_TARG_DIR=
COMMON_TARG_INFO_ACCESS_DIR = $(BUILD_TOT)/targinfo/access
COMMON_TARGINFO_CONFIG_DIR  = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
COMMON_UTIL_TARG_DIR	    = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/util
else
COMMON_COM_TARG_DIR= $(BUILD_TOT)/common/com/$(BUILD_TARGET_DIR)
endif
endif
TARG_TARG_INFO_DIR	= $(TARGDIR)/targ_info
TARG_GCCFE_DIR		= $(TARGDIR)/gccfe

COMMON_COM_DIR= $(BUILD_TOT)/common/com

COMMON_UTIL_DIR= $(BUILD_TOT)/common/util

LIBINSTRC_DIR=$(BUILD_TOT)/instrumentation/libinstrC

SRC_DIRS =              \
  $(BUILD_BASE)         \
  $(COMMON_COM_DIR)	\
  $(COMMON_COM_TARG_DIR)\
  $(COMMON_UTIL_DIR)	\
  $(COMMON_UTIL_TARG_DIR)\
  $(COMMON_TARG_INFO_ACCESS_DIR) \
  $(COMMON_TARGINFO_CONFIG_DIR)


INC_DIRS =		\
	$(BUILD_BASE)   \
	$(COMMON_COM_DIR) \
	$(COMMON_COM_TARG_DIR) \
	$(COMMON_UTIL_DIR) \
	$(LIBINSTRC_DIR) \
	$(XINC) \
	$(COMMON_UTIL_TARG_DIR) \
	$(COMMON_TARGINFO_CONFIG_DIR) \
	$(TARG_TARG_INFO_DIR) \
	$(COMMON_TARG_INFO_ACCESS_DIR) \
	$(TARG_GCCFE_DIR)

LDIRT = ir_a2b ir_sel

#LCINCS = -I$(BUILD_BASE) -I$(COMMON_COM_DIR) -I$(COMMON_COM_TARG_DIR) \
#	-I$(COMMON_UTIL_DIR) $(XINC) -I$(COMMON_UTIL_TARG_DIR) \
#	-I$(COMMON_TARGINFO_CONFIG_DIR) -I$(COMMON_TARG_INFO_ACCESS_DIR)
LCINCS = $(addprefix -I, $(INC_DIRS))


ifeq ($(BUILD_OS), LINUX)
LCINCS += -I$(BUILD_AREA)/include/libelf
endif
ifeq ($(BUILD_OS), SUNOS5)
LCINCS += -I$(BUILD_AREA)/include/libelf
endif

LCXXOPTS = $(LCOPTS)
LCXXDEFS = $(LCDEFS)
LCXXINCS = $(LCINCS)

COMMON_COM_TARG_SRC = \
	config_host.c \
	config_platform.c \

COMMON_COM_SRC= dso.c

CFILES= \
	$(COMMON_COM_SRC) \
	$(COMMON_COM_TARG_SRC)

COMMON_COM_CXX_SRC =	\
	config.cxx	\
	config_elf_targ.cxx \
	const.cxx	\
	dwarf_DST.cxx	\
	dwarf_DST_dump.cxx	\
	dwarf_DST_mem.cxx	\
	glob.cxx	\
	ir_bcom.cxx	\
	ir_bread.cxx	\
	ir_bwrite.cxx	\
	ir_reader.cxx	\
	irbdata.cxx	\
	mtypes.cxx	\
	opcode.cxx	\
	opcode_core.cxx	\
	pu_info.cxx	\
	strtab.cxx	\
	symtab.cxx	\
	symtab_verify.cxx	\
	wn.cxx		\
	wn_map.cxx	\
	wn_pragmas.cxx	\
	wn_simp.cxx	\
	wn_util.cxx	\
	wutil.cxx	\
	xstats.cxx	\
	extension_intrinsic.cxx \
	loader.cxx      \
	dyn_dll_api_access.cxx \
	dyn_isa_api_access.cxx \
	intrn_info.cxx

# there is no way to distinguish between config_targ.cxx and
# config_TARG.cxx on windows platforms... we use a different name for
# ST targets...
ifeq (,$(findstring ST,$(BUILD_TARGET)))
CONFIG_TARGET_NAME=config_targ
else
CONFIG_TARGET_NAME=config_target
endif

COMMON_COM_TARG_CXX_SRCS =	\
	$(CONFIG_TARGET_NAME).cxx	\
	targ_const.cxx	\
	targ_sim.cxx	\

CXXFILES =		\
	$(COMMON_COM_CXX_SRC) \
	$(COMMON_COM_TARG_CXX_SRCS)

default: first
	$(MAKE) local last

first:
ifeq ($(BUILD_OS), LINUX)
	cd $(BUILD_AREA)/include && $(MAKE)
endif
	cd $(BUILD_AREA)/libcomutil && $(MAKE)

first_local:

local: first_local
	$(MAKE) $(TARGETS)

last: local
	$(MAKE) make_deps

ifeq ($(BUILD_TARGET), ST200)
INSTALL_DIR=$(ROOT)/sbin
else
ifeq ($(BUILD_TARGET), STxP70)
INSTALL_DIR=$(ROOT)/sbin
else
INSTALL_DIR=/usr/sbin
endif
endif

install: last
	if [ ! -d $(STD_MONGOOSE_OS_LOC) ]; then $(STD_INSTALL) -d $(STD_MONGOOSE_OS_LOC); fi
	for h in $(TARGETS); do \
	    $(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) $$h $(STD_MONGOOSE_OS_LOC) ; \
	done
	if [ ! -d $(INSTALL_DIR) ]; then $(STD_INSTALL) -d $(INSTALL_DIR); fi
	if [ ! -h $(INSTALL_DIR)/ir_a2b$(HEXE) ]; then \
	   ln -s $(INSTALL_DIR)/ir_b2a$(HEXE) $(INSTALL_DIR)/ir_a2b$(HEXE); \
	fi
	if [ ! -h $(INSTALL_DIR)/ir_sel$(HEXE) ]; then \
	   ln -s $(INSTALL_DIR)/ir_b2a$(HEXE) $(INSTALL_DIR)/ir_sel$(HEXE); \
	fi

include $(COMMONRULES)

VPATH = $(SRC_DIRS)

ir_b2a$(HEXE): $(OBJECTS) ir_a2b.o
	$(C++F) -o $@ ir_a2b.o $(OBJECTS) $(LDFLAGS)

ir_a2b$(HEXE): ir_b2a$(HEXE)
	ln -sf ir_b2a$(HEXE) ir_a2b$(HEXE)

ir_sel$(HEXE): ir_b2a$(HEXE)
	ln -sf ir_b2a$(HEXE) ir_sel$(HEXE)

ir_size$(HEXE): $(OBJECTS) ir_size.o ir_b2a$(HEXE)
	$(C++F) -o $@ ir_size.o $(OBJECTS) $(LDFLAGS)

ir_walker$(HEXE): $(OBJECTS) ir_walker.o
	$(C++F) -o $@ ir_walker.o $(OBJECTS) $(LDFLAGS)

