#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for gccfe
#

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build. 
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#----------------------------------------------------------------------
ifeq ($(BUILD_COMPILER), SGI)
CVERSION = -xansi
else
CVERSION =
endif

#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------

# These are here because they are needed both in fecc and in common so just
# putting them in fecc/defines.h is not enough:

HOSTDEFS += -DIN_GCC -DHAVE_CONFIG_H

ifeq ($(BUILD_TARGET), IA64)
HOSTDEFS += -DTARGET_NAME=\"ia64-linux\"
endif
ifeq ($(BUILD_TARGET), IA32)
HOSTDEFS += -DTARGET_NAME=\"i686-pc-linux-gnu\"
endif
ifeq ($(BUILD_TARGET), MIPS)
HOSTDEFS += -DTARGET_NAME=\"mips-sgi-irix6\"
endif
ifeq ($(BUILD_TARGET), ST100)
ifeq ($(BUILD_OS),LINUX)
HOSTDEFS += -DTARGET_NAME=\"st100-linux\"
else
HOSTDEFS += -DTARGET_NAME=\"st100\"
endif
endif

ifeq ($(BUILD_TARGET), ST200)
ifeq ($(BUILD_OS),LINUX)
HOSTDEFS += -DTARGET_NAME=\"st200-linux\"
else
HOSTDEFS += -DTARGET_NAME=\"st200\"
endif
endif

ifeq ($(BUILD_TARGET), STxP70)
ifeq ($(BUILD_OS),LINUX)
HOSTDEFS += -DTARGET_NAME=\"stxp70-linux\"
else
HOSTDEFS += -DTARGET_NAME=\"stxp70\"
endif
endif

ifeq ($(BUILD_TARGET), ARM)
ifeq ($(BUILD_OS),LINUX)
HOSTDEFS += -DTARGET_NAME=\"arm-linux\"
else
HOSTDEFS += -DTARGET_NAME=\"arm\"
endif
endif

# (cbr) define gnu version
HOSTDEFS += -DGNU_FRONT_END=33

# (cbr) reserved for wfe
# HOSTDEFS += -DLONGLONG
# HOSTDEFS += -DFRONT_END
# HOSTDEFS += -DUSE_DECL_SRCPOS

HOSTDEFS += -DFRONT_END_C
# HOSTDEFS += -DCFE -DCIL
# HOSTDEFS += -DDO_IL_LOWERING=0
# HOSTDEFS += -DNO_USR_INCLUDE=TRUE
# HOSTDEFS += -DAUTOMATIC_TEMPLATE_INSTANTIATION=0
# HOSTDEFS += -DINSTANTIATION_BY_IMPLICIT_INCLUSION=0
# HOSTDEFS += -DBACK_END_IS_C_GEN_BE=0

# ifneq  ($(BUILD_TARGET), ST200)
# HOSTDEFS += -DMONGOOSE_CIF
# HOSTDEFS += -DSGI_RAG_BACKEND
# ifneq ($(BUILD_COMPILER), SGI)
# HOSTDEFS += -DMIPSEL
# endif
# endif

# (cbr) added wfe pragmas
HOSTDEFS += -DHANDLE_WFE_PRAGMAS

HOSTDEFS += -DSGI_MONGOOSE

ifeq ($(BUILD_OPTIMIZE), DEBUG)
HOSTDEFS += -DIs_True_On
HOSTDEFS += -DInsist_On 
HOSTDEFS += -DDEBUG=1
HOSTDEFS += -DCHECKING=1
else
HOSTDEFS += -DDEBUG=0 
HOSTDEFS += -DCHECKING=0 
endif

### SHOULD GO AWAY after elf.h cleanup...
# (cbr) cleanup
ifneq ($(BUILD_TARGET), ST200)
ifneq ($(BUILD_TARGET), STxP70)
ifneq ($(BUILD_TARGET), ARM)
TARGDEFS = -D__MIPS_AND_IA64_ELF_H
endif
endif
endif
# ifeq ($(BUILD_COMPILER), GNU)
# TARGDEFS = -D__MIPS_AND_IA64_ELF_H
# endif

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------

FE_DIR 			= $(BUILD_TOT)/gccfe

ifeq ($(BUILD_OS), IRIX)
INCLUDE_DIR 		= $(BUILD_TOT)/include
else
INCLUDE_DIR 		= $(BUILD_AREA)/include
endif

GNU_DIR			= $(BUILD_BASE)
GNU_CONFIG_DIR		= $(BUILD_BASE)/config
GNU_COMMON_DIR          = $(BUILD_TOT)/gnu_common

GNU_TARG_DIR = $(GNU_DIR)/$(BUILD_TARGET_DIR)
GNU_CONFIG_TARG_DIR = $(GNU_CONFIG_DIR)/$(BUILD_TARGET_DIR)
ifeq ($(BUILD_TARGET), IA32)
GNU_CONFIG_TARG_DIR = $(GNU_CONFIG_DIR)/i386
endif
ifeq ($(BUILD_TARGET), MIPS)
GNU_CONFIG_TARG_DIR = $(GNU_CONFIG_DIR)/mips
endif

TARG_COMUTIL_DIR	= $(TARGDIR)/libcomutil
TARG_LIBM_DIR		= $(TARGDIR)/libm
TARG_CMPLRS_DIR		= $(TARGDIR)/libcmplrs
TARG_CSUP_DIR		= $(TARGDIR)/libcsup
TARG_LIBIBERTY_DIR      = $(TARGDIR)/libiberty
TARG_GNU_DIR		= $(TARGDIR)/gccfe/gnu
# ST compilers have a different target info directory structure:
ifeq ($(BUILD_TARGET), ST100)
COMMON_TARGINFO_CONFIG_DIR  = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
endif
ifeq ($(BUILD_TARGET), ST200)
COMMON_TARGINFO_CONFIG_DIR  = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
endif
ifeq ($(BUILD_TARGET), STxP70)
COMMON_TARGINFO_CONFIG_DIR  = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
endif
ifeq ($(BUILD_TARGET), ARM)
COMMON_TARGINFO_CONFIG_DIR  = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
endif
ifeq ($(BUILD_TARGET), IA64)
COMMON_TARGINFO_CONFIG_DIR  = 
endif
COMMON_COM_DIR 		= $(BUILD_TOT)/common/com

# These are the directories in which to look for source files.

SRC_DIRS =		\
  $(GNU_DIR)		\
  $(GNU_DIR)/cp		\
  $(GNU_TARG_DIR)	\
  $(GNU_CONFIG_TARG_DIR) 

INC_DIRS =		\
  $(COMMON_TARGINFO_CONFIG_DIR) \
  $(FE_DIR)		\
  $(GNU_DIR)		\
  $(GNU_TARG_DIR)	\
  $(GNU_CONFIG_DIR)	\
  $(GNU_CONFIG_TARG_DIR)\
  $(GNU_COMMON_DIR)/include \
  $(COMMON_COM_DIR)

#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

GNU_SRCS =		\
  alias.c		\
  attribs.c		\
  bb-reorder.c		\
  bitmap.c		\
  builtins.c		\
  c-objc-common.c	\
  c-dump.c 		\
  c-errors.c		\
  c-lex.c		\
  caller-save.c		\
  calls.c		\
  cfg.c			\
  cfganal.c	        \
  cfgbuild.c	        \
  cfgcleanup.c	        \
  cfglayout.c  		\
  cfgloop.c	        \
  cfgrtl.c	        \
  combine.c		\
  conflict.c		\
  convert.c		\
  cse.c			\
  cselib.c		\
  c-common.c		\
  c-format.c		\
  c-pragma.c		\
  c-semantics.c		\
  c-opts.c		\
  dbxout.c		\
  debug.c		\
  df.c			\
  diagnostic.c		\
  dominance.c		\
  dwarfout.c		\
  dwarf2asm.c		\
  dwarf2out.c		\
  dyn-string.c		\
  emit-rtl.c		\
  except.c		\
  explow.c		\
  expmed.c		\
  expr.c		\
  et-forest.c           \
  final.c		\
  flow.c		\
  fold-const.c		\
  function.c		\
  gcse.c		\
  genrtl.c		\
  ggc-common.c		\
  ggc-page.c		\
  gtype-desc.c		\
  hashtable.c    	\
  hooks.c		\
  global.c		\
  graph.c		\
  hash.c		\
  haifa-sched.c		\
  ifcvt.c		\
  insn-attrtab.c	\
  insn-emit.c		\
  insn-extract.c	\
  insn-opinit.c		\
  insn-output.c		\
  insn-recog.c		\
  integrate.c		\
  jump.c		\
  lcm.c			\
  lists.c		\
  langhooks.c		\
  line-map.c  		\
  local-alloc.c		\
  loop.c		\
  optabs.c		\
  params.c		\
  predict.c		\
  print-rtl.c		\
  print-tree.c		\
  profile.c		\
  real.c		\
  recog.c		\
  regclass.c		\
  regmove.c		\
  regrename.c		\
  reg-stack.c		\
  reload.c		\
  reload1.c		\
  reorg.c		\
  resource.c		\
  ra.c			\
  ra-build.c		\
  ra-colorize.c		\
  ra-debug.c		\
  ra-rewrite.c		\
  rtl.c			\
  rtlanal.c		\
  rtl-error.c		\
  sbitmap.c		\
  sched-deps.c		\
  sched-rgn.c		\
  sched-vis.c		\
  sdbout.c		\
  sibcall.c		\
  simplify-rtx.c	\
  stringpool.c  	\
  ssa.c		        \
  ssa-ccp.c		\
  ssa-dce.c	        \
  stmt.c		\
  stor-layout.c		\
  timevar.c		\
  toplev.c		\
  tracer.c		\
  tree.c		\
  tree-dump.c		\
  tree-inline.c		\
  unroll.c		\
  varasm.c		\
  varray.c		\
  version.c		\
  xcoffout.c

ifeq ($(BUILD_TARGET), IA64)
  GNU_SRCS += ia64.c
endif
ifeq ($(BUILD_TARGET), IA32)
  GNU_SRCS += i386.c
endif
ifeq ($(BUILD_TARGET), MIPS)
  GNU_SRCS += mips.c
endif
ifeq ($(BUILD_TARGET), ST200)
  GNU_SRCS += lx.c
endif
ifeq ($(BUILD_TARGET), STxP70)
  GNU_SRCS += stxp70.c
endif
ifeq ($(BUILD_TARGET), ARM)
  GNU_SRCS += arm.c
endif

# There is no st100.c description for gcc, use the dummy one.
# TODO: get this all gcc description stuff cleaned.
ifeq ($(BUILD_TARGET), ST100)
  GNU_SRCS += ia64.c
endif

GNU_C_SRCS = 		\
  c-aux-info.c		\
  c-convert.c		\
  c-decl.c		\
  c-lang.c		\
  c-parse.c		\
  c-typeck.c

GNU_C_OBJS = $(GNU_SRCS:.c=.o) $(GNU_C_SRCS:.c=.o)

#----------------------------------------------------------------------
#  List of source files for cxx. 
#----------------------------------------------------------------------

GNU_CP_UNIQ_SRCS =	\
  call.c		\
  class.c		\
  cvt.c			\
  decl.c		\
  decl2.c		\
  dump.c		\
  error.c		\
  friend.c		\
  init.c		\
  lex.c			\
  mangle.c		\
  method.c		\
  optimize.c		\
  parse.c		\
  pt.c			\
  ptree.c		\
  repo.c		\
  rtti.c		\
  search.c		\
  semantics.c		\
  spew.c		\
  typeck.c		\
  typeck2.c		

GNU_CP_DUP_SRCS =	\
  except.c		\
  expr.c		\
  tree.c

GNU_CP_DUP_OBJS  = cp-except.o cp-expr.o cp-tree.o cp-lang.o cp-dump.o

GNU_CP_UNIQ_OBJS = $(GNU_CP_UNIQ_SRCS:.c=.o)

GNU_CC_OBJS = $(GNU_SRCS:.c=.o) $(GNU_CP_UNIQ_OBJS) $(GNU_CP_DUP_OBJS)

#----------------------------------------------------------------------
#  List of source files for cpp. 
#----------------------------------------------------------------------
GNU_CPP_SRCS = \
  gcc.c \
  cpperror.c   \
  cppdefault.c   \
  cppfiles.c   \
  cppinit.c    \
  cpplib.c     \
  cppspec.c    \
  cppexp.c     \
  cpphash.c    \
  cpplex.c     \
  cppmacro.c    \
  cppmain.c    \
  cpptrad.c    \
  line-map.c	\
  version.c    \
  errors.c     \
  prefix.c     \
  mkdeps.c

GNU_CPP_OBJS = $(GNU_CPP_SRCS:.c=.o)

CFILES = $(GNU_SRCS)

VPATH    =  $(SRC_DIRS)

LCOPTS = $(STD_COMPILE_OPTS)
LCDEFS = $(HOSTDEFS) $(TARGDEFS)
LCINCS = $(addprefix -I, $(INC_DIRS))

LDIRT =

#------------------------------------------------------------
#  Define target
#------------------------------------------------------------
CLIBRARY = libgfec.a
CCLIBRARY = libgfecc.a
CPPLIB = libcpp.a

ifeq ($(BUILD_MOD), libunwind)
# (cbr) libunwind support 
TARGETS = $(LIBUNWIND)
LIBUNWIND=libgcc_eh.a
else
TARGETS = $(CPPLIB) $(CLIBRARY) $(CCLIBRARY)
endif

default: first
	$(MAKE) local last

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is 
#  built.
#----------------------------------------------------------------------
first:
ifndef PARALLEL
	cd $(BUILD_AREA)/include && $(MAKE) install
	cd $(TARG_LIBIBERTY_DIR) && $(MAKE)
endif

local: $(TARGETS)

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is 
#  built.
#----------------------------------------------------------------------
last: local make_deps

ifeq ($(BUILD_MOD), libunwind)
install: install-libunwind
else
install: local
endif

include $(COMMONRULES)

install: local

.PRECIOUS : $(CLIBRARY) $(CCLIBRARY) $(CPPLIB)

$(CLIBRARY): $(GNU_C_OBJS)
	$(AR) $(ARFLAGS) $@ $^

$(CCLIBRARY): $(GNU_CC_OBJS)
	$(AR) $(ARFLAGS) $@ $^

#------------------------------------------------------------
#  Rules for cpp
#------------------------------------------------------------
$(CPPLIB): $(GNU_CPP_OBJS)
	$(AR) rv $(CPPLIB) $(GNU_CPP_OBJS)

GNU_CP_DIR		= $(BUILD_BASE)/cp

cp-expr.o: $(GNU_CP_DIR)/expr.c
	$(CCF) -I$(GNU_CP_DIR) -c -o cp-expr.o $(GNU_CP_DIR)/expr.c

cp-except.o: $(GNU_CP_DIR)/except.c
	$(CCF) -I$(GNU_CP_DIR) -c -o cp-except.o $(GNU_CP_DIR)/except.c

cp-tree.o: $(GNU_CP_DIR)/tree.c
	$(CCF) -I$(GNU_CP_DIR) -c -o cp-tree.o $(GNU_CP_DIR)/tree.c

cp-dump.o: $(GNU_CP_DIR)/dump.c
	$(CCF) -I$(GNU_CP_DIR) -c -o cp-dump.o $(GNU_CP_DIR)/dump.c

prefix.o: prefix.c
	$(CCF) -I$(GNU_CP_DIR) -c $< -DPREFIX=\"\"

gcc.o: gcc.c
	$(CCF) -c $< -DDEFAULT_TARGET_VERSION=\"\" -DDEFAULT_TARGET_MACHINE=\"\" -DSTANDARD_STARTFILE_PREFIX=\"\" -DSTANDARD_EXEC_PREFIX=\"\"

$(GNU_CP_UNIQ_OBJS):%.o:%.c
	$(CCF) -I$(GNU_CP_DIR) $< -c 

#----------------------------------------------------------------------
#  (cbr) special section for cross compiled library.
#----------------------------------------------------------------------
UNWIND_OBJS=unwind-dw2.o unwind-dw2-fde.o unwind-c.o 

_install: $(LIBUNWIND)
	if [ ! -d $(INSTALL_PREFIX)/$(INSTALL_DIR) ]; then $(STD_INSTALL) -d $(INSTALL_PREFIX)/$(INSTALL_DIR); fi
	for h in $(TARGETS); do \
	  $(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) $$h $(INSTALL_PREFIX)/$(INSTALL_DIR); \
	done

ifeq ($(BUILD_MOD), libunwind)
# (cbr) libunwind support 
CFLAGS+=-DIN_GCC -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED -DEH_RETURN_STACKADJ_RTX -funwind-tables

# (cm) make exceptions thread safe by defining a default threading model
# In vanillia gcc build, this definition and header gthr-xxx.h header really come from gcc configure
# And query on the threading model.
ifeq ($(BUILD_TARGET), ST200)
  ifeq ($(BUILD_TARGET_OS), BARE_OS21)
    CFLAGS+= -DHAVE_GTHR_DEFAULT
  endif
endif

$(LIBUNWIND): $(UNWIND_OBJS)
	$(AR) rv $(LIBUNWIND) $(UNWIND_OBJS)

INSTALL_DIR=cmplrs
INSTALL_PREFIX:=$(ROOT)/lib
LDIRT += $(LIBUNWIND)

install-libunwind:
	@for core in $(TARGET_LIBUNWIND_CORES); do \
	  for endian in $(TARGET_LIBUNWIND_ENDIANESS); do \
		$(MAKE) TARGET_CORE=$$core TARGET_ENDIANESS=$$endian target_install_st200_core_endian_libraries_; \
	  done; \
	done

target_install_st200_core_endian_libraries_:
	$(MAKE) \
	HOSTDEFS+="-mcore=$(TARGET_CORE) $(addprefix -,$(subst be,EB,$(subst le,EL,$(TARGET_ENDIANESS))))" \
	INSTALL_DIR=$(TARGET_CORE)/$(TARGET_ENDIANESS)/bare clean _install

ifeq ($(HOST_ARCH), ST200)
ifeq (x$(TARGET_LIBUNWIND_CORES)x,xx)
$(error no target is defined. choose a subset of st220/st231/st235 for TARGET_LIBUNWIND_CORES)
endif
ifeq (x$(TARGET_LIBUNWIND_ENDIANESS)x,xx)
$(error no endianess is defined. choose anong le/be for TARGET_LIBUNWIND_ENDIANESS)
endif
endif
endif

