# -*- Makefile -*-
#
#  Copyright 2003, 2004, 2005, 2006 PathScale, Inc.  All Rights Reserved.
#

#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement
#  or the like.  Any license provided herein, whether implied or
#  otherwise, applies only to this software file.  Patent licenses, if
#  any, provided herein do not apply to combinations of this program with
#  other software, or any other product whatsoever.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for wgen
#

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build.
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------

# These are here because they are needed both in fecc and in common so just
# putting them in fecc/defines.h is not enough:

HOSTDEFS += -DIN_GCC -DHAVE_CONFIG_H

HOSTDEFS += -DLONGLONG
HOSTDEFS += -DFRONT_END
HOSTDEFS += -DUSE_DECL_SRCPOS
##########################################################
# The following line is from original g++fe/Makefile.gbase
HOSTDEFS += -D_NEW_SYMTAB
HOSTDEFS += -DFRONT_END_C
HOSTDEFS += -DCFE -DCIL
HOSTDEFS += -DDO_IL_LOWERING=0
HOSTDEFS += -DNO_USR_INCLUDE=TRUE
HOSTDEFS += -DAUTOMATIC_TEMPLATE_INSTANTIATION=0
HOSTDEFS += -DINSTANTIATION_BY_IMPLICIT_INCLUSION=0
HOSTDEFS += -DBACK_END_IS_C_GEN_BE=0
HOSTDEFS += -DFE_GNU_4_2_0

HOSTDEFS += -DCPLUSPLUSIL # [CL] needed for dwarf_DST_producer

ifneq ($(TARGET_FROM_ST),)
 # ST target
HOSTDEFS += -DHANDLE_WFE_PRAGMAS
else
 # not a ST target
HOSTDEFS += -DMONGOOSE_CIF
HOSTDEFS += -DSGI_RAG_BACKEND
 ifneq ($(BUILD_COMPILER), SGI)
HOSTDEFS += -DMIPSEL
 endif
endif
HOSTDEFS += -DSGI_MONGOOSE
HOSTDEFS += -DHANDLE_PRAGMA_WEAK

#define NEW_INITIALIZER
# This macro is for #420 in BugZilla, should be removed later
HOSTDEFS += -DNEW_INITIALIZER

ifeq ($(BUILD_OPTIMIZE), DEBUG)
HOSTDEFS += -DIs_True_On
HOSTDEFS += -DInsist_On
HOSTDEFS += -DDEBUG=1
HOSTDEFS += -DCHECKING=1
else
HOSTDEFS += -DDEBUG=0
HOSTDEFS += -DCHECKING=0
endif

ifeq ($(DSO_MODE),DLL)
HOSTDEFS += -DBE_EXPORTED= -DCG_EXPORTED= -DTARGINFO_EXPORTED=
endif

##########################################################
# The following line is from original g++fe/Makefile.gbase
HOSTDEFS += -DGPLUSPLUS_FE

### SHOULD GO AWAY after elf.h cleanup !!
ifeq ($(BUILD_OS), LINUX)
TARGDEFS = -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_OS), SUNOS5)
TARGDEFS = -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_OS), CYGWIN_NT)
TARGDEFS = -D__MIPS_AND_IA64_ELF_H
endif

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------

FE_DIR                  = $(BUILD_BASE)
FE_COM_DIR              = $(BUILD_TOT)/gccfe
COMMON_COM_DIR          = $(BUILD_TOT)/common/com
COMMON_UTIL_DIR         = $(BUILD_TOT)/common/util

# ST compilers have a different target info directory structure:
ifneq ($(TARGET_FROM_ST),)
COMMON_COM_TARG_DIR	    = 
COMMON_TARG_INFO_ACCESS_DIR = $(BUILD_TOT)/targinfo/access
COMMON_TARGINFO_CONFIG_DIR  = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
COMMON_TARGINFO_ISA_DIR     = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/isa
COMMON_UTIL_TARG_DIR	    = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/util
endif
ifeq ($(BUILD_TARGET), IA64)
COMMON_COM_TARG_DIR	    = $(BUILD_TOT)/common/com/$(BUILD_TARGET_DIR)
COMMON_TARG_INFO_ACCESS_DIR = $(BUILD_TOT)/common/targ_info/access
COMMON_TARGINFO_CONFIG_DIR  = 
COMMON_TARGINFO_ISA_DIR     =
COMMON_UTIL_TARG_DIR	    = $(BUILD_TOT)/common/util/$(BUILD_TARGET_DIR)
endif
TARG_TARG_INFO_DIR	= $(TARGDIR)/targ_info

INCLUDE_DIR             = $(BUILD_AREA)/include \
                          $(BUILD_TOT)/../libspin

GNU_DIR			= $(FE_COM_DIR)/gnu
GNU_CONFIG_DIR		= $(BUILD_BASE)/gnu/config
GNU_COMMON_DIR          = $(BUILD_TOT)/gnu_common

GNU_TARG_DIR = $(GNU_DIR)/$(BUILD_TARGET_DIR)
GNU_CONFIG_TARG_DIR = $(GNU_CONFIG_DIR)/$(BUILD_TARGET_DIR)
ifeq ($(BUILD_TARGET), IA32)
GNU_CONFIG_TARG_DIR = $(GNU_CONFIG_DIR)/i386
endif
ifeq ($(BUILD_TARGET), MIPS)
GNU_CONFIG_TARG_DIR = $(GNU_CONFIG_DIR)/mips
endif

TARGINFO_PARSER_INC_DIR	  = $(BUILD_TOT)/targinfo/parser/inc
LIBAIR_DIR                = $(BUILD_TOT)/libair/air
FE_RECONF_DIR             = $(BUILD_TOT)/libfereconf
SPIN_DIR                  = $(BUILD_TOT)/libspin

TARG_COMUTIL_DIR        = $(TARGDIR)/libcomutil
TARG_CMPLRS_DIR         = $(TARGDIR)/libcmplrs
TARG_LIBIBERTY_DIR      = $(TARGDIR)/libiberty
TARG_LIBSYS_DIR	        = $(TARGDIR)/libSYS
TARG_LIBSPIN_DIR      	= $(TARGDIR)/libspin
TARG_LIBSPIN42_DIR      = $(TARGDIR)/libspin_4_2_0
TARG_LIBFERECONF_DIR    = $(TARGDIR)/libfereconf

# These are the directories in which to look for source files.

SRC_DIRS =              \
   $(FE_DIR)            \
   $(COMMON_COM_DIR)    \
   $(COMMON_COM_TARG_DIR)\
   $(COMMON_UTIL_DIR)   \
   $(COMMON_UTIL_TARG_DIR)\
   $(COMMON_TARG_INFO_ACCESS_DIR) \
   $(COMMON_TARGINFO_CONFIG_DIR)
INC_DIRS =              \
   $(INCLUDE_DIR)       \
   $(COMMON_COM_DIR)    \
   $(COMMON_COM_TARG_DIR)\
   $(COMMON_UTIL_DIR)   \
   $(COMMON_UTIL_TARG_DIR)\
   $(COMMON_TARG_INFO_ACCESS_DIR) \
   $(COMMON_TARGINFO_CONFIG_DIR) \
   $(COMMON_TARGINFO_ISA_DIR) \
   $(SPIN_DIR) \
   $(FE_DIR)            \
   $(GNU_DIR)		\
   $(GNU_TARG_DIR)	\
   $(GNU_CONFIG_DIR)	\
   $(GNU_CONFIG_TARG_DIR) \
   $(FE_RECONF_DIR) \
   $(TARG_TARG_INFO_DIR) \
   $(GNU_COMMON_DIR)/include \
   $(TARGINFO_PARSER_INC_DIR) \
   $(LIBAIR_DIR)

#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

FE_C_SRCS =             \
    main.c         	\
    varasm.c
#    c_int_model.c       

FE_CXX_SRCS =           \
    wgen_misc.cxx       \
    wgen_expr.cxx       \
    wgen_stmt.cxx       \
    wgen_decl.cxx       \
    wgen_dst.cxx        \
    wgen_spin_symbol.cxx \
    wgen_pragmas.cxx    \
    wgen_tracing.cxx

OPENMP_SRCS =           \
    omp_directive.cxx   \
    wgen_omp_check_stack.cxx \
    wgen_omp_directives.cxx

COMMON_COM_CXX_SRCS =

COMMON_COM_TARG_SRCS =

COMMON_COM_TARG_CXX_SRCS = 

FRONT_END_C_SRCS =              \
   $(COMMON_UTIL_SRCS)          \
   $(COMMON_COM_SRCS)           \
   $(COMMON_COM_TARG_SRCS)      \
   $(FE_C_SRCS)

FRONT_END_CXX_SRCS =            \
   $(COMMON_COM_CXX_SRCS)       \
   $(COMMON_COM_TARG_CXX_SRCS)  \
   $(FE_CXX_SRCS)

ifneq ($(TARGET_FROM_ST),)
FRONT_END_CXX_SRCS += $(OPENMP_SRCS)
endif

FRONT_END_C_OBJS = $(FRONT_END_C_SRCS:T:.c=.o)

FRONT_END_CXX_OBJS = $(FRONT_END_CXX_SRCS:T:.cxx=.o)

FRONT_END_OBJS = $(FRONT_END_C_OBJS) $(FRONT_END_CXX_OBJS)

CFILES = $(FRONT_END_C_SRCS)
CXXFILES = $(FRONT_END_CXX_SRCS)

VPATH    =  $(SRC_DIRS)

LCOPTS = $(STD_COMPILE_OPTS) $(STD_C_OPTS)
LCDEFS = $(HOSTDEFS) $(TARGDEFS)
LCINCS = $(addprefix -I, $(INC_DIRS))

LC++OPTS = $(STD_COMPILE_OPTS)
LC++DEFS = $(HOSTDEFS) $(TARGDEFS)
LC++INCS = $(addprefix -I, $(INC_DIRS))

LDIRT =

#+----------------------------------------------------------------------
#  Extra Rules
#----------------------------------------------------------------------
.c.E:
	$(CCF) -MDupdate /dev/null -E ${<} | sed -e '/^ *$$/d'  >${*F}.E

#------------------------------------------------------------
#  Define target
#------------------------------------------------------------

TARGETS = wgen$(HEXE)
LIBSPIN = libgspin.a

# Do not name the target: spin
# gfecc is what a -Yf,<path> would expect - so keep it that way

#----------------------------------------------------------------------
#  Variables describing additional sources, objects, and libraries
#----------------------------------------------------------------------
COMUTIL_OBJS = $(TARG_COMUTIL_DIR)/libcomutil.a
COMCOM_OBJS  = $( /libfereconf.a
###################################################################
# This was present in the original g++fe/Makefile.gbase
# LIBM_OBJS     = $(TARG_LIBM_DIR)/libm.a
###################################################################
CMPLRS_OBJS  = $(TARG_CMPLRS_DIR)/libcmplrs.a
LIBIBERTY_OBJS = $(TARG_LIBIBERTY_DIR)/libiberty.a
LIBSYS_OBJS = $(TARG_LIBSYS_DIR)/libSYS.a
#LIBSPIN_OBJS = $(BUILD_TOT)/../libspin/$(LIBSPIN)

LIBSPIN_OBJS = $(TARG_LIBSPIN_DIR)/libgspin.a
LIBTARGINFO = $(TARG_TARG_INFO_DIR)/libtarginfo.a
LIBFERECONF_OBJS = $(TARG_LIBFERECONF_DIR)/libfereconf.a

ifneq ($(HOST_OS),CYGWIN_NT)
ifneq ($(HOST_OS),MINGW)
# all we need is in libcygwin
WGEN_LDOPTS +=  -ldl
endif
endif

ifeq ($(HOST_OS), MINGW)
WGEN_LDOPTS += -lwsock32
endif

ifneq ($(BUILD_OS),DARWIN)
LLDOPTS = -Wl,--export-dynamic
endif
LLDLIBS = $(COMUTIL_OBJS) $(LIBSPIN_OBJS) $(LIBFERECONF_OBJS) $(LIBTARGINFO) $(COMUTIL_OBJS) $(LIBSYS_OBJS) $(LIBIBERTY_OBJS)
LLDLIBS += $(CMPLRS_OBJS)
LLDOPTS += -lm $(WGEN_LDOPTS)
LDIRT += $(TARGETS)

.PHONY: default first last install

#default: first $(TARGETS) last
default: first
	$(MAKE) local last

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is
#  built.
#----------------------------------------------------------------------
first:
ifndef SKIP_DEP_BUILD
 ifndef PARALLEL
  ifeq ($(BUILD_OS), LINUX)
	 $(call submake,$(BUILD_AREA)/include)
  endif
	$(call submake,$(TARG_CMPLRS_DIR))
	$(call submake,$(TARG_COMUTIL_DIR))
	$(call submake,$(TARG_LIBSYS_DIR))
	$(call submake,$(TARG_LIBIBERTY_DIR))
	$(call submake,$(TARG_LIBFERECONF_DIR))
	$(MAKE) $(LIBSPIN_OBJS)
 endif
endif

local:
	$(MAKE) $(TARGETS)

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is
#  built.
#----------------------------------------------------------------------
last: make_deps


install: default
	if [ ! -d $(STD_MONGOOSE_OS_LOC) ]; then $(STD_INSTALL) -d $(STD_MONGOOSE_OS_LOC); fi
	for h in $(TARGETS); do \
	    $(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) $$h $(STD_MONGOOSE_OS_LOC) ; \
	done

$(LIBSPIN_OBJS):
	$(call submake,$(TARG_LIBSPIN42_DIR))

$(TARGETS) : $(OBJECTS) $(LLDLIBS)
	$(CXX) -o $@ $(OBJECTS) $(LDFLAGS) $(LLDLIBS) $(WGEN_LDLIBS)
#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)

wn_util.o: HOSTDEFS += -DMONGOOSE_BE

ifeq ($(HOST_OS), MINGW)
# Fix a conflict between -DLONGLONG and a type name LONGLONG in some include files...
wgen_dst.o: HOSTDEFS += -ULONGLONG
endif
