#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for be
#

#----------------------------------------------------------------------
#  Information about Makefile
#
#  This Makefile is used to build the 32 bit host/target version of the
#  code generator.
#
#  *  This Makefile does not require that targ_info has already been built.
#
#  *  Because the Makefile removes temporary files that are in the
#     current directory (at startup and on interrupts) you can't
#     run two or more makes in the same directory at the same time.
#     (Perhaps, If I could force the temp files out to a temp directory,
#     this could be changed?)
#
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build.
#               e.q.  /d1/cmplrs.src/v4.00/host32
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)
CURDIR  = .

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARG_BE_DIR: is the be directory in which we do build... this can
#               be retargeted (e.g., for building be with different options)
#               by setting LOCAL_BE_DIR in localdefs
#  TARG_OPT_DIR: is the wopt directory in which we build wopt.so. This can
#               be retargeted (e.g., for building using opt_dev)
#               by setting LOCAL_WOPT_DIR in localdefs.  BE_OPT_DIR
#		later is similarly retarged based on LOCAL_OPT_DIR --
#		you should generally set them together.
#----------------------------------------------------------------------

TARG_BE_DIR = $(TARGDIR)/be
TARG_WOPT_DIR = $(TARGDIR)/wopt
TARG_CG_DIR = $(TARGDIR)/lai
TARG_TARG_INFO_DIR = $(TARGDIR)/targ_info
TARG_LIBINSTR_DIR = $(TARGDIR)/instrumentationC
TARG_WHIRL2C_DIR = $(TARGDIR)/whirl2c
TARG_WHIRL2F_DIR = $(TARGDIR)/whirl2f
TARG_PURPLE2_DIR = $(TARGDIR)/purple2
TARG_PROMPF_ANL_DIR = $(TARGDIR)/prompf_anl
TARG_IPL_DIR = $(TARGDIR)/ipl
TARG_LNO_DIR = $(TARGDIR)/lno
TARG_GCCFE_DIR = $(TARGDIR)/gccfe

TARG_INFO_INC_DIR = $(TARG_TARG_INFO_DIR)
TARG_INFO_LIB_DIR = $(TARG_TARG_INFO_DIR)


#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------
HOSTDEFS += -D_LEGO_CLONER
HOSTDEFS += -DBACK_END
HOSTDEFS += -Dlonglong
HOSTDEFS += -DSTD_MONGOOSE_LOC='"$(STD_MONGOOSE_LOC)"' -DMONGOOSE_BE
# need to define _LONGLONG and _SVR4_SOURCE to allow compilation with -ansi.
HOSTDEFS += -D_LONGLONG -D_SVR4_SOURCE
HOSTDEFS += -D_NEW_SYMTAB

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------

BE_DIR 			= $(BUILD_TOT)/be
BE_BE_DIR		= $(BE_DIR)/be
BE_COM_DIR 		= $(BE_DIR)/com
BE_REGION_DIR 		= $(BE_DIR)/region
BE_OPT_DIR 		= $(BE_DIR)/opt
BE_LNO_DIR		= $(BE_DIR)/lno
LIBINSTR_DIR		= $(BUILD_TOT)/instrumentation/libinstrC
BE_WHIRL2C_DIR		= $(BE_DIR)/whirl2c
BE_WHIRL2F_DIR		= $(BE_DIR)/whirl2f
BE_PURPLE2_DIR		= $(BE_DIR)/purple2
BE_PROMPF_ANL_DIR       = $(BE_DIR)/prompf_anl
BE_VHO_DIR		= $(BE_DIR)/vho
IPL_DIR			= $(BUILD_TOT)/ipa/local
IPA_DIR			= $(BUILD_TOT)/ipa/main/analyze
IPC_DIR			= $(BUILD_TOT)/ipa/common
COMMON_DIR 		= $(BUILD_TOT)/common
COMMON_COM_DIR 		= $(COMMON_DIR)/com
COMMON_UTIL_DIR		= $(COMMON_DIR)/util
COMMON_INSTR_DIR 	= $(BUILD_TOT)/common/instrument
GCCFE_GNU_TARG_DIR      = $(BUILD_TOT)/gccfe/gnu/$(BUILD_TARGET_DIR)
COMMON_APPLICONFIG_DIR 		= $(COMMON_DIR)/appliconfig

ifeq ($(BUILD_TARGET), IA64)
BE_BE_TARG_DIR		= $(BE_BE_DIR)/$(BUILD_TARGET_DIR)
BE_CG_DIR 		= $(BE_DIR)/cg
BE_COM_TARG_DIR		= $(BE_COM_DIR)/$(BUILD_TARGET_DIR)
COMMON_COM_TARG_DIR 	= $(COMMON_COM_DIR)/$(BUILD_TARGET_DIR)
COMMON_TARG_INFO_ISA_DIR= 
COMMON_TARG_INFO_ACCESS_DIR = $(COMMON_DIR)/targ_info/access
COMMON_UTIL_TARG_DIR 	= $(COMMON_UTIL_DIR)/$(BUILD_TARGET_DIR)
else
BE_BE_TARG_DIR		= $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/be
BE_COM_TARG_DIR		= 
BE_CG_DIR 		= $(BUILD_TOT)/lai
COMMON_TARG_INFO_ACCESS_DIR = $(BUILD_TOT)/targinfo/access
COMMON_TARG_INFO_ISA_DIR= $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/isa
COMMON_COM_TARG_DIR 	= $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
COMMON_UTIL_TARG_DIR 	= $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/util
endif
TARGINFO_PARSER_INC_DIR	= $(BUILD_TOT)/targinfo/parser/inc
LIBAIR_DIR           	= $(BUILD_TOT)/libair/air

# These are the directories in which to look for source files.

SRC_DIRS = \
  $(BE_COM_DIR)		\
  $(BE_COM_TARG_DIR)	\
  $(BE_REGION_DIR)	\
  $(BE_VHO_DIR)		\
  $(BE_LNO_DIR)		\
  $(COMMON_COM_DIR)	\
  $(COMMON_COM_TARG_DIR)\
  $(COMMON_TARG_INFO_ACCESS_DIR)\
  $(COMMON_UTIL_DIR)	\
  $(COMMON_UTIL_TARG_DIR)\
  $(BE_BE_DIR)		\
  $(BE_BE_TARG_DIR)	\
  $(COMMON_INSTR_DIR) \
  $(COMMON_APPLICONFIG_DIR)

HEADER_DIRS = \
  $(SRC_DIRS)		\
  $(COMMON_TARG_INFO_ACCESS_DIR)\
  $(COMMON_TARG_INFO_ISA_DIR)\
  $(TARG_INFO_INC_DIR)	\
  $(COMMON_UTIL_DIR)	\
  $(COMMON_APPLICONFIG_DIR) \
  $(CURDIR)		\
  $(BE_DIR)		\
  $(BE_COM_TARG_DIR)	\
  $(BE_CG_DIR)		\
  $(BE_OPT_DIR)		\
  $(BE_LNO_DIR)		\
  $(BE_REGION_DIR)	\
  $(LIBINSTR_DIR)	\
  $(BE_WHIRL2C_DIR)	\
  $(BE_WHIRL2F_DIR)	\
  $(BE_PURPLE2_DIR)	\
  $(BE_PROMPF_ANL_DIR)	\
  $(BE_VHO_DIR)		\
  $(IPL_DIR)	 	\
  $(IPA_DIR)		\
  $(IPC_DIR)		\
  $(COMMON_INSTR_DIR)   \
  $(TARGINFO_PARSER_INC_DIR) \
  $(LIBAIR_DIR)

HEADER_DIRS += $(TARGDIR)/include/libelf

# Next dir should be the last one, to avoid conflicts
# between header files with same name.
HEADER_DIRS += $(TARG_GCCFE_DIR) $(GCCFE_GNU_TARG_DIR)

#----------------------------------------------------------------------
# Build derived files
#
# Be sure to also add .c files to the DERIVED_SRCS list, and the 
# various include files to the DERIVED_INCS list
# 
#----------------------------------------------------------------------

DERIVED_SRCS += preg_list.cxx
DERIVED_INCS += preg_list.h
# remove all derived files with make clobber.
LDIRT += $(DERIVED_INCS) $(DERIVED_SRCS)

#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

BE_BE_CXX_SRCS = 	\
  cleanup.cxx		\
  fill_align.cxx        \
  mem_ctr.cxx           \
  dra_ec.cxx		\
  dra_file_util.cxx     \
  dra_clone.cxx     	\
  dra_mangle.cxx	\
  omp_lower.cxx		\
  privatize_common.cxx	\
  rewrite_pragmas.cxx	\
  wb_omp.cxx		\
  wb_lwr.cxx		\
  wb_anl.cxx

BE_BE_TARG_CXX_SRCS =	\
  fill_align_targ.cxx	\
  driver_targ.cxx

BE_REGION_CXX_SRCS = \
  ori.cxx		\
  rbi.cxx		\
  region_init.cxx	\
  region_bounds.cxx	\
  region_util.cxx

BE_VHO_CXX_SRCS = \
  f90_lower.cxx           \
  f90_lower_dep.cxx     \
  vho_lower.cxx		\
  wb_f90_lower.cxx	\

COMMON_COM_CXX_SRCS = \
  com_whirlview.cxx     \
  config.cxx		\
  config_cache.cxx	\
  dra_demangle.cxx	\
  dwarf_DST.cxx		\
  dwarf_DST_dump.cxx	\
  dwarf_DST_producer.cxx	\
  fb_info.cxx		\
  intrn_info.cxx	\
  ll.cxx		\
  mtypes.cxx		\
  opcode.cxx		\
  opcode_core.cxx	\
  wutil.cxx		\
  DaVinci.cxx           \
  dll_loader.cxx      \
  loader.cxx          \
  isa_loader.cxx      \
  lai_loader.cxx      \
  dyn_dll_api_access.cxx	\
  dyn_isa_api_access.cxx	\
  extension_intrinsic.cxx

COMMON_COM_PCH_CXX_SRCS = \
  const.cxx		\
  dwarf_DST_mem.cxx	\
  err_host.cxx		\
  f90_utils.cxx		\
  glob.cxx		\
  ir_bcom.cxx		\
  ir_bread.cxx		\
  ir_bwrite.cxx		\
  ir_reader.cxx		\
  irbdata.cxx		\
  pu_info.cxx		\
  strtab.cxx		\
  symtab.cxx		\
  symtab_verify.cxx	\
  ttype.cxx		\
  wn.cxx		\
  wn_map.cxx		\
  wn_pragmas.cxx	\
  wn_simp.cxx           \
  wn_util.cxx		\
  xstats.cxx

COMMON_COM_CXX_SRCS += $(COMMON_COM_PCH_CXX_SRCS)

COMMON_COM_TARG_SRCS =	\
  config_host.c		\
  config_platform.c

# there is no way to distinguish between config_targ.cxx and
# config_TARG.cxx on windows platforms... we must use a different name
# for ST targets...
ifneq ($(TARGET_FROM_ST),)
CONFIG_TARGET_NAME=config_target
else
CONFIG_TARGET_NAME=config_targ
endif

COMMON_COM_TARG_CXX_SRCS =	\
  config_cache_targ.cxx	\
  $(CONFIG_TARGET_NAME).cxx \
  config_elf_targ.cxx	\
  targ_const.cxx	\
  targ_sim.cxx

COMMON_TARG_INFO_ACCESS_SRCS=\
  ti_init.c		\
  ti_res.c		\
  ti_res_count.c	\
  ti_res_res.c

COMMON_UTIL_QUAD_SRCS =

COMMON_UTIL_SRCS =	\
  $(COMMON_UTIL_QUAD_SRCS)	\
  bitset.c		\
  dso.c			\
  file_util.c		\
  flags.c		\
  memory.c		\
  priority_queue.c	\
  resource.c		\
  tlog.c		\
  tracing.c		\
  util.c		\
  vstring.c		\
  hash.c		\
  array.c		\
  stacktrace.c		\
  elfr.c

COMMON_COM_SRC= 

BE_C_SRCS = \
  $(COMMON_TARG_INFO_ACCESS_SRCS)\
  $(COMMON_UTIL_SRCS)           \
  $(COMMON_COM_TARG_SRCS)       \
  $(COMMON_COM_SRC) 

BE_C_OBJS =  $(BE_C_SRCS:.c=.o)

BE_COM_CXX_SRCS = \
  be_util.cxx           \
  be_version.cxx        \
  cxx_base.cxx		\
  cxx_graph.cxx		\
  cxx_hash_util.cxx	\
  ipa_lno_file.cxx 	\
  ipa_lno_summary.cxx 	\
  ipa_lno_util.cxx	\
  mfmc_misc.cxx		\
  mfmc_query.cxx	\
  mfmc_setup.cxx	\
  mfmc_solve.cxx	\
  opt_addr_flags.cxx	\
  opt_cvtl_rule.cxx	\
  printsrc.cxx		\
  timing.cxx	 	\
  weak.cxx		\
  wn_instrument.cxx     \
  wn_coverage.cxx

BE_COM_PCH_CXX_SRCS = \
  be_symtab.cxx		\
  data_layout.cxx	\
  dep_graph.cxx		\
  dvector.cxx		\
  emulate.cxx		\
  fb_cfg.cxx		\
  fb_whirl.cxx		\
  opt_alias_mgr.cxx	\
  opt_alias_rule.cxx	\
  opt_goto.cxx		\
  opt_ipaa_io.cxx	\
  opt_points_to_non_template.cxx	\
  prompf.cxx		\
  standardize.cxx	\
  stblock.cxx		\
  w2op.cxx		\
  wb.cxx		\
  wb_browser.cxx	\
  wb_buffer.cxx		\
  wb_carray.cxx		\
  wb_ipl.cxx		\
  wb_util.cxx		\
  whirl2src.cxx		\
  wn_fio.cxx		\
  wn_lower.cxx		\
  u64_lower_wn.cxx	\
  wn_mp.cxx		\
  wn_mp_dg.cxx		\
  wn_verifier.cxx       \
  ext_lower.cxx         \
  $(DERIVED_SRCS)

GENERATED_FILES = \
  gcov-iov.h

# Add specific ST files
ifneq ($(TARGET_FROM_ST),)
BE_COM_PCH_CXX_SRCS += rt_lower_wn.cxx \
		       wn_lower_mul.cxx \
		       wn_lower_util.cxx \
                       mul_cost_model.cxx
endif

BE_COM_CXX_SRCS += $(BE_COM_PCH_CXX_SRCS)

BE_COM_TARG_CXX_SRCS = \
  targ_pattern_rec.cxx \
  betarget.cxx

# For ST targets renamed sections.cxx into targ_sections.cxx
ifneq ($(TARGET_FROM_ST),)
  BE_COM_TARG_CXX_SRCS += targ_sections.cxx
else
  BE_COM_TARG_CXX_SRCS += sections.cxx
endif

# Add specific ST files
ifneq ($(TARGET_FROM_ST),)
BE_COM_TARG_CXX_SRCS += targ_emulate.cxx
endif

BE_COM_CXX_SRCS +=	\
  clone.cxx		\
  clone_DST_utils.cxx	\


BE_LNO_CXX_SRCS = \
  soe.cxx \
  mat.cxx 

COMMON_UTIL_CXX_SRCS =  \
  cxx_memory.cxx	\
  errors.cxx		\
  options_stack.cxx     \
  lbrange.cxx             \
  lvrange.cxx             \
  larange.cxx             \
  lbvalrange.cxx             \
  range.cxx             \
  lbitmask.cxx          \
  lbitvalue.cxx          \
  lalign.cxx          \
  paired_lattice.cxx          \
  zint.cxx              \

INSTR_COM_CXX_SRCS = \
  instr_reader.cxx 

BE_CXX_SRCS = \
  $(BE_BE_CXX_SRCS)	\
  $(BE_BE_TARG_CXX_SRCS) \
  $(BE_COM_CXX_SRCS)	\
  $(COMMON_COM_CXX_SRCS) \
  $(COMMON_UTIL_CXX_SRCS) \
  $(BE_REGION_CXX_SRCS)	\
  $(BE_LNO_CXX_SRCS)	\
  $(BE_VHO_CXX_SRCS)    \
  $(BE_COM_TARG_CXX_SRCS) \
  $(COMMON_COM_TARG_CXX_SRCS) \
  $(INSTR_COM_CXX_SRCS)

ifeq ($(BUILD_VARIANT),RELEASE)
BE_CXX_SRCS += release.cxx
LDIRT += release.cxx
endif


BE_CXX_OBJS = $(BE_CXX_SRCS:.cxx=.o)

COMMON_UTIL_TARG_AS_SRCS =

BE_AS_OBJS = $(COMMON_UTIL_TARG_AS_SRCS:.s=.o)

#
# source files for be driver
#

BE_DRIVER_CXX_SRCS = \
  driver.cxx	        \
  driver_util.cxx	\
  iter.cxx	        \
  phase.cxx

BE_DRIVER_C_SRCS = 

COMMON_APPLICONFIG_C_SRCS = \
	appli_config_yacc.c \
	appli_config_lex.c

appli_config_yacc.h appli_config_yacc.c : $(COMMON_APPLICONFIG_DIR)/appli_config.yacc 
	$(YACC_NO) -d $(COMMON_APPLICONFIG_DIR)/appli_config.yacc -o appli_config_yacc.c

appli_config_lex.c : $(COMMON_APPLICONFIG_DIR)/appli_config.lex 
	$(LEX) -oappli_config_lex.c  $(COMMON_APPLICONFIG_DIR)/appli_config.lex


COMMON_APPLICONFIG_C_OBJS= $(COMMON_APPLICONFIG_C_SRCS:.c=.o) 
BE_DRIVER_CXX_OBJS = $(BE_DRIVER_CXX_SRCS:.cxx=.o) 
BE_DRIVER_C_OBJS = $(BE_DRIVER_C_SRCS:.c=.o) 
BE_DRIVER_OBJS = \
  $(BE_DRIVER_CXX_OBJS)	\
  $(BE_DRIVER_C_OBJS)   \
  $(COMMON_APPLICONFIG_C_OBJS)

# extra files to be removed with make clobber
LDIRT += ii_files so_locations  *.pch

LCINCS = $(addprefix -I, $(HEADER_DIRS))
LC++INCS = $(addprefix -I, $(HEADER_DIRS))
LASINCS = $(addprefix -I, $(HEADER_DIRS))

LCDEFS = $(HOSTDEFS) $(TARGDEFS)
LC++DEFS = $(HOSTDEFS) $(TARGDEFS)
LASDEFS =  $(HOSTDEFS) $(TARGDEFS)

ifneq ($(HOST_OS), CYGWIN_NT)
BE_DSO_LDLIBS =  -lm 
ifneq ($(HOST_OS), MINGW)
BE_DSO_LDLIBS +=  -ldl
BE_DRIVER_LDLIBS += -ldl
endif
endif


ifeq ($(BUILD_VARIANT), MEM_STATS)
LCDEFS += -DMEM_STATS
LC++DEFS += -DMEM_STATS
ifeq ($(HOST_OS), LINUX)
  LLDLIBS += -lefence
endif
ifeq ($(HOST_OS), SUNOS5)
  LLDLIBS += -lmalloc
endif
endif

# (cbr) conflict with gnu_common libraries
TARG_LIBELF = $(TARGDIR)/libelf
TARG_LIBELFUTIL = $(TARGDIR)/libelfutil
TARG_LIBDWARF = $(TARGDIR)/libdwarf
TARG_LIBUNWIND = $(TARGDIR)/libunwindP
TARG_LIBIBERTY = $(TARGDIR)/libiberty

# [CG]: stacktrace facility activated in debug mode
# for solaris target and linux target.
ifeq ($(BUILD_VARIANT), DEBUG)
ifeq ($(HOST_OS), SUNOS5)
LCDEFS+=-DSTACK_TRACE
LC++DEFS+=-DSTACK_TRACE
BE_DSO_LDLIBS += $(TARG_LIBELF)/libelf.a $(TARG_LIBIBERTY)/libiberty.a
endif
ifeq ($(HOST_OS), LINUX)
LCDEFS+=-DSTACK_TRACE
LC++DEFS+=-DSTACK_TRACE
BE_DSO_LDLIBS += $(TARG_LIBIBERTY)/libiberty.a
endif
endif

#----------------------------------------------------------------------
#  Define target
#----------------------------------------------------------------------

# build windows dll
ifeq ($(DSO_MODE), DLL)
 BE_SO = be.dll
endif
# build shared libraries
ifeq ($(DSO_MODE), SO)
 BE_SO = be.so 
endif

TARGETS = $(BE_SO) be$(HEXE)

#----------------------------------------------------------------------
# List all the required shared libraries
#----------------------------------------------------------------------

# We need to have one of the target .so's on the link line 
# while building cg.so . This is needed by the linker on linux.
# So, arbitrarily pick one of the target .so's to define TARGET_SO.
ifeq ($(BUILD_TARGET), MIPS)
TARGET_SO = r10000.so
LDIRT+= r4000.so r5000.so r8000.so
endif

ifeq ($(BUILD_TARGET), IA64)
TARGET_SO = itanium.so
endif

ifeq ($(BUILD_TARGET), IA32)
TARGET_SO = pentium.so
endif

ifneq ($(TARGET_FROM_ST),)
TARGET_SO =
endif

ifeq ($(DSO_MODE),SO)
 WOPT_SO=wopt.so
 CG_SO=cg.so
 LNO_SO=lno.so
 INSTR_SO=lib$(PREFIX)instrC.a
 WHIRL2C_SO=whirl2c.so
 WHIRL2F_SO=whirl2f.so
 PURPLE2_SO=purple2.so
 PROMPF_ANL_SO=prompf_anl.so
 IPL_SO=ipl.so
 INLINE_SO=inline.so
endif

ifeq ($(DSO_MODE),DLL)
 WOPT_SO=wopt_dll.a
 CG_SO=cg_dll.a
 LNO_SO=lno_dll.a
 INSTR_SO=lib$(PREFIX)instrC.a
 WHIRL2C_SO=whirl2c_dll.a
 WHIRL2F_SO=whirl2f_dll.a
 PURPLE2_SO=purple2_dll.a
 PROMPF_ANL_SO=prompf_anl_dll.a
 IPL_SO=ipl_dll.a
 INLINE_SO=inline_dll.a
endif

VPATH    =  $(SRC_DIRS)

default: first
	$(MAKE) local last

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is
#  built.
#----------------------------------------------------------------------
first:
## verify that the necessary stuff is up to date.
	cd $(BUILD_AREA)/include && $(MAKE)
	cd $(TARG_TARG_INFO_DIR) && $(MAKE)
	cd $(TARG_LIBINSTR_DIR) && $(MAKE) $(INSTR_SO)

#----------------------------------------------------------------------
# The commands in this section do not check the accuracy of
# library/includes coming from other modules...
#----------------------------------------------------------------------

first_local :
	if [ ! -h $(WOPT_SO) ]; then ln -sf $(TARG_WOPT_DIR)/$(WOPT_SO) .; fi
	if [ ! -h $(CG_SO) ]; then ln -sf $(TARG_CG_DIR)/$(CG_SO) .; fi
	if [ ! -h $(LNO_SO) ]; then ln -sf $(TARG_LNO_DIR)/$(LNO_SO) .; fi
	if [ ! -h $(INSTR_SO) ]; then ln -sf $(TARG_LIBINSTR_DIR)/$(INSTR_SO) .; fi
	if [ ! -h $(WHIRL2C_SO) ]; then ln -sf $(TARG_WHIRL2C_DIR)/$(WHIRL2C_SO) .; fi
	if [ ! -h $(WHIRL2F_SO) ]; then ln -sf $(TARG_WHIRL2F_DIR)/$(WHIRL2F_SO) .; fi
	if [ ! -h $(PURPLE2_SO) ]; then ln -sf $(TARG_PURPLE2_DIR)/$(PURPLE2_SO) .; fi
	if [ ! -h $(PROMPF_ANL_SO) ]; then ln -sf $(TARG_PROMPF_ANL_DIR)/$(PROMPF_ANL_SO) .; fi
	if [ ! -h $(IPL_SO) ]; then ln -sf $(TARG_IPL_DIR)/$(IPL_SO) .; fi

ifeq ($(BUILD_VARIANT),RELEASE)
release.cxx :
	echo "#include <stamp.h>                           " >> $@
	echo " // release.cxx file automatically generated " >> $@
	echo " const char *__Release_ID = RELEASE_ID;      " >> $@
endif

local: first_local derived_files $(GENERATED_FILES)
	$(MAKE) $(TARGETS)

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is
#  built.
#----------------------------------------------------------------------
last: local
	$(MAKE) make_deps


#----------------------------------------------------------------------
#  install target
#----------------------------------------------------------------------
install:: last
	if [ ! -d $(STD_MONGOOSE_OS_LOC) ]; then $(STD_INSTALL) -d $(STD_MONGOOSE_OS_LOC); fi
	for h in $(TARGETS); do \
	  $(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) $$h $(STD_MONGOOSE_OS_LOC); \
	done

#----------------------------------------------------------------------
#  Build 'be' executable
#----------------------------------------------------------------------

BE_DRIVER_OBJS += \
	$(TARGDIR)/libSYS/libSYS.a \
	$(TARGDIR)/libiberty/libiberty.a
BE_DRIVER_LDLIBS +=
BE_DRIVER_LDOPTS +=

ifeq ($(BUILD_OS),CYGWIN_NT)
SHELLNAME=sh
else
SHELLNAME=csh
endif

preg_list.cxx : preg_list.h
preg_list.h : $(COMMON_UTIL_DIR)/gen_x_list.csh                   \
$(BE_COM_DIR)/gen_preg_list.csh
	$(SHELLNAME) -f	$(BE_COM_DIR)/gen_preg_list.$(SHELLNAME) $(COMMON_UTIL_DIR)

# here's the target that gets made recursively
derived_files : $(DERIVED_SRCS) $(DERIVED_INCS)

LDIRT+= $(TARGET_SO) $(TARGETS) $(WOPT_SO) $(CG_SO) $(LNO_SO) $(WHIRL2C_SO)
LDIRT+= $(WHIRL2F_SO) $(PURPLE2_SO) $(PROMPF_ANL_SO) $(IPL_SO) $(INLINE_SO) $(INSTR_SO)

#
# Shared library SO build
#
ifeq ($(DSO_MODE),SO)
#
# Please conform to the standard EXE link pattern (see gcommondefs).
#
be$(HEXE) : $(BE_DRIVER_OBJS) $(BE_SO) 
	$(CXX) -o $@ $(BE_DRIVER_LDOPTS) $(LDOPTS) $(BE_DRIVER_OBJS) $(BE_SO) $(BE_DRIVER_LDLIBS) $(LDLIBS)
endif

#
# Windows DLL build
#
ifeq ($(DSO_MODE),DLL)

# import symbols from the be.dll
BE_DRIVER_DLLIMPORT_FLAGS += -DBE_EXPORTED=$(DLLIMPORT) -DCG_EXPORTED=

# nothing
BE_DRIVER_DLLIMPORT_FLAGS += -DW2C_EXPORTED=
BE_DRIVER_DLLIMPORT_FLAGS += -DW2F_EXPORTED=
BE_DRIVER_DLLIMPORT_FLAGS += -DOPT_EXPORTED=
BE_DRIVER_DLLIMPORT_FLAGS += -DTARGINFO_EXPORTED=
BE_DRIVER_DLLIMPORT_FLAGS += -DIPL_EXPORTED=
BE_DRIVER_DLLIMPORT_FLAGS += -DLNO_EXPORTED=

$(BE_DRIVER_CXX_OBJS) : %.o : %.cxx
	$(CXX) $(CXXFLAGS) $(BE_DRIVER_DLLIMPORT_FLAGS) $< -c -o $@

#
# Please conform to the standard EXE link pattern (see gcommondefs).
#
be$(HEXE): $(BE_DRIVER_OBJS) be_dll.a
	$(CXX) -o $@ $(BE_DRIVER_LDOPTS) $(LDOPTS) $(BE_DRIVER_OBJS) be_dll.a $(BE_DRIVER_LDLIBS) $(LDLIBS)
endif


#----------------------------------------------------------------------
#  Build 'be' library
#----------------------------------------------------------------------

BE_DSO_OBJS = $(BE_C_OBJS) $(BE_CXX_OBJS) $(BE_AS_OBJS) \
	$(TARGET_SO) \
	$(INSTR_SO) \
	$(TARG_INFO_LIB_DIR)/libtarginfo.a \
	$(TARGDIR)/libSYS/libSYS.a \
	$(TARGDIR)/libiberty/libiberty.a
BE_DSO_LDOPTS += 
BE_DSO_LDLIBS += 

#
# Shared library SO
#
# Please conform to the standard DSO link pattern (see gcommondefs).
#
# import global symbols from the target dll (e.g. st200.dll)
BE_DLLIMPORT_FLAGS += -DTARGINFO_EXPORTED=$(DLLIMPORT)
BE_DLLIMPORT_FLAGS += -DDLLIMPORT=$(DLLIMPORT)

# export symbols from the be dll
BE_DLLIMPORT_FLAGS += -DBE_EXPORTED=$(DLLEXPORT)

# do nothing with theses
BE_DLLIMPORT_FLAGS += -DOPT_EXPORTED=
BE_DLLIMPORT_FLAGS += -DW2C_EXPORTED=
BE_DLLIMPORT_FLAGS += -DW2F_EXPORTED=
BE_DLLIMPORT_FLAGS += -DCG_EXPORTED=
BE_DLLIMPORT_FLAGS += -DIPL_EXPORTED=
BE_DLLIMPORT_FLAGS += -DLNO_EXPORTED=

LCDEFS+=$(BE_DLLIMPORT_FLAGS)
LC++DEFS+=$(BE_DLLIMPORT_FLAGS)

ifeq ($(DSO_MODE),SO)
be.so: $(BE_DSO_OBJS)
	$(CXX) $(BE_DSO_LDOPTS) $(LDDSOOPTS) $(LDOPTS) $(BE_DSO_OBJS) $(BE_DSO_LDLIBS) $(LDLIBS) -o $@
endif

#
# Windows DLL
#
ifeq ($(DSO_MODE),DLL)

BE_DSO_OBS += be_DllMain.ho 
BE_DSO_LDOPTS +=
BE_DSO_LDLIBS +=

# workaround a syntax error that occurs in dlltool with symbols whose name
# are defined with the "const.cxx" string.
LDIRT + =constcxx
constcxx : const.cxx
	if [ ! -h $@ ]; then ln -sf $< $@; fi

const.o : constcxx
	$(C++F) $(C++OPTS) -x c++ $< -c -o $@
	rm $<

LDIRT += be.exp be_dll_entry.c be_tmp_C.a

$(BE_C_OBJS) : %.o : %.c
	$(CC) $(CFLAGS) $(BE_DLLIMPORT_FLAGS) $< -c -o $@

$(BE_CXX_OBJS) : %.o : %.cxx
	$(CXX) $(CXXFLAGS) $(BE_DLLIMPORT_FLAGS) $< -c -o $@

#
# Please conform to the standard DLL link pattern (see gcommondefs).
#
# Need to use an implicit rule for simultaneous multiple targets
# Rule for: be.dll
%.dll %_dll.a:  $(BE_DSO_OBJS)
	$(CXX) $(BE_DSO_LDOPTS) $(LDDSOOPTS) $(LDOPTS) $(BE_DSO_OBJS) $(BE_DSO_LDLIBS) $(LDLIBS) -o be.dll -Wl,--out-implib,be_dll.a -Wl,--image-base=0x65000000 
endif # DLL

#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)

#----------------------------------------------------------------------
#  GCOV specific build
#----------------------------------------------------------------------
# gcov-iov.c is run on the build machine to generate gcov-iov.h from version.c
gcov-iov.bo: gcov-iov.c gcov-version.c 
	$(BUILD_CC) -I$(COMMON_COM_DIR) $(BUILD_CFLAGS) -DGENERATOR_FILE $< -c -o $@

gcov-iov$(BEXE): gcov-iov.bo
	$(BUILD_CC) -o $@ $^ $(BUILD_LDFLAGS)

gcov-iov.h: s-iov
s-iov: gcov-iov$(BEXE) 
	./gcov-iov$(build_exeext) > gcov-iov.h
	touch s-iov

wn_coverage.o: $(GENERATED_FILES)

LDIRT+= s-iov *.s *.ii gcov-iov$(BEXE) *.bo *.i gcov-iov.h

