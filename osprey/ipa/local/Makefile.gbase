#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for ipl
#

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build.
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)
CURDIR  = .

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARG_BE_DIR: is the be directory with which we do build... this can
#               be retargeted (e.g., for building be with different options)
#               by setting LOCAL_BE_DIR in localdefs
#  TARG_OPT_DIR: is the opt directory with which we do build... this can
#               be retargeted (e.g., for building opt with different options)
#               by setting LOCAL_OPT_DIR in localdefs
#----------------------------------------------------------------------

ifeq ($(BUILD_COMPILER), EDG)
CVERSION  =  -xansi
endif

ifdef LOCAL_BE_DIR
TARG_BE_DIR = $(TARGDIR)/$(LOCAL_BE_DIR)
else
TARG_BE_DIR = $(TARGDIR)/be
endif
ifdef LOCAL_OPT_DIR
TARG_OPT_DIR = $(TARGDIR)/$(LOCAL_OPT_DIR)
else
TARG_OPT_DIR = $(TARGDIR)/wopt
endif


#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------
HOSTDEFS += -Dsgi -DMONGOOSE_BE
HOSTDEFS += -Dlonglong -DIPA_SUMMARY
# need to define _LONGLONG and _SVR4_SOURCE to allow compilation with -ansi.
HOSTDEFS += -D_LONGLONG -D_SVR4_SOURCE

ifeq ($(BUILD_OPTIMIZE), DEBUG)
HOSTDEFS += -DIs_True_On	
HOSTDEFS += -DInsist_On
endif

ifeq ($(DSO_MODE),DLL)
HOSTDEFS += -DBE_EXPORTED=$(DLLIMPORT)
HOSTDEFS += -DOPT_EXPORTED=$(DLLIMPORT)
HOSTDEFS += -DIPL_EXPORTED=$(DLLEXPORT)
HOSTDEFS += -DCG_EXPORTED=
HOSTDEFS += -DLNO_EXPORTED=	
endif

## should go away when elf.h is cleaned up 
ifeq ($(BUILD_TARGET), IA64)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_TARGET), IA32)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifneq ($(TARGET_FROM_ST),)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H
endif

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------
IPA_DIR                 = $(BUILD_TOT)/ipa
IPA_COMMON_DIR          = $(IPA_DIR)/common
IPA_LOCAL_DIR           = $(IPA_DIR)/local
IPA_MAIN_DIR            = $(IPA_DIR)/main
IPA_OPTIMIZE_DIR        = $(IPA_MAIN_DIR)/optimize
IPA_ANALYZE_DIR         = $(IPA_MAIN_DIR)/analyze
BE_DIR                  = $(BUILD_TOT)/be
BE_BE_DIR		= $(BE_DIR)/be
BE_CG_DIR               = $(BE_DIR)/cg
BE_COM_DIR              = $(BE_DIR)/com
BE_OPT_DIR              = $(BE_DIR)/opt
BE_LNOPT_DIR            = $(BE_DIR)/lno
BE_VHO_DIR		= $(BE_DIR)/vho
BE_REGION_DIR           = $(BE_DIR)/region
COMMON_DIR              = $(BUILD_TOT)/common
COMMON_COM_DIR          = $(COMMON_DIR)/com
LIBINSTR_DIR		= $(BUILD_TOT)/instrumentation/libinstrC

ifeq ($(BUILD_TARGET), IA64)
  COMMON_COM_TARG_DIR    = $(COMMON_COM_DIR)/$(BUILD_TARGET_DIR)
  BE_TARG_DIR            = $(BE_DIR)/$(BUILD_TARGET_DIR)
  COMMON_COM_TARG_DIR    = $(COMMON_COM_DIR)/$(BUILD_TARGET_DIR)
  COMMON_UTIL_TARG_DIR   = $(COMMON_UTIL_DIR)/$(BUILD_TARGET_DIR)
else
COMMON_COM_TARG_DIR    = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
BE_TARG_DIR            = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/be
COMMON_COM_TARG_DIR    = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
COMMON_UTIL_TARG_DIR   = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/util
endif

COMMON_UTIL_DIR         = $(COMMON_DIR)/util
INCLUDE_DIR             = $(ROOT)/usr/include

# These are the directories in which to look for source files.

SRC_DIRS = \
  $(IPA_COMMON_DIR)   \
  $(IPA_LOCAL_DIR)    \
  $(IPA_ANALYZE_DIR)  \
  $(BE_COM_DIR)   \
  $(BE_LNOPT_DIR) \

HEADER_DIRS = \
  $(SRC_DIRS)		\
  $(COMMON_COM_DIR)	\
  $(COMMON_COM_TARG_DIR)\
  $(COMMON_UTIL_DIR)	\
  $(COMMON_TDT_DIR)	\
  $(BE_COM_DIR)		\
  $(BE_OPT_DIR)		\
  $(BE_CG_DIR)		\
  $(BE_LNOPT_DIR)       \
  $(BE_VHO_DIR)		\
  $(BE_REGION_DIR)      \
  $(TARGDIR)/be         \
  $(LIBINSTR_DIR)	

IPA_LOCAL_CXX_SRCS = \
	loop_info.cxx \
	ipl_main.cxx \
	ipl_bread_write.cxx \
	ipl_summary_print.cxx \
	ipl_summarize_util.cxx \
	ipl_linex.cxx \
	ipl_array_bread_write.cxx \
	ipl_tlog.cxx \
	ipl_outline.cxx \
	init.cxx \
	ipl_elfsym.cxx

IPA_ANALYZE_SRCS = \

IPA_COMMON_SRCS = \

BE_COM_CXX_SRCS = \
   ipa_section.cxx \
   ipa_section_main.cxx \
   ipa_section_print.cxx \
   ipl_lno_util.cxx \
   reshape.cxx \
   wb_summary.cxx \
   wb_ipl_summary.cxx \
   ipa_cost_util.cxx \

BE_LNO_CXX_SRCS = \
   lwn_util.cxx \
   access_vector.cxx \
   if_info.cxx \
   lno_bv.cxx 

IPA_SRCS = \
   $(IPA_COMMON_SRCS) \
   $(IPA_ANALYZE_SRCS) \

IPA_CXX_SRCS = \
   $(IPA_LOCAL_CXX_SRCS)	\
   $(BE_LNO_CXX_SRCS) \
   $(BE_COM_CXX_SRCS) \

IPA_OBJS = $(IPA_SRCS:.c=.o)

IPA_CXX_OBJS = $(IPA_CXX_SRCS:.cxx=.o)

VPATH    =  $(SRC_DIRS)

LCOPTS = $(STD_COMPILE_OPTS)
LCDEFS = $(HOSTDEFS) $(TARGDEFS)
LCINCS = $(addprefix -I, $(HEADER_DIRS))

ifeq ($(BUILD_COMPILER), EDG)
LC++OPTS = $(STD_COMPILE_OPTS) $(STD_C++_OPTS) -fullwarn -woff 1171,1172,1174,1201,1209,1375
else
LC++OPTS = $(STD_COMPILE_OPTS) $(STD_C++_OPTS) 
endif

LC++DEFS = $(HOSTDEFS) $(TARGDEFS)
LC++INCS = $(LCINCS)
LASOPTS = $(STD_COMPILE_OPTS)
LASDEFS = $(HOSTDEFS) $(TARGDEFS)
LASINCS = $(LCINCS)

ifeq ($(BUILD_COMPILER), EDG)
WOFF = -fullwarn
endif

ifeq ($(BUILD_COMPILER), EDG)
DSOSTARTOPT = -check_registry $(TARG_BE_DIR)/so_locations -Wl,-no_unresolved
else
DSOSTARTOPT = 
endif

DSOSTARTOPT_32 = $(DSOSTARTOPT)
DSOSTARTOPT_N32 = $(DSOSTARTOPT)

ifeq ($(BUILD_VARIANT), MEM_STATS)
LCDEFS += -DMEM_STATS
LC++DEFS += -DMEM_STATS
LLDLIBS +=  -lmalloc
LDFLAGS += -lmalloc
endif

#----------------------------------------------------------------------
# File containing the list of symbols exported outside of ipl.so
#----------------------------------------------------------------------
ifeq ($(BUILD_COMPILER), EDG)
EXPORT_LIST = -exports_file $(IPA_LOCAL_DIR)/Exported
endif

ifeq ($(HOST_OS), MINGW)
LLDLIBS += $(BUILD_AREA)/libSYS/libSYS.a $(BUILD_AREA)/libiberty/libiberty.a
endif

#----------------------------------------------------------------------
# Libraries needed by the target
#----------------------------------------------------------------------

# shared libraries
ifeq ($(DSO_MODE),SO)
BE_DSO = be.so
WOPT_DSO = wopt.so
endif

# windows dll
ifeq ($(DSO_MODE),DLL)
BE_DSO = be_dll.a
WOPT_DSO = wopt_dll.a
endif

# static library
ifeq ($(DSO_MODE),STATIC)
BE_DSO = 
WOPT_DSO = 
endif

#----------------------------------------------------------------------
# Target definition
#----------------------------------------------------------------------
# shared libraries
ifeq ($(DSO_MODE),SO)
TARGETS = ipl.so
endif

# windows dll
ifeq ($(DSO_MODE),DLL)
TARGETS = ipl.dll
endif

# static library
ifeq ($(DSO_MODE),STATIC)
TARGETS = libipl.a
endif



LDIRT = $(BE_DSO) $(WOPT_DSO) be ipl$(HEXE) ii_files

ifeq ($(BUILD_COMPILER), EDG)
LLDLIBS = -none
endif

default: first
	$(MAKE) local last

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is
#  built.
#----------------------------------------------------------------------
first:
ifndef PARALLEL
ifneq ($(DSO_MODE),STATIC)
## verify that be.so and wopt.so are up to date
	cd $(TARG_BE_DIR) && $(MAKE)
	cd $(TARG_OPT_DIR) && $(MAKE)
endif
endif

#----------------------------------------------------------------------
# The commands in this section do not check the accuracy of
# library/includes coming from other modules...
#----------------------------------------------------------------------
first_local : 
ifneq ($(DSO_MODE),STATIC)
	if [ ! -h $(BE_DSO) ]; then ln -sf $(TARG_BE_DIR)/$(BE_DSO) .; fi
	if [ ! -h $(WOPT_DSO) ]; then ln -sf $(TARG_OPT_DIR)/$(WOPT_DSO) .; fi
endif

$(TARGETS): | first_local
local: $(TARGETS)

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is
#  built.
#----------------------------------------------------------------------
last: make_deps

#----------------------------------------------------------------------
#  install target
#----------------------------------------------------------------------
install:: last
ifneq ($(build_OS), IRIX)
	if [ ! -d $(STD_MONGOOSE_OS_LOC) ]; then $(STD_INSTALL) -d $(STD_MONGOOSE_OS_LOC); fi
	for h in $(TARGETS); do \
	    $(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) $$h $(STD_MONGOOSE_OS_LOC) ; \
	done
 ifeq  ($(HOST_OS), MINGW)
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) $(STD_MONGOOSE_OS_LOC)/be$(HEXE) $(STD_MONGOOSE_OS_LOC)/ipl$(HEXE)
 else
	if [ ! -h $(STD_MONGOOSE_OS_LOC)/ipl ]; then ln -sf be $(STD_MONGOOSE_OS_LOC)/ipl; fi
 endif
else	
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) -F $(STD_MONGOOSE_LOC) ipl.so
	$(STD_INSTALL) -lns be -F $(STD_MONGOOSE_LOC) ipl
 ifeq ($(BUILD_TYPE), SHARED)
 ifndef NOSYSGEN
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) -F /usr/cpu/sysgen/root$(STD_MONGOOSE_LOC) ipl.so
	$(STD_INSTALL) -lns be -F /usr/cpu/sysgen/root$(STD_MONGOOSE_LOC) ipl
 endif
 endif
endif


ipl$(HEXE): $(IPA_OBJS) $(IPA_CXX_OBJS) $(IPA_DSOS)
	$(C++F) -o $@ $(IPA_OBJS) $(IPA_CXX_OBJS) $(IPA_DSOS) $(LDFLAGS)
	if [ ! -l $(WOPT_DSO) ]; then ln -sf $(TARG_OPT_DIR)/$(WOPT_DSO) .; fi
	if [ ! -l $(BE_DSO) ]; then ln -sf $(TARG_BE_DIR)/$(BE_DSO) .; fi



LINK_DSOS = $(BE_DSO)

$(LINK_DSOS): first_local

#
# Shared library
#
ifeq ($(DSO_MODE),SO)
ipl.so: $(IPA_OBJS) $(IPA_CXX_OBJS) $(LINK_DSOS) \
		$(BE_BE_DIR)/so_locations $(IPA_LOCAL_DIR)/Exported
	$(C++F) -o $@  $(STD_DSO_LOADOPTS) $(EXPORT_LIST)	\
		$(IPA_OBJS) $(IPA_CXX_OBJS)			\
		$(LINK_DSOS) $(LLDLIBS)
	if [ ! -h $(WOPT_DSO) ]; then ln -sf $(TARG_OPT_DIR)/$(WOPT_DSO) .; fi
	if [ ! -h $(BE_DSO) ]; then ln -sf $(TARG_BE_DIR)/$(BE_DSO) .; fi
	if [ ! -h ipl$(HEXE) ]; then ln -sf ../be_driver/be ipl$(HEXE); fi
endif

#
# Windows DLL
#
ifeq ($(DSO_MODE),DLL)

# workaround a syntax error that occurs in dlltool with symbols whose name
# are defined with the "const.cxx" string.
LDIRT+= ipl_outlinecxx ipl_maincxx

ipl_outlinecxx : ipl_outline.cxx
	if [ ! -h $@ ]; then ln -sf $< $@; fi

ipl_maincxx : ipl_main.cxx
	if [ ! -h $@ ]; then ln -sf $< $@; fi

# We want the work-around to be active for gcc 3 or gcc 4 major
IPL_DSO_MODE_WA = $(strip $(subst 4, yes, $(subst 3, yes, $(GNU_VERSION))))

ifeq ($(IPL_DSO_MODE_WA),yes)

ipl_outline.o : ipl_outlinecxx
	$(C++F) $(C++OPTS) -MF $<.d -x c++ $< -c -o $@
	sed < ipl_outlinecxx.d > ipl_outline.d -e 's/ipl_outlinecxx.o/ipl_outline.o/'
	rm $<

ipl_main.o : ipl_maincxx
	$(C++F) $(C++OPTS) -MF $<.d -x c++ $< -c -o $@
	sed < ipl_maincxx.d > ipl_main.d -e 's/ipl_maincxx.o/ipl_main.o/'
	rm $<

else

ipl_outline.o : ipl_outlinecxx
	$(C++F) $(C++OPTS) -x c++ $< -c -o $@
	sed < ipl_outlinecxx.d > ipl_outline.d -e 's/ipl_outlinecxx.o/ipl_outline.o/'
	rm $<

ipl_main.o : ipl_maincxx
	$(C++F) $(C++OPTS)  -x c++ $< -c -o $@
	sed < ipl_maincxx.d > ipl_main.d -e 's/ipl_maincxx.o/ipl_main.o/'
	rm $<

endif

LDDSOOPTS+=$(LINK_DSOS) $(LLDLIBS)

ipl.dll ipl_dll.a : $(IPA_OBJS) $(IPA_CXX_OBJS)
	$(CXX) --shared -o ipl.dll -Wl,--out-implib,ipl_dll.a \
	$^ $(LDDSOOPTS) -Wl,--image-base=0x90000000

endif

#
# Static library
#
ifeq ($(DSO_MODE),STATIC)
libipl.a: $(IPA_OBJS) $(IPA_CXX_OBJS)
	$(AR) rc $@ $^
endif

#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)

