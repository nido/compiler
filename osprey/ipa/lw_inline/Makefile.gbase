#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for inline
#

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build.
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)
CURDIR  = .

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARG_BE_DIR: is the be directory with which we do build... this can
#               be retargeted (e.g., for building be with different options)
#               by setting LOCAL_BE_DIR in localdefs
#----------------------------------------------------------------------
ifdef LOCAL_BE_DIR
CVERSION  =  -xansi
TARG_BE_DIR = $(TARGDIR)/$(LOCAL_BE_DIR)
else
TARG_BE_DIR = $(TARGDIR)/be
endif

#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------
HOSTDEFS += -Dsgi -DMONGOOSE_BE -D_LIGHTWEIGHT_INLINER
HOSTDEFS += -Dlonglong
# need to define _LONGLONG and _SVR4_SOURCE to allow compilation with -ansi.
HOSTDEFS += -D_LONGLONG -D_SVR4_SOURCE
HOSTDEFS += -D_NEW_SYMTAB

ifeq ($(BUILD_OPTIMIZE), DEBUG)
HOSTDEFS += -DIs_True_On
HOSTDEFS += -DInsist_On
#HOSTDEFS += -DIPA_DEBUG
endif

ifeq ($(DSO_MODE),DLL)
# import
HOSTDEFS += -DBE_EXPORTED=$(DLLIMPORT)
HOSTDEFS += -DOPT_EXPORTED= -DCG_EXPORTED= -DIPL_EXPORTED= -DLNO_EXPORTED=
endif

##
## Defining the back-end library
##

# shared library 
ifeq ($(DSO_MODE),SO)
BE_DSO=be.so
endif
# import library (win32 platforms)
ifeq ($(DSO_MODE),DLL)
BE_DSO=be_dll.a
endif
# static build of the back-end
ifeq ($(DSO_MODE),STATIC)
BE_DSO=libbe.a
endif

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------
IPA_DIR                 = $(BUILD_TOT)/ipa
IPA_COMMON_DIR          = $(IPA_DIR)/common
IPA_LOCAL_DIR           = $(IPA_DIR)/local
IPA_MAIN_DIR            = $(IPA_DIR)/main
IPA_OPTIMIZE_DIR        = $(IPA_MAIN_DIR)/optimize
IPA_ANALYZE_DIR         = $(IPA_MAIN_DIR)/analyze
IPA_INLINE_DIR          = $(IPA_DIR)/inline
BE_DIR                  = $(BUILD_TOT)/be
BE_MIPS_DIR             = $(BE_DIR)/MIPS
BE_CG_DIR               = $(BE_DIR)/cg
BE_COM_DIR              = $(BE_DIR)/com
BE_LNO_DIR              = $(BE_DIR)/lno
BE_REGION_DIR           = $(BE_DIR)/region
BE_OPT_DIR              = $(BE_DIR)/opt
BE_VHO_DIR              = $(BE_DIR)/vho
GNU_DIR                 = $(BUILD_TOT)/gccfe/gnu
COMMON_DIR              = $(BUILD_TOT)/common
COMMON_COM_DIR          = $(COMMON_DIR)/com
COMMON_LIB_DIR          = $(COMMON_DIR)/lib
COMMON_UTIL_DIR         = $(COMMON_DIR)/util
LD_DIR			= $(BUILD_TOT)/fake_ld
LD_COMMON_DIR		= $(LD_DIR)/common
INCLUDE_DIR             = $(ROOT)/usr/include
LIBINSTR_DIR		= $(BUILD_TOT)/instrumentation/libinstrC

ifeq ($(BUILD_TARGET), IA64)
  COMMON_COM_TARG_DIR 	= $(COMMON_COM_DIR)/$(BUILD_TARGET_DIR)
  COMMON_UTIL_TARG_DIR 	= $(COMMON_UTIL_DIR)/$(BUILD_TARGET_DIR)
else
  # ST targets
  COMMON_COM_TARG_DIR 	  = $(BUILD_TOT)/targinfo/$(BUILD_TARGET_DIR)/config
endif

# These are the directories in which to look for source files.

SRC_DIRS = \
  $(IPA_COMMON_DIR)   \
  $(IPA_LOCAL_DIR)    \
  $(IPA_ANALYZE_DIR)  \
  $(IPA_OPTIMIZE_DIR) \
  $(IPA_INLINE_DIR) \
  $(COMMON_COM_DIR) \
  $(BE_COM_DIR) \
  $(BE_REGION_DIR) \
  $(BE_OPT_DIR) \
  $(BE_LNO_DIR)

HEADER_DIRS = \
  $(SRC_DIRS)		\
  $(COMMON_COM_TARG_DIR) \
  $(COMMON_UTIL_DIR)	\
  $(TARGDIR)/be		\
  $(BE_VHO_DIR)	        \
  $(LIBINSTR_DIR)	\
  $(LD_COMMON_DIR)	\
  $(TARGDIR)/include/libelf

#  $(GNU_DIR)            \

IPA_INLINE_CXX_SRCS = \
	inline_driver.cxx \
        inline_stub.cxx \
        inline.cxx \
	inline_utils.cxx \
	timelib.cxx \

IPA_LOCAL_CXX_SRCS = \
       ipl_summarize_util.cxx \

IPA_ANALYZE_CXX_SRCS = \
	ip_graph_trav.cxx \
	ipa_cg.cxx \
	ipa_inline.cxx \
	ipa_nested_pu.cxx \
	ipa_summary.cxx \


IPA_OPTIMIZE_CXX_SRCS =	\
	ipo_tlog_utils.cxx \
        ipo_inline_util.cxx \
        ipo_inline.cxx \
        ipo_clone.cxx \



IPA_OPTIMIZE_SRCS = \
	ipo_parent.c 

IPA_COMMON_CXX_SRCS = \
	ipc_bread.cxx \
	ipc_file.cxx \
	ip_graph.cxx \
	ipc_option.cxx \
	ipc_utils.cxx \

BE_COM_CXX_SRCS = \
	cxx_template.cxx \
	clone.cxx	\
        ipl_lno_util.cxx \


BE_LNO_CXX_SRCS = \
	lwn_util.cxx \

COMMON_COM_CXX_SRCS = \
#        dwarf_DST.cxx      \
#        dwarf_DST_mem.cxx       \
#        dwarf_DST_producer.cxx  \

IPA_SRCS = \
   $(IPA_LOCAL_SRCS) \
   $(IPA_ANALYZE_SRCS) \
   $(IPA_OPTIMIZE_SRCS) \

IPA_CXX_SRCS = \
   $(IPA_LOCAL_CXX_SRCS) \
   $(IPA_COMMON_CXX_SRCS) \
   $(IPA_ANALYZE_CXX_SRCS) \
   $(IPA_INLINE_CXX_SRCS) \
   $(IPA_OPTIMIZE_CXX_SRCS) \
   $(COMMON_COM_CXX_SRCS) \
   $(BE_COM_CXX_SRCS) \
   $(BE_LNO_CXX_SRCS) \

IPA_OBJS = $(IPA_SRCS:.c=.o)

IPA_CXX_OBJS = $(IPA_CXX_SRCS:.cxx=.o)

ifeq ($(BUILD_COMPILER), EDG)
WOFF = -fullwarn -woff 1171,1172,1174,1201,1209,1375 -LANG:packed=on
else
WOFF =
endif

VPATH    =  $(SRC_DIRS)

LCOPTS = $(STD_COMPILE_OPTS)
LCDEFS = $(HOSTDEFS) $(TARGDEFS)
LCINCS = $(addprefix -I, $(HEADER_DIRS))
LC++OPTS = $(STD_COMPILE_OPTS) $(STD_C++_OPTS) $(WOFF)
LC++DEFS = $(HOSTDEFS) $(TARGDEFS)
LC++INCS = $(LCINCS)
LASOPTS = $(STD_COMPILE_OPTS)
LASDEFS = $(HOSTDEFS) $(TARGDEFS)
LASINCS = $(LCINCS)

LDFLAGS += -lm

ifeq ($(HOST_OS), MINGW)
IPADEPLIBS += $(BUILD_AREA)/libSYS/libSYS.a $(BUILD_AREA)/libiberty/libiberty.a
endif

TARGETS = lw_inline$(HEXE)

LDIRT = be.so ii_files

ifeq ($(BUILD_OS), IRIX)
LLDLIBS = -lmangle -lgen
else
LLDLIBS = 
endif

default: first
	$(MAKE) local last

$(TARGETS): | first_local
local: $(TARGETS)

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is
#  built.
#----------------------------------------------------------------------
first:
ifndef PARALLEL
	cd $(TARG_BE_DIR) && $(MAKE)
endif

first_local :
	if [ ! -h $(BE_DSO) ]; then ln -sf $(TARG_BE_DIR)/$(BE_DSO) .; fi

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is
#  built.
#----------------------------------------------------------------------
last: make_deps

install:: last
ifneq ($(BUILD_OS), IRIX)
	if [ ! -d $(STD_MONGOOSE_OS_LOC) ]; then $(STD_INSTALL) -d $(STD_MONGOOSE_OS_LOC); fi
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) lw_inline$(HEXE) $(STD_MONGOOSE_OS_LOC) ;
	mv $(STD_MONGOOSE_OS_LOC)/lw_inline$(HEXE) $(STD_MONGOOSE_OS_LOC)/inline$(HEXE)

else 
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) -F $(STD_MONGOOSE_LOC) lw_inline
 ifeq ($(BUILD_TYPE), SHARED)
 ifndef NOSYSGEN
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) -F /usr/cpu/sysgen/root$(STD_MONGOOSE_LOC) lw_inline
 endif
 endif
endif


$(BE_DSO): | first_local

ifneq ($(DSO_MODE),STATIC)
#
# Shared library build (Unix .so or Windows .dll)
#

lw_inline$(HEXE): $(IPA_OBJS) $(IPA_CXX_OBJS) $(IPADEPLIBS) $(BE_DSO)
	$(C++F) -o $@ $(IPA_OBJS) $(IPA_CXX_OBJS) $(IPADEPLIBS) $(BE_DSO) $(LDFLAGS)

else
#
# Build using a static be library
#

###### to be done... (probably a lot of undefined symbols coming from
###### libbe.a that must be worked arround...)
lw_inline$(HEXE): $(IPA_OBJS) $(IPA_CXX_OBJS) $(IPADEPLIBS) $(BE_DSO)
	$(C++F) -o $@ $(IPA_OBJS) $(IPA_CXX_OBJS) $(IPADEPLIBS) $(BE_DSO) $(LDFLAGS)
endif

# (cbr) default flags
#ifeq ($(BUILD_OS), LINUX)
# inline.o: $(IPA_INLINE_DIR)/inline.cxx
# 	$(C++F) -c -O0 $(IPA_INLINE_DIR)/inline.cxx
#endif

#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)
