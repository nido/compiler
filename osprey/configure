#!/bin/sh
#
# configure
#
# configure script for the open64 build
#
#
 
#
# Utilitary functions
# The main processing is below all function declarations
#

var_assign() {
# Assigns a value to a variable
# usage: var_assign <varname>
    var=$1
    eval value=\'$2\'
    eval _res=\${var_declared_${var}}
    if [ x$_res = x1 ]; then
	eval var_val_${var}=\'${value}\'
	eval var_defined_${var}=1
    else
	echo "$0: warning: ${var} variable unknown to configure, ignored."
    fi
}

subst_decl() {
# Declare a variable to be substituted
# Adds the variable to the subst_vars list
# usage: subst_decl <varname> [<default_value>]
    var=$1
    eval def_val=\'$2\'
    eval var_default_${var}=\'${def_val}\'
    eval var_declared_${var}=1
    subst_vars="${subst_vars} ${var}"
}

subst_var_assign() {
# Assign the final value for the variable
# usage: subst_var_assign <varname>
    var=$1
    eval _res=\${var_defined_${var}}
    if [ x$_res = x1 ]; then
	eval _res=\${var_val_${var}}
	eval var_subst_${var}=\'$_res\'
    else
	eval _res=\${var_default_${var}}
	eval var_subst_${var}=\'$_res\'
    fi
}

subst_all_assign() {
# Assigns all declared variables their final value
# usage: subst_all_assign
    if [ "${subst_vars}" != "" ]; then
	for i in ${subst_vars}; do
	    subst_var_assign $i
	done
    fi
}

subst_var_print() {
# Prints the variable assignment
# usage: subst_var_print <varname>
    var=$1
    eval _res=\${var_subst_${var}}
    echo ${var}=\'${_res}\'
}

subst_all_print() {
# Print all declared variables subsititutions
# usage: subst_all_print
    if [ "${subst_vars}" != "" ]; then
	for i in ${subst_vars}; do
	    subst_var_print $i
	done
    fi
}

subst_var_to_sed() {
# Create a sed command for the substitution
# usage: subst_var_to_sed <varname>
    var=$1
    eval _res=\${var_subst_${var}}
    eval _res=\'s!@${var}@!${_res}!g\'
}

subst_all_to_sed() {
# Create the full sed arguments for all the variables substitutions
# The created arguments can only be expanded once (due to quote passing)
# The arguments are available in subst_sed_args
# usage: subst_all_to_sed
    if [ "${subst_vars}" != "" ]; then
	subst_sed_args=""
	for i in ${subst_vars}; do
	    subst_var_to_sed $i
	    subst_sed_args="$subst_sed_args -e '${_res}'"
	done
    else
	subst_sed_args="-e 's/^//'"
    fi
}

#
# Default settings for internal variables
#
thispath=`dirname $0`		# path to this osprey/configure program
absthispath=`cd $thispath;pwd`  # absolute path to this configure program
thisprg=`basename $0`		# program name
absbuildpath=`pwd`		# absolute path to working dir
makepath=${thispath}/make	# path to the osprey/make directory
verbose=1			# verbose level

# Do not allow configuring directly in the top directory
if [ $absthispath = $absbuildpath ]; then
    echo "$0: can't configure in the top level source directory" >&2
    exit 1
fi

# Do not allow absolute configure path
case $thispath in
    /*) \
	echo "$0: configure must be called with a relative path" >&2
	exit 1
	;;
esac

#
# Default settings for user variables
#
BUILD=default
PLATFORMS=default
TOOLDEFS=default
SITE=${ST_SITE:-default}

#
# Declare makefile variables to substitute and default values
# Add here any variable you want substituted in the makefile fragments
#
subst_decl ROOT '$(BUILD_AREA)/devimage'
subst_decl SUBDIRS "include targ_info libiberty libelf libelfutil libdwarf libSYS libcmplrs libcomutil instrumentationC gccfe g++fe wopt be lai ipl ipa lno lw_inline whirl2c ir_tools driver"

#
# First creates config.status
#
cat >config.status <<EOF
#!/bin/sh
$0 \\
EOF
if [ x$1 != x ]; then
  for i in ${1+"$@"}; do
    echo \'$i\' \\ >>config.status
  done
fi
echo >>config.status
chmod 755 config.status

#
# Parse command line
#
while [ $# != 0 ]; do
  case "$1" in
      -v) \
	  verbose=`expr $verbose + 1`
	  ;;
      BUILD=*|PLATFORMS=*|TOOLDEFS=*|SITE=*) \
	  var=`echo $1 | sed 's!=.*$!!'`
	  value=`echo $1 | sed 's!^.*=!!'`
	  eval ${var}=\'${value}\'
	  ;;
      *=*) \
	  var=`echo $1 | sed 's!=.*$!!'`
	  value=`echo $1 | sed 's!^.*=!!'`
	  eval var_assign ${var} \'${value}\'
	  ;;
      *)  \
	  echo "$0: unrecognized option: $1" >&2
	  exit 1
	  ;;
  esac
  shift
done

if [ x$PLATFORMS = xdefault ]; then
    echo "$0: missing PLATFORMS=[<build>-]<host>-<target> configuration" >&2
    exit 1
fi

#
# Assign all substitutions and get sed arguments
#
subst_all_assign
subst_all_to_sed

# Verbose output
if [ $verbose -ge 1 ]; then
    echo "Configuring for:"
    echo "BUILD=$BUILD"
    echo "PLATFORMS=$PLATFORMS"
    echo "TOOLDEFS=$TOOLDEFS"
    echo "SITE=$SITE"
    subst_all_print
fi


#
# Create the three top level Makefile fragments from the given
# BUILD, PLATFORMS, TOOLDEFS and SITE configurations.
#
files_to_copy="$makepath/build/$BUILD/Makefile.build"
files_to_copy="$files_to_copy $makepath/platforms/$PLATFORMS/Makefile.platforms"
files_to_copy="$files_to_copy $makepath/tooldefs/$TOOLDEFS/Makefile.tooldefs"
files_to_copy="$files_to_copy $makepath/sitedefs/$SITE/Makefile.sitedefs"
for i in $files_to_copy; do
    base=`basename $i`
    if [ ! -f $i ]; then
	echo "$0: missing configuration file: $i">&2
	exit 1
    fi
    if [ $verbose -ge 1 ]; then
	echo "Creating configuration file: $base"
    fi
    eval sed  ${subst_sed_args} <$i >$base
    if [ $? != 0 ]; then
	echo "$0: error while copying $i: aborting">&2
	exit 1
    fi
done

#
# From the value of he SUBDIRS variable, we guess the diretories
# to configure. There is a special case for gccfe/g++fe that each require
# an additional subdir level for the gnu directory
#
conf_subdirs=""
for i in ${var_subst_SUBDIRS}; do
    conf_subdirs="${conf_subdirs} $i"
    case $i in
	gccfe) conf_subdirs="$conf_subdirs $i/gnu"
	;;
    esac
done

#
# Now for each configure level subdirs, 
# create the Makefile from Makefile.sub.in.
#
input=${makepath}/template/Makefile.sub.in
if [ ! -f $input ]; then
    echo "$0: missing configuration file: $input">&2
    exit 1
fi
for i in $conf_subdirs; do
    if [ ! -d $i ]; then
	mkdir $i || exit 1
    fi
    if [ $verbose -ge 1 ]; then
	echo "Creating subdir makefile: $i/Makefile"
    fi

    #
    # BUILD_MOD variable is specific to subdirs makefiles and declares
    # the module name
    BUILD_MOD=`echo $i | sed 's!/!_!g'`

    #
    # For the specific variables BUILD_AREA (where the compiler is built)
    # and BUILD_TOT (where the sources are located) we need to
    # account for the subdirs level in the case where they are relative
    # paths.
    case $i in 
	*/*) BUILD_AREA=../..
	    BUILD_TOT=../../$thispath
	    ;;
	*) BUILD_AREA=..
	    BUILD_TOT=../$thispath
	    ;;
    esac
    eval sed -e \'s!@BUILD_MOD@!${BUILD_MOD}!\' \
	-e \'s!@BUILD_AREA@!${BUILD_AREA}!\' \
	-e \'s!@BUILD_TOT@!${BUILD_TOT}!\' \
	${subst_sed_args} \
	<$input >$i/Makefile
    if [ $? != 0 ]; then
	echo "$0: error while creating $i/Makefile" >&2
	exit 1
    fi
done

#
# Finally, create the top level Makefile from Makefile.in.
#
input=${makepath}/template/Makefile.in
if [ ! -f $input ]; then
    echo "$0: missing configuration file: $input">&2
    exit 1
fi
if [ $verbose -ge 1 ]; then
    echo "Creating top level makefile: Makefile"
fi
eval sed \
    ${subst_sed_args} \
    < $input >Makefile
if [ $? != 0 ]; then
    echo "$0: error while creating Makefile" >&2
    exit 1
fi
