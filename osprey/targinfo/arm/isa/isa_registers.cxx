/* -- This file is automatically generated -- */ 
/* 

  Copyright (C) 2002, 2004 ST Microelectronics, Inc.  All Rights Reserved. 

  This program is free software; you can redistribute it and/or modify it 
  under the terms of version 2 of the GNU General Public License as 
  published by the Free Software Foundation. 
  This program is distributed in the hope that it would be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 

  Further, this software is distributed without any warranty that it is 
  free of the rightful claim of any third person regarding infringement 
  or the like.  Any license provided herein, whether implied or 
  otherwise, applies only to this software file.  Patent licenses, if 
  any, provided herein do not apply to combinations of this program with 
  other software, or any other product whatsoever. 
  You should have received a copy of the GNU General Public License along 
  with this program; if not, write the Free Software Foundation, Inc., 59 
  Temple Place - Suite 330, Boston MA 02111-1307, USA. 

  Contact information:  ST Microelectronics, Inc., 
  , or: 

  http://www.st.com 

  For further information regarding this notice, see: 

  http: 
*/ 

// AUTOMATICALLY GENERATED FROM MDS DATA BASE !!! 

//  
//  Generate ISA registers information 
/////////////////////////////////////// 

#include <stddef.h>
#include "isa_registers_gen.h" 
#include "targ_isa_subset.h"

static const char *cpsr_reg_names[] = {
"cpsr"
};

static const char *integer_reg_names[] = {
"r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "ip", "sp", "lr", "pc"
};

static const char *paired_reg_names[] = {
"r0", "r2", "r4", "r6", "r8", "r10"
};

static const char *spsr_reg_names[] = {
"spsr"
};

static const char *cpsrc_reg_names[] = {
"cpsrC"
};

static const char *cpsrcond_reg_names[] = {
"cpsrCOND"
};

static const char *cpsrcontrol_reg_names[] = {
"cpsrCONTROL"
};

static const char *cpsrext_reg_names[] = {
"cpsrEXT"
};

static const char *cpsrflags_reg_names[] = {
"cpsrFLAGS"
};

static const char *cpsrge_reg_names[] = {
"cpsrGE"
};

static const char *cpsrge0_reg_names[] = {
"cpsrGE0"
};

static const char *cpsrge1_reg_names[] = {
"cpsrGE1"
};

static const char *cpsrge2_reg_names[] = {
"cpsrGE2"
};

static const char *cpsrge3_reg_names[] = {
"cpsrGE3"
};

static const char *cpsrj_reg_names[] = {
"cpsrJ"
};

static const char *cpsrmode_reg_names[] = {
"cpsrMODE"
};

static const char *cpsrnz_reg_names[] = {
"cpsrNZ"
};

static const char *cpsrnzc_reg_names[] = {
"cpsrNZC"
};

static const char *cpsrq_reg_names[] = {
"cpsrQ"
};

static const char *cpsrstatus_reg_names[] = {
"cpsrSTATUS"
};

static const char *cpsrt_reg_names[] = {
"cpsrT"
};

static const char *lr_reg_names[] = {
"lr"
};

static const char *nopc_reg_names[] = {
"r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "ip", "sp", "lr"
};

static const char *pairedfirst_reg_names[] = {
"r0", "r2", "r4", "r6", "r8", "r10"
};

static const char *pairedsecond_reg_names[] = {
"r1", "r3", "r5", "r7", "r9", "r11"
};

static const char *pc_reg_names[] = {
"pc"
};

static const char *spsrcontrol_reg_names[] = {
"spsrCONTROL"
};

static const char *spsrext_reg_names[] = {
"spsrEXT"
};

static const char *spsrflags_reg_names[] = {
"spsrFLAGS"
};

static const char *spsrstatus_reg_names[] = {
"spsrSTATUS"
};

static const char *spsrt_reg_names[] = {
"spsrT"
};

static const int cpsr_cpsrc[] = {0};

static const int cpsr_cpsrcond[] = {0};

static const int cpsr_cpsrcontrol[] = {0};

static const int cpsr_cpsrext[] = {0};

static const int cpsr_cpsrflags[] = {0};

static const int cpsr_cpsrge[] = {0};

static const int cpsr_cpsrge0[] = {0};

static const int cpsr_cpsrge1[] = {0};

static const int cpsr_cpsrge2[] = {0};

static const int cpsr_cpsrge3[] = {0};

static const int cpsr_cpsrj[] = {0};

static const int cpsr_cpsrmode[] = {0};

static const int cpsr_cpsrnz[] = {0};

static const int cpsr_cpsrnzc[] = {0};

static const int cpsr_cpsrq[] = {0};

static const int cpsr_cpsrstatus[] = {0};

static const int cpsr_cpsrt[] = {0};

static const int integer_lr[] = {14};

static const int integer_nopc[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};

static const int integer_pairedfirst[] = {0, 2, 4, 6, 8, 10};

static const int integer_pairedsecond[] = {1, 3, 5, 7, 9, 11};

static const int integer_pc[] = {15};

static const int spsr_spsrcontrol[] = {0};

static const int spsr_spsrext[] = {0};

static const int spsr_spsrflags[] = {0};

static const int spsr_spsrstatus[] = {0};

static const int spsr_spsrt[] = {0};

main() 
{ 

  ISA_Registers_Begin("arm"); 

  ISA_REGISTER_CLASS rc_cpsr = ISA_Register_Class_Create("cpsr", 32, false, true, false);
  ISA_Register_Set(rc_cpsr, 0, 0, NULL, cpsr_reg_names,
    (1 << (int)ISA_SUBSET_armv5e) | (1 << (int)ISA_SUBSET_armv6));

  ISA_REGISTER_CLASS rc_integer = ISA_Register_Class_Create("integer", 32, false, true, false);
  ISA_Register_Set(rc_integer, 0, 15, NULL, integer_reg_names,
    (1 << (int)ISA_SUBSET_armv5e) | (1 << (int)ISA_SUBSET_armv6));

  ISA_REGISTER_CLASS rc_paired = ISA_Register_Class_Create("paired", 64, false, true, false);
  ISA_Register_Set(rc_paired, 0, 5, NULL, paired_reg_names,
    (1 << (int)ISA_SUBSET_armv5e) | (1 << (int)ISA_SUBSET_armv6));

  ISA_REGISTER_CLASS rc_spsr = ISA_Register_Class_Create("spsr", 32, false, true, false);
  ISA_Register_Set(rc_spsr, 0, 0, NULL, spsr_reg_names,
    (1 << (int)ISA_SUBSET_armv5e) | (1 << (int)ISA_SUBSET_armv6));

  ISA_Register_Subclass_Create("cpsrc", rc_cpsr, 1, cpsr_cpsrc, cpsrc_reg_names);

  ISA_Register_Subclass_Create("cpsrcond", rc_cpsr, 1, cpsr_cpsrcond, cpsrcond_reg_names);

  ISA_Register_Subclass_Create("cpsrcontrol", rc_cpsr, 1, cpsr_cpsrcontrol, cpsrcontrol_reg_names);

  ISA_Register_Subclass_Create("cpsrext", rc_cpsr, 1, cpsr_cpsrext, cpsrext_reg_names);

  ISA_Register_Subclass_Create("cpsrflags", rc_cpsr, 1, cpsr_cpsrflags, cpsrflags_reg_names);

  ISA_Register_Subclass_Create("cpsrge", rc_cpsr, 1, cpsr_cpsrge, cpsrge_reg_names);

  ISA_Register_Subclass_Create("cpsrge0", rc_cpsr, 1, cpsr_cpsrge0, cpsrge0_reg_names);

  ISA_Register_Subclass_Create("cpsrge1", rc_cpsr, 1, cpsr_cpsrge1, cpsrge1_reg_names);

  ISA_Register_Subclass_Create("cpsrge2", rc_cpsr, 1, cpsr_cpsrge2, cpsrge2_reg_names);

  ISA_Register_Subclass_Create("cpsrge3", rc_cpsr, 1, cpsr_cpsrge3, cpsrge3_reg_names);

  ISA_Register_Subclass_Create("cpsrj", rc_cpsr, 1, cpsr_cpsrj, cpsrj_reg_names);

  ISA_Register_Subclass_Create("cpsrmode", rc_cpsr, 1, cpsr_cpsrmode, cpsrmode_reg_names);

  ISA_Register_Subclass_Create("cpsrnz", rc_cpsr, 1, cpsr_cpsrnz, cpsrnz_reg_names);

  ISA_Register_Subclass_Create("cpsrnzc", rc_cpsr, 1, cpsr_cpsrnzc, cpsrnzc_reg_names);

  ISA_Register_Subclass_Create("cpsrq", rc_cpsr, 1, cpsr_cpsrq, cpsrq_reg_names);

  ISA_Register_Subclass_Create("cpsrstatus", rc_cpsr, 1, cpsr_cpsrstatus, cpsrstatus_reg_names);

  ISA_Register_Subclass_Create("cpsrt", rc_cpsr, 1, cpsr_cpsrt, cpsrt_reg_names);

  ISA_Register_Subclass_Create("lr", rc_integer, 1, integer_lr, lr_reg_names);

  ISA_Register_Subclass_Create("nopc", rc_integer, 15, integer_nopc, nopc_reg_names);

  ISA_Register_Subclass_Create("pairedfirst", rc_integer, 6, integer_pairedfirst, paired_reg_names);

  ISA_Register_Subclass_Create("pairedsecond", rc_integer, 6, integer_pairedsecond, pairedsecond_reg_names);

  ISA_Register_Subclass_Create("pc", rc_integer, 1, integer_pc, pc_reg_names);

  ISA_Register_Subclass_Create("spsrcontrol", rc_spsr, 1, spsr_spsrcontrol, spsrcontrol_reg_names);

  ISA_Register_Subclass_Create("spsrext", rc_spsr, 1, spsr_spsrext, spsrext_reg_names);

  ISA_Register_Subclass_Create("spsrflags", rc_spsr, 1, spsr_spsrflags, spsrflags_reg_names);

  ISA_Register_Subclass_Create("spsrstatus", rc_spsr, 1, spsr_spsrstatus, spsrstatus_reg_names);

  ISA_Register_Subclass_Create("spsrt", rc_spsr, 1, spsr_spsrt, spsrt_reg_names);

  ISA_Registers_End(); 
  return 0; 
} 
