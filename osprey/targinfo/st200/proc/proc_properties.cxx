/* -- This file is automatically generated -- */ 
/* 

  Copyright (C) 2002, 2004 ST Microelectronics, Inc.  All Rights Reserved. 

  This program is free software; you can redistribute it and/or modify it 
  under the terms of version 2 of the GNU General Public License as 
  published by the Free Software Foundation. 
  This program is distributed in the hope that it would be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 

  Further, this software is distributed without any warranty that it is 
  free of the rightful claim of any third person regarding infringement 
  or the like.  Any license provided herein, whether implied or 
  otherwise, applies only to this software file.  Patent licenses, if 
  any, provided herein do not apply to combinations of this program with 
  other software, or any other product whatsoever. 
  You should have received a copy of the GNU General Public License along 
  with this program; if not, write the Free Software Foundation, Inc., 59 
  Temple Place - Suite 330, Boston MA 02111-1307, USA. 

  Contact information:  ST Microelectronics, Inc., 
  , or: 

  http://www.st.com 

  For further information regarding this notice, see: 

  http: 
*/ 

// AUTOMATICALLY GENERATED FROM MDS DATA BASE !!! 
//  
//  Generate PROCESSOR properties information
///////////////////////////////////////

// Property meanings:
//   has_branch_delay_slot
//     Does the target have branch delay slots?
//   has_same_cycle_branch_shadow
//     Can the branch shadow be executed in the same cycle as the branch on the target?
//   is_out_of_order
//     Is the target an out-of-order machine?
//   is_superscalar
//     Can the current target issue multiple instructions per cycle?
//   is_ia64_predication
//     supports IA64 predication model
//   is_not_interlocked
//     Instructions are not fully interlocked
//   is_predicated
//     supports full predication model
//   is_select
//     supports partial predication model based on 'select' instruction and speculation.
//   has_predicate_false
//     supports predicated execution on false value of predicate
//   has_predicate_branches
//     can predicate branches
//   has_predicate_calls
//     can predicate calls
//   has_predicate_returns
//     can predicate returns
//   has_bundles
//     Does the target execute insts as sequence of bundles, or require bundle alignment?
//     The info is used to align instructions to bundles, resolve any bundle packing
//     requirements, etc...
//   has_prefetch
//     supports prefetch instructions
//   has_enable_prefetch
//     implicitly enables prefetch
//   has_enable_prefetch_ahead
//     enables prefetch to L2 cache
//   has_counted_loops
//     supports counted loop branches
//   has_swp_branches
//     supports SWP branches
//   has_delayed_exception
//     Does the target support delayed_exception mechanism, i.e ability to suppress
//     possible exceptions for speculative instructions with delayed recovery
//     mechanism.
//   has_fast_recip
//     Does the target have a fast recip instruction?
//     i.e. is it profitable to convert a/b -> a*recip(b)


#include <stddef.h>
#include "targ_proc.h"
#include "proc_properties_gen.h"

main()
{
  PROC_PROPERTY
   has_branch_delay_slot,
   has_bundles,
   has_counted_loops,
   has_delayed_exception,
   has_dismissible_load,
   has_enable_prefetch,
   has_enable_prefetch_ahead,
   has_fast_recip,
   has_predicate_branches,
   has_predicate_calls,
   has_predicate_false,
   has_predicate_loads,
   has_predicate_returns,
   has_predicate_stores,
   has_prefetch,
   has_same_cycle_branch_shadow,
   has_swp_branches,
   is_ia64_predication,
   is_not_interlocked,
   is_out_of_order,
   is_predicated,
   is_select,
   is_superscalar;

  PROC_Properties_Begin ("st200");

  has_branch_delay_slot = PROC_Property_Create ("has_branch_delay_slot");
  Processor_Group (has_branch_delay_slot,
			PROCESSOR_UNDEFINED);

  has_bundles = PROC_Property_Create ("has_bundles");
  Processor_Group (has_bundles,
			PROCESSOR_st220,
			PROCESSOR_st231,
			PROCESSOR_st240,
			PROCESSOR_UNDEFINED);

  has_counted_loops = PROC_Property_Create ("has_counted_loops");
  Processor_Group (has_counted_loops,
			PROCESSOR_UNDEFINED);

  has_delayed_exception = PROC_Property_Create ("has_delayed_exception");
  Processor_Group (has_delayed_exception,
			PROCESSOR_st220,
			PROCESSOR_st231,
			PROCESSOR_st240,
			PROCESSOR_UNDEFINED);

  has_dismissible_load = PROC_Property_Create ("has_dismissible_load");
  Processor_Group (has_dismissible_load,
			PROCESSOR_st220,
			PROCESSOR_st231,
			PROCESSOR_UNDEFINED);

  has_enable_prefetch = PROC_Property_Create ("has_enable_prefetch");
  Processor_Group (has_enable_prefetch,
			PROCESSOR_st220,
			PROCESSOR_st231,
			PROCESSOR_st240,
			PROCESSOR_UNDEFINED);

  has_enable_prefetch_ahead = PROC_Property_Create ("has_enable_prefetch_ahead");
  Processor_Group (has_enable_prefetch_ahead,
			PROCESSOR_UNDEFINED);

  has_fast_recip = PROC_Property_Create ("has_fast_recip");
  Processor_Group (has_fast_recip,
			PROCESSOR_UNDEFINED);

  has_predicate_branches = PROC_Property_Create ("has_predicate_branches");
  Processor_Group (has_predicate_branches,
			PROCESSOR_UNDEFINED);

  has_predicate_calls = PROC_Property_Create ("has_predicate_calls");
  Processor_Group (has_predicate_calls,
			PROCESSOR_UNDEFINED);

  has_predicate_false = PROC_Property_Create ("has_predicate_false");
  Processor_Group (has_predicate_false,
			PROCESSOR_UNDEFINED);

  has_predicate_loads = PROC_Property_Create ("has_predicate_loads");
  Processor_Group (has_predicate_loads,
			PROCESSOR_st240,
			PROCESSOR_UNDEFINED);

  has_predicate_returns = PROC_Property_Create ("has_predicate_returns");
  Processor_Group (has_predicate_returns,
			PROCESSOR_UNDEFINED);

  has_predicate_stores = PROC_Property_Create ("has_predicate_stores");
  Processor_Group (has_predicate_stores,
			PROCESSOR_st240,
			PROCESSOR_UNDEFINED);

  has_prefetch = PROC_Property_Create ("has_prefetch");
  Processor_Group (has_prefetch,
			PROCESSOR_st220,
			PROCESSOR_st231,
			PROCESSOR_st240,
			PROCESSOR_UNDEFINED);

  has_same_cycle_branch_shadow = PROC_Property_Create ("has_same_cycle_branch_shadow");
  Processor_Group (has_same_cycle_branch_shadow,
			PROCESSOR_UNDEFINED);

  has_swp_branches = PROC_Property_Create ("has_swp_branches");
  Processor_Group (has_swp_branches,
			PROCESSOR_UNDEFINED);

  is_ia64_predication = PROC_Property_Create ("is_ia64_predication");
  Processor_Group (is_ia64_predication,
			PROCESSOR_UNDEFINED);

  is_not_interlocked = PROC_Property_Create ("is_not_interlocked");
  Processor_Group (is_not_interlocked,
			PROCESSOR_st220,
			PROCESSOR_UNDEFINED);

  is_out_of_order = PROC_Property_Create ("is_out_of_order");
  Processor_Group (is_out_of_order,
			PROCESSOR_UNDEFINED);

  is_predicated = PROC_Property_Create ("is_predicated");
  Processor_Group (is_predicated,
			PROCESSOR_UNDEFINED);

  is_select = PROC_Property_Create ("is_select");
  Processor_Group (is_select,
			PROCESSOR_st220,
			PROCESSOR_st231,
			PROCESSOR_st240,
			PROCESSOR_UNDEFINED);

  is_superscalar = PROC_Property_Create ("is_superscalar");
  Processor_Group (is_superscalar,
			PROCESSOR_st220,
			PROCESSOR_st231,
			PROCESSOR_st240,
			PROCESSOR_UNDEFINED);


  PROC_Properties_End();
  return 0;
}
