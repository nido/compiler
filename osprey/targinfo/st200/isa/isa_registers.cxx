/* -- This file is automatically generated -- */ 
/* 

  Copyright (C) 2002 ST Microelectronics, Inc.  All Rights Reserved. 

  This program is free software; you can redistribute it and/or modify it 
  under the terms of version 2 of the GNU General Public License as 
  published by the Free Software Foundation. 
  This program is distributed in the hope that it would be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 

  Further, this software is distributed without any warranty that it is 
  free of the rightful claim of any third person regarding infringement 
  or the like.  Any license provided herein, whether implied or 
  otherwise, applies only to this software file.  Patent licenses, if 
  any, provided herein do not apply to combinations of this program with 
  other software, or any other product whatsoever. 
  You should have received a copy of the GNU General Public License along 
  with this program; if not, write the Free Software Foundation, Inc., 59 
  Temple Place - Suite 330, Boston MA 02111-1307, USA. 

  Contact information:  ST Microelectronics, Inc., 
  , or: 

  http://www.st.com 

  For further information regarding this notice, see: 

  http: 
*/ 

// AUTOMATICALLY GENERATED FROM CHESS DATA BASE !!! 

//  
//  Generate ISA registers information 
/////////////////////////////////////// 

#include <stddef.h>
#include "isa_registers_gen.h" 
#include "targ_isa_subset.h"

// [CG]: fix for bug 1-0-7-A/ddts/13524
// we must pur r0 into the register classes, as allocation to r0 is possible when it is a dead definition.
#define CG_FIX_1_0_7_A_DDTS_13524

static int ISA_Mask(ISA_SUBSET isa) 
{ 
  return 1 << (int)isa; 
} 

static int All_ISA_Mask(void) 
{ 
  int i; 
  int mask = 0; 
  for (i = ISA_SUBSET_MIN; i <= ISA_SUBSET_MAX; ++i) { 
    mask |= 1 << i; 
  } 
  return mask; 
} 

static int Range_ISA_Mask(ISA_SUBSET min_isa, ISA_SUBSET max_isa) 
{ 
  int i; 
  int mask = 0; 
  for (i = (int)min_isa; i <= (int)max_isa; ++i) { 
    mask |= 1 << i; 
  } 
  return mask; 
} 

static const char *integer_reg_names[] = {
	"$r0.0",	"$r0.1",	"$r0.2",	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL
};

static const int integer_r0[] = {0}; 
static const int integer_lr[] = {63}; 
#ifdef CG_FIX_1_0_7_A_DDTS_13524
// [CG]: we must pur r0 into the class, as allocation to r0 is possible when it is a dead definition.
static const int integer_no_lr[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62}; 
#else
static const int integer_no_lr[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62}; 
#endif

static const char *branch_reg_names[] = {
	"$b0.0",	NULL,	NULL,	NULL,	NULL,
	NULL,	NULL,	NULL
};


#define NELEMS(a) (sizeof(a) / sizeof(*(a))) 

main() 
{ 
  ISA_REGISTER_CLASS 
	 rc_integer,
	 rc_branch;

  ISA_Registers_Begin("st200"); 

  rc_integer = ISA_Register_Class_Create("integer", 32, true, true, false); 
  rc_branch = ISA_Register_Class_Create("branch", 1, false, true, false); 

  ISA_Register_Set(rc_integer, 0, 63, "$r0.%d", NULL, All_ISA_Mask()); 
  ISA_Register_Subclass_Create("r0", rc_integer,
			        NELEMS(integer_r0), integer_r0, NULL); 
  ISA_Register_Subclass_Create("lr", rc_integer,
			        NELEMS(integer_lr), integer_lr, NULL); 
  ISA_Register_Subclass_Create("no_lr", rc_integer,
			        NELEMS(integer_no_lr), integer_no_lr, NULL); 

  ISA_Register_Set(rc_branch, 0, 7, "$b0.%d", NULL, All_ISA_Mask()); 

  ISA_Registers_End(); 
  return 0; 
} 
