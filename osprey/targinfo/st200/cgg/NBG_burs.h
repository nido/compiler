
#ifndef __NBG_GEN_H__
#define __NBG_GEN_H__

#include <stdio.h>
#include "NBG_State.h"
#include "NBG_Link.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Labels the given NBG_TREE expression tree.
 * This pass is bottom up.
 * At each step the cost computation is performed.
 * Cost computation is additive.
 * The user global state is passed to cost computation.
 * label_uncse performs reuse of common sub expressions.
 * @param p the user expression tree
 * @param state the user global state
 * @return the matching state
 */
extern NBG_State NBG_label(void *p, void *user_state);
extern NBG_State NBG_label_uncse(void * p, void *user_state);

/*
 * Returns true if the state is a complete maching for the expression tree.
 * @param s state generated by NBG_label()
 * @return 0 if no matched, 1 if matched.
 */
extern int NBG_matched(NBG_State s);

/*
 * Builds a code selection rules link tree from a
 * matching state.
 * This pass is top-down and results in a rule link tree
 * matching the original expression tree with minimal
 * total cost.
 * @param s the matching state generated by NBG_label()
 * @return the rule link tree with minimal total cost
 */
extern NBG_Link NBG_link(NBG_State s);

/*
 * Emits code from a rule tree.
 * This pass is bottom-up on the rule tree.
 * At each step code emition is performed.
 * The global user state is passed to code selection function.
 * @param l the rule link tree
 * @param state the user global state
 */
extern void NBG_emit(NBG_Link l, void *state);

/*
 * top->down and bottom->up traversals of link tree.
 * May be used by user to implement additional passes
 * before code emit.
 */
typedef void (*NBG_visit_f) (NBG_Link, void *);
extern void NBG_visit_td(NBG_Link l, NBG_visit_f visit, void *state);
extern void NBG_visit_bu(NBG_Link l, NBG_visit_f visit, void *state);

extern void NBG_del_state_list(void);

/*
 * Emits list of rules.
 */
extern void NBG_rules_print(FILE *file);

extern void NBG_labelled_print(NBG_State state, FILE *file);
extern void NBG_linked_print(NBG_Link link, FILE *file);

#ifdef __cplusplus
}
#endif

#endif
