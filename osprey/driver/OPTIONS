%
%
%  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
%
%  This program is free software; you can redistribute it and/or modify it
%  under the terms of version 2 of the GNU General Public License as
%  published by the Free Software Foundation.
%
%  This program is distributed in the hope that it would be useful, but
%  WITHOUT ANY WARRANTY; without even the implied warranty of
%  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
%
%  Further, this software is distributed without any warranty that it is
%  free of the rightful claim of any third person regarding infringement 
%  or the like.  Any license provided herein, whether implied or 
%  otherwise, applies only to this software file.  Patent licenses, if 
%  any, provided herein do not apply to combinations of this program with 
%  other software, or any other product whatsoever.  
%
%  You should have received a copy of the GNU General Public License along
%  with this program; if not, write the Free Software Foundation, Inc., 59
%  Temple Place - Suite 330, Boston MA 02111-1307, USA.
%
%  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
%  Mountain View, CA 94043, or:
%
%  http://www.sgi.com
%
%  For further information regarding this notice, see:
%
%  http://oss.sgi.com/projects/GenInfo/NoticeExplan
%
%

% Lines beginning with % are comment lines, 
% lines beginning with %%% denote new sections.

% There are two section types, which can be interspersed:
% Each option in the OPTIONS section has two lines.
% The first line contains:
% the option name, 
% an action to be done upon reading the option, 
% what languages accept it, 
% what phases accept it,
% and what other options it implies.
% The second line contains the help message for that option.

% There must be no spaces in any of the fields except the last one,
% or you can have spaces in an action if you surround it with braces.

% There are several special syntax rules for option names that are used:
% Option names that start with I, e.g. I-foo, are internal names
% that the user cannot access.  Internal names are used for phase options
% (e.g. -pic2), and for implicit defaults like -D__sgi.
% A %s after an option name means to use the next string as an argument;
% a %d or %x after an option name means to use the next number as an argument;
% a %D after an option name means to use the next directory as an argument;
% the %{s,x,d,D} formats accept an optional space before the argument;
% if there is no number or directory for a corresponding %{x,d,D},
% then the option is not matched.
% A * in the middle of an argument means there can be an optional space here;
% a * at the end of the argument means the syntax is too complicated and a
% call to a hand-written routine called parse_<prefix>_option will be generated.

% A special action is toggle(&<var>,<val>) which stores the value in the 
% variable, and gives an error if the variable has already been set.
% This is useful for catching conflicts like -mips1 -mips2.

% The implies field should include the option name if that name is to be 
% passed to phases.  The special word "self" for the implies field means 
% to repeat the option name.  
% Repeating a %{d,D,s} in the implies field shows the format to use 
% when passing to phases, i.e. whether to have a blank space.

% A simple alias is recognized when you have an option that has
% no action, language=all, phases=none, and 1 implies option.
% This is directly translated to the implies option when processing.

% Lines in the COMBINATIONS section give 
% an option combination, 
% whether the combination is OKAY, a WARNING, or an ERROR,
% and what implied behavior comes from that option.
% The implied behavior of combinations overrides the implied behavior
% of the individual options.

% The file is first preprocessed by cpp to expand macros, and then sorted
% by option names.

#if !defined(GNU_FRONT_END) || GNU_FRONT_END < 33
#error "OPTIONS file is no more compatible with pre 3.3 front-end."
#endif

% the letter keys for languages and phases must match what is in lang_defs.c
% ALL and NONE can be used for both languages and phases.
#define	ALL	A
#define NONE	N
% languages
#define cc	c
#define CC	C
#define Cc	cc,CC
#define f77	f
% f90 used in option name, so use F90 for define
#define F90	F
#define FTN	f77,F90
#define as	a
#define LINK	Cc,FTN
% phases
#define cpp	p
#define cfe	C
#define ffe	F
#define FE	f
#define ipl	i
#define be	b
#define	as	a
#define ld	l
#ifdef BCO_ENABLED
% Thierry: add new tool for icache optim 
#define binopt	o
#endif
#define ipap	j
#define pwrc	K
% pfa used in option name, so use PFA for define
#define PFA	K
#define mpc	M
% GRP: All the pieces that swallow regular group options
#define GRP	ffe,b,i
#if defined(TARG_ST)
% In new front-end, FE is run as part of the cpp phase, thus we must add
% cpp phase to the CMP phases
#define CMP	cpp,FE,ipl,be
#else
#define CMP	FE,ipl,be
#endif
% ALLX: ALL except pca & pfa which don't accept the usual compilation args
#define ALLX	cpp,CMP,ld

% Not available options description are prefixed with NA__ and rejected when dumping help
% This has been done for all C/C++ front-end options having a nonempty description
% Please note that there is an implicit dependency on the NA__ string
% In the filtering mechanism used in the main.c print_help_msg function
#if defined(TARG_ST)
#ifdef TARG_STxP70
#define NA__STxP70__   "[*NASTxP70*]"
#else
#define NA__STxP70__
#endif
#define NA__	"[*NA*]"
#else
#define NA__
#endif

%%% OPTIONS
% <option name>	<action> <default> <languages> <phases> <implies>
%	<help message>
#ifdef TARG_STxP70
-full-help	;		ALL	NONE	""
	NA__STxP70__"print full list of options"
#endif
-help	;		ALL	NONE	""
	"print list of possible options"
-realO	;		ALL	NONE	""
	NA__"override the turning down of optimization levels"
-help:%s	save_name(&help_pattern,optargs); 	ALL	NONE	""
	"print list of possible options that contain given string"
%
-show	{show_flag = TRUE; }	ALL	GRP	self
	"show phases as they are being invoked"
-show1	{show_flag = TRUE; }	ALL	NONE	""
	""
-show0	{show_flag = TRUE; execute_flag = FALSE;} ALL	NONE	""
	"show what phases would be called, but don't invoke anything"
-showt	{time_flag = TRUE; }	ALL	NONE	""
	"show time taken by each phase"
-showm	{memory_flag ++ ; }	ALL	NONE	""
	NA__"show memory usage by each phase"
-Q 	{quiet_flag = FALSE; }	ALL	NONE	""
	NA__"suppress timing information (g++) "
-version {show_version = TRUE; execute_flag = FALSE;} ALL	NONE	""
	"Show the version of the compiler being used"
#ifdef TARG_ST
-dumpmachine	{dump_machine = TRUE; execute_flag = FALSE;} ALL	NONE	""
	"Print the compiler's target machine --and don't do anything else."
-dumpversion	{show_version = TRUE; dump_version = TRUE; dump_machine = FALSE; execute_flag = FALSE;} ALL	NONE	""
	"print the compiler version --and don't do anything else."
#endif
% -showd turns on internal driver debugging 
-showd	{show_flag = debug = TRUE; execute_flag = FALSE;} ALL NONE ""
	""
-show_defaults	execute_flag=FALSE; 	ALL NONE ""
	NA__"show default values"
% gcc has -v show version as well as phases, so take that meaning
#ifdef BCO_ENABLED
#ifdef TARG_STxP70
% Thierry: transmit also -v to icache optim 
% STxP70: do not pass to ld that do not support these options.
-v	{show_flag = TRUE; show_version = TRUE;} ALL	cpp,binopt	self "-show"
#else
% Thierry: transmit also -v to icache optim 
-v	{show_flag = TRUE; show_version = TRUE;} ALL	cpp,ld,binopt	self "-show"
#endif
#else
#ifdef TARG_STxP70
% STxP70: do not pass to ld that do not support these options.
-v	{show_flag = TRUE; show_version = TRUE;} ALL	cpp	self "-show"
#else
-v	{show_flag = TRUE; show_version = TRUE;} ALL	cpp,ld	self "-show"
#endif
#endif
	"show phases and version as they are being invoked"
-fullwarn toggle(&msglevel,2);		Cc,FTN,as  cpp	self "-m2"
	NA__"give more warnings, especially about missing prototypes"
#ifdef TARG_ST
-w	toggle(&msglevel,0);		ALL	cpp,cfe,as,PFA	self "-m0"
	"inhibit warning messages"
#else
-w	toggle(&msglevel,0);		ALL	cfe,as,PFA	self "-m0"
	"inhibit warning messages"
#endif
-w0	warn_no_longer_supported2(option_name,"-fullwarn");		ALL	as,ld,FE ""
	""
-w1	warn_no_longer_needed(option_name);		ALL	NONE	""
	""
-w2			;		f77	ffe	self
	"warnings count as errors"
-w3			;		f77	ffe	self
	"supress warnings but exit with error status"
-w66			;		f	ffe	self
	"turn off F66 incompatibility warnings"
-66			;		f	ffe	self
	"issue errors when non-F66 feature used"
-woff*all	toggle(&msglevel,0);		ALL	NONE	"-w -m0"
	NA__"turn off all warnings"

-woff*options		;		ALL	NONE	""
	NA__"turn off warnings about options"
-woff%d			;		FTN	ffe,be	"-woff%d"
	NA__"turn off named warnings"
-diag_suppress%s	;		Cc	cpp,cfe	"-diag_suppress%s"
	NA__"turn off named diagnostics"
-diag_remark%s		;		Cc	cpp,cfe	"-diag_remark%s"
	NA__"make named diagnostics into remarks"
-diag_warning%s		;		Cc	cpp,cfe	"-diag_warning%s"
	NA__"make named diagnostics into warnings"
-diag_error%s		;		Cc	cpp,cfe	"-diag_error%s"
	NA__"make named diagnostics into errors"

-brief_diagnostics	;		CC	cpp	self
	NA__"issue one-line diagnostic messages"

% -V is an svr4 option, currently ignored
#ifndef TARG_STxP70
-V	warn_ignored("-V");		cc	ALLX	""
	""
-V%d	{warn_ignored("-V <version>");}	cc	ALLX	""
	""
#endif
% last_phase gives the last phase to run, phase names from lang_defs.h
% If the user gives conflicting last phases, e.g. -c -P,
% then we use the earliest phase given.
-c	last_phase=(((ipa==TRUE)&&(shared==RELOCATABLE))?P_any_ld:earliest_phase(P_any_as,last_phase));  ALL	NONE	""
	"produce a .o and stop"
-r	toggle(&shared,RELOCATABLE);last_phase=P_any_ld;toggle(&dynamic,FALSE);  ALL	 ld	self
	"produce a relocatable .o and stop"
-S	last_phase=earliest_phase(P_be,last_phase);	 Cc,FTN NONE	""
	"produce a .s and stop"
-fe	last_phase=earliest_phase(P_any_fe,last_phase);	 Cc,FTN NONE	""
	"stop after the front end is run"
-F	dash_F_option();	 f77	NONE	""
	"stop after RATFOR (f77 only)"
% just parse and then stop
-parse	last_phase=earliest_phase(P_any_fe,last_phase);  Cc cpp,cfe	self
	""
-I%D		;		ALL	cpp	"-I%D -include=%D"
   "-I<incdir>          add <incdir> directory to the include search path list"
-x%s		;		F90	ffe	"-x%s"
	"disable various directives in F90"

I-include=%D  ;		FTN     ffe,PFA     "-include=%D"
	""
-I	;		ALL	NONE	"-nostdinc"
	""
I-ivpad	;		LINK	ld	"-ivpad"
	NA__"inter-variable padding of common blocks"
-nostdinc	nostdinc=TRUE;		ALL	cpp	self
	"do not search system include directories"
#ifdef TARG_ST
%TB
-mdumpinfo	;		ALL	cpp,cfe	self
	"Dump builtins, type and register info info.txt file"
-nostdinc++	nostdincc=TRUE;		ALL	cpp	self
	"do not search include directories for C++"
#endif
#if defined(linux) || defined(sun)
-nostdlib	;	LINK	ld	"-nostartfiles -nodefaultlibs"
	"no predefined libraries or startfiles"
#else
-nostdlib	;	LINK	ld	"-L"
	"no predefined library search path list"
#endif
-objectlist%s	source_kind=S_o;		LINK	ld	"-objectlist %s"
	NA__"Read the following file to get a list of files to be linked"
I-split_common	;		LINK	ld	"-split_common"
	NA__"check split COMMON for inconsistencies and fix them"

-LIST:%s	;		ALL	be,ipl	"-LIST:%s"
	NA__"option group to control listing file and contents"
-LD_%s		;		ALL	ld	"-LD_%s"
	""
#ifdef TARG_STxP70
-L%D	add_library_dir(optargs);		LINK	ld	"-L%D"
   "-L<libdir>          add <libdir> directory to the library search path list"
#else
-L%D	add_library_dir(optargs);		LINK	ld	"-L%D"
	"add following directory to the library search path list"
#endif
-L		;		LINK	ld	self
	""
#ifndef TARG_ST
% (cbr) it was redefined below
-T%s		;		LINK	ld	"-T%s"
	"use file as the linker script"
#endif

-G		;		cc	ld	self
	""
-G%d	toggle(&gnum,optargd);		ALL	ffe,be	"-G%d"
	""
-Gspace%d	;		ALL	be	"-TENV:Gspace=%d"
	""
% encourage people to replace -K with -keep
-keep	keep_flag=TRUE;		ALL	ipap	self
	"keep intermediate files"
#ifdef TARG_ST
-keep_dir*%D Process_keep_dir(optargs);		ALL	ipap	self
	"use following directory as location for intermediate files"
#endif
-save-temps	keep_flag=TRUE;	ALL	NONE	""
	""
-K	keep_flag=TRUE;		ALL	NONE	""
	""
-K*		;		ALL	NONE	""
	""
% even though -K* will parse the following K options, 
% we have to list them so the driver knows what to do with them:
-KPIC		;		ALL	NONE	""
	""
% these svr4 options are accepted but ignored by the driver
-Kminabi 	;		cc	NONE	"-abi"
	""
-Ksd	toggle(&speed,TRUE);		cc	NONE	""
	""
-Ksz	toggle(&speed,FALSE);		cc	NONE	""
	""
-Kfpe	toggle(&fpe,TRUE);warn_ignored("-Kfpe"); 	cc	NONE	""
	""
-Kmau	toggle(&fpe,FALSE);warn_ignored("-Kmau"); 	cc	NONE	""
	""
% there are three shared modes:  non, dso, call; call-shared is the default.
% -KPIC can mean either dso or call, so it is only used to say "not non-shared".
% on linux, use g++ driver so don't need init and fini
#if defined(linux) || defined(sun) || defined(__CYGWIN__) || defined(__MINGW32__)
#  ifdef TARG_ST
#    define PIC_FLAGS_1    "-TENV:CPIC -TENV:GPREL -pic1"
#    define PIC_FLAGS_2    "-TENV:PIC -TENV:GPREL -pic2 -shared"
#  else
#    define PIC_FLAGS_1    "-TENV:PIC -pic2"
#    define PIC_FLAGS_2    "-TENV:PIC -pic2 -shared"
#  endif
#else
#define PIC_FLAGS_1    "-TENV:PIC -pic2 -init _main -fini _fini"
#define PIC_FLAGS_2    "-TENV:PIC -pic2 -init _main -fini _fini -shared"
#endif
I-cpp_pic	;		ALL	NONE	"-D_PIC -D__DSO__"
	""
%
% These options tell back-end how to generate addresses:
%   - if no option is given it corresponds to no GP-relative addressing 
%     (then the defult is set depending on the target)
%   - gprel tells it to generate GP-relative addressing, GP constant
%   - non_shared tells it to generate GP-relative addressing, GOT, and
%     non shared code
%   - call_shared, shared tells it to generate GP-relative addressing,
%     GOT, and shared code
%
#ifdef TARG_ST
% [CL] make -non_shared, -call_shared and -shared linker only options
%      that have no impact on the compilation flags
%      disable -pic1 and -pic2
-gprel	toggle(&gprel,TRUE);	ALL	NONE	"-TENV:GPREL -TENV:constant_gp"
	NA__"generate gp-relative accesses"
-non_shared	toggle(&shared,NON_SHARED);toggle(&dynamic,FALSE); 	ALL	l	self
	NA__"compile non-shared (no DSO's)"
-call_shared	toggle(&shared,CALL_SHARED);toggle(&dynamic,TRUE);	ALL	l	self
	NA__"call-shared PIC code"
-shared 	toggle(&shared,DSO_SHARED);toggle(&dynamic,TRUE);	ALL	l	self
	NA__"dso-shared PIC code"
#if 0
-pic1		toggle(&shared,CALL_SHARED);	ALL	NONE	"-TENV:GPREL -TENV:CPIC"
	""
-pic2		toggle(&shared,DSO_SHARED);	ALL	NONE	"-TENV:GPREL -TENV:PIC"
	""
#endif
-xgot		toggle(&gprel,TRUE);		ALL	NONE	"-TENV:GPREL -TENV:large_GOT"
	""
-multigot	toggle(&gprel,TRUE);		ALL	NONE	"-TENV:GPREL"
	""
#else
-gprel	toggle(&gprel,TRUE);	ALL	NONE	"-TENV:GPREL -TENV:constant_gp"
	NA__"generate gp-relative accesses"
-non_shared	toggle(&shared,NON_SHARED); 	ALL	NONE	"-TENV:GPREL"
	NA__"compile non-shared (no DSO's)"
-call_shared	toggle(&shared,CALL_SHARED);	ALL	NONE	PIC_FLAGS_1
	NA__"call-shared PIC code"
-shared 	toggle(&shared,DSO_SHARED);	ALL	l	PIC_FLAGS_2
	NA__"dso-shared PIC code"
-pic1		toggle(&shared,CALL_SHARED);	ALL	NONE	"-TENV:GPREL -TENV:CPIC"
	""
-pic2		toggle(&shared,DSO_SHARED);	ALL	NONE	"-TENV:GPREL -TENV:PIC"
	""
-xgot		toggle(&gprel,TRUE);		ALL	NONE	"-TENV:GPREL -TENV:large_GOT"
	""
-multigot	toggle(&gprel,TRUE);		ALL	NONE	"-TENV:GPREL"
	""
#endif

% This option turns on everything of interest to SPEC:
-Ofast  Process_Ofast("");		ALL	NONE	""
	NA__"default fast option configuration"
-Ofast=%s Process_Ofast(optargs);		ALL	NONE	""
	NA__"processor-specific fast option configuration"

-bigp_off toggle(&big_pages,FALSE);  ALL NONE ""
    	NA__"Disable large pages"

-bigp_on toggle(&big_pages,TRUE);  ALL NONE ""
    	NA__"Enable large pages"

-fbgen	Gen_feedback=TRUE;		ALL	N	""
	NA__"Option needed for generating feedback files for spec"

-fbuse%s Process_fbuse(optargs);		ALL	N	""
	NA__"Option needed to use feedback files for spec"

-fbexe%s Process_fbexe(optargs);        ALL     N       ""
	NA__"Option needed to specify the name of the pixified binary to prof"

-fb_xdir%D Process_fb_xdir(optargs);		ALL	N	""
	NA__"Option needed to tell pixie where to emit the pixified dso's "

-fb_cdir%D Process_fb_cdir(optargs);		ALL	N	""
	NA__"Option needed to tell pixie where to emit the Count Files"

#ifdef TARG_ST
% [TB] Option to generate coverage
-fprofile-arcs-cgir	;        ALL	NONE	self "-TENV:profile_arcs_cgir"
        NA__"Create data files for the `gcov' code-coverage utility and instrument code in the backend"
-fprofile-arcs	;        ALL	NONE	self "-TENV:profile_arcs"
   "Create data files for branch probabilities feedback option. Instrument code."
-ftest-coverage	;        ALL	NONE	self "-TENV:test_coverage"
   "Create data files for the `gcov' code-coverage utility with line information. To be used with -fprofile-arcs"
-fcoverage-counter64	;        ALL	NONE	self "-TENV:coverage_counter64"
   NA__STxP70__"Use 64 bits coverage counters instead of 32"
-fbranch-probabilities	;        ALL	NONE	self "-TENV:branch_probabilities"
   NA__STxP70__"Use '.gcda' file as feedback file to estimate branch probabilities"
#endif

#ifdef TARG_ST
% [TB] Option to cancel feedback instrument
-fb_nocreate Process_fb_nocreate(optargs);        ALL     N       ""
   NA__STxP70__"Cancel feedback (-fb_create)"
#endif
-fb_create%s Process_fb_create(optargs);        ALL     N       ""
   NA__STxP70__"Option needed for feedback file generation"

-fb_opt%s Process_fb_opt(optargs);      ALL     N       ""
        NA__"Option needed for using SPEC feedback files"

% Basic option groups:
% See opt_actions.c::Process_Ofast if you change the -OPT: item.
-OPT:%s		Process_Opt_Group(optargs); 	ALL	CMP,ipap "-OPT:%s"
	NA__"option group to control optimization"
-DEBUG:%s	;		ALL	GRP	"-DEBUG:%s"
	NA__"option group to debugging options"

#if defined(TARG_ST)
/* (cbr) -TARG, -TENV now propagated to cpp */
-TENV:%s	;		ALL	GRP,cfe,cpp,ipap	"-TENV:%s"
	NA__"option group to control target environment"
-TARG:%s	Process_Targ_Group(optargs); 	ALL	GRP,cfe,cpp "-TARG:%s"
	NA__"option group to control compilation target"
#endif
-SWP:%s		;		ALL	be	"-SWP:%s"
	NA__"option group to control software pipelining"
-GRA:%s		;		ALL	be	"-GRA:%s"
	NA__"option group to control global register allocation"
-GCM:%s		{warning("-GCM group no longer supported");}	N NONE	""
	""
-CG:%s		;		ALL	be	"-CG:%s"
	NA__"option group to control code generation"
-PHASE:%s	;		ALL	be,ipl	"-PHASE:%s"
	""
-WOPT:%s	;		ALL	be,ipl	"-WOPT:%s"
	NA__"option group internal-use WOPT options"
-LNO:%s		;		ALL	be,ld	"-LNO:%s"
	NA__"option group to control loop nest optimization"
-MP:%s		Process_Mp_Group(optargs);		ALL	NONE	""
	NA__"option group to control distributed shared memory optimization"
-VHO:%s		;		ALL	ffe,be	"-VHO:%s"
	NA__"option group to control vho lowering"

% LAI emission related options:
-lai	toggle(&lai,TRUE);last_phase=earliest_phase(P_be,last_phase);	cc	be	self
	""

% C and Fortran listing related options:
-CLIST:%s	;		cc	be	"-PHASE:clist -CLIST:%s"
	NA__"option group to control C source listing of compiler intermediate"
-FLIST:%s	;		FTN	be	"-PHASE:flist -FLIST:%s"
	NA__"option group to control Fortran source listing of compiler intermediate"
-clist	;		Cc	be	"-PHASE:clist -CLIST:=ON"
	""
-flist	;		FTN	be	"-PHASE:flist -FLIST:=ON"
	""
-mplist		;		FTN,cc	be	"-mplist"
	""
-PURPLE:%s	;		f77	be	"-PHASE:purple -PURPLE:%s"
	"option group to control problem isolation slicing tool"
-PROMP:next_id=%d ;		FTN,Cc	be	"-PROMP:next_id=%d"
	NA__"specify the loop id used by ProMP annotation"
-PROMP:%s	;		FTN,Cc	be	"-PHASE:prompf -PROMP:%s"
	NA__"option group to generate ProMP analysis file"

-IPA:%s	toggle(&ipa,TRUE);		ALL	ipl,ipap	"-IPA:%s"
	NA__STxP70__"option group to control interprocedural optimizations"
-LANG:std toggle(&standard_cplusplus,TRUE);  CC    GRP  "-LANG:std"
        NA__"Use ISO/ANSI standard-conforming C++ language and library"
-LANG:%s	;		LINK	GRP	"-LANG:%s"
	NA__"option group to control language features"
-INTERNAL:%s	;		LINK	GRP,ipap	"-INTERNAL:%s"
	NA__"option group to control features while testing"
-DEFAULT:%s	Process_Default_Group(optargs);		ALL	N	""
	NA__"default options (abi,isa,proc)"
-fverify-tree ;           CC     cpp,FE  "-fverify-tree"
        NA__"Run verification routine before tree-to-whirl conversion"
% Linker Option Group(s)
-LMSG:%s	;		ALL	ld	"-LMSG:%s"
	NA__"option group to control error/warning messages in ld"

% FE is also a define, so trick cpp
-F/**/E:%s		;		ALL	ffe	"-FE:%s"
	""
I-init%s		;		CC	ld	"-init %s"
	""
I-fini%s		;		CC	ld	"-fini %s"
	""
-B*dynamic	warn_no_longer_supported(option_name);	cc	NONE	""
	""
-B*static	warn_no_longer_supported(option_name);	cc	NONE	""
	""
#ifdef TARG_ST
-B*symbolic	        ;		LINK	ld	self
	NA__STxP70__"Bind references to global symbols locally when building a shared object"
#else
-B*symbolic	warn_no_longer_supported(option_name);	cc	NONE	""
	""
#endif
% -C can have two different meanings, so escape to hand-code
#ifdef TARG_ST
	// (cbr) -CC, -C if -E
-C/**/C		;		Cc	f	self
	""
-C		;		Cc	f	self
	""
#else
-C*		;		ALL	NONE	""
	"C/C++: keep C comments after cpp; f77: runtime subscript checking"
#endif
-check_bounds	;		FTN	ffe	"-DEBUG:subscript_check"
	"check bounds"
-d*y	toggle(&dynamic,TRUE);		cc	ld	"-dy"
	""
-d*n	toggle(&dynamic,FALSE);		cc	ld	"-dn"
	""
-abi		;		ALL	as,ld	self "-D_ABI_SOURCE -TARG:pure"
	NA__"generate strict-abi-compliant object files"
% we can safely assume that P_cpp will be the earliest phase
% P_any_cpp is the generic union of all cpp phases
#ifdef TARG_ST
-E	last_phase=P_any_cpp; 	ALL	Cc	"-E"
	"run cpp and send result to standard output"
-P	; 	ALL	cpp	self
	"along with -E. cpp will not gerenate #line directives"
#else
-E	last_phase=P_any_cpp; 	ALL	NONE	self
	"run cpp and send result to standard output"
-P	last_phase=P_any_cpp; 	ALL	NONE	self
	"run cpp on input <file>.c and send result to <file>.i"
#endif
-M	last_phase=P_any_cpp; 	ALL	cpp	self
	"run cpp and generate make dependencies"
#ifdef TARG_STxP70
-MDupdate%s	;		ALL	cpp,ld	"-MDupdate %s"
   "-MDupdate<file>     update the following file with make dependencies"
-MDtarget%s	;		ALL	cpp	"-MDtarget %s"
	"-MDtarget<target>   use the following as the target for make dependencies"
#else
-MDupdate%s	;		ALL	cpp,ld	"-MDupdate %s"
	"update the following file with make dependencies"
-MDtarget%s	;		ALL	cpp	"-MDtarget %s"
	"use the following as the target for make dependencies"
#endif
-MDignore%s	;		ALL	ld	"-MDignore %s"
	""
% first_phase is P_cpp by default, so set it to anything different
-nocpp	nocpp_flag=TRUE;first_phase=P_any_fe; 	FTN	FE	self
	"don't do cpp processing"
% cpp is also a define, so trick the preprocessor
-c/**/pp  toggle(&use_ftpp,0);first_phase=P_any_cpp; 	ALL	NONE	""
	""
-J*sfm	warn_ignored(option_name);		cc	NONE	""
	""
% -o is now handled elsewhere because of complications introduced by cord
-o%s	save_name(&outfile,optargs);check_output_name(optargs);cancel_saved_arg(2);  ALL NONE ""
	"put output in following file name rather than a.out"
-onetrip	;		f77	ffe	"-1"
	"One trip DO loops"
-1		;		f77	ffe	self
	"One trip DO loops"
-p0	warn_no_longer_supported2(option_name,"speedshop(1)");		ALL	NONE	""
	""
-p1	warn_no_longer_supported2(option_name,"speedshop(1)");		ALL	NONE	""
	""
#ifndef TARG_ST
-p	;		ALL	ld	self "-TENV:call_mcount"
	""
-pg	;		ALL	ld	self "-TENV:call_mcount"
	""
#else
#ifdef TARG_STxP70
-p	;		NONE	NONE	"" ""
	""	
-pg	;        ALL	NONE	self "-TENV:instrument_functions_for_pg -D__LIBGPROF_CYCLE_PROFILING__ -D__LIBGPROF_GRAPH_PROFILING__"
   "Intruments code for profiling. Generates gmon/gprof and stprof data."

#else
-p	;		ALL	NONE	self "-TENV:call_mcount"
	""
-pg	;		ALL	NONE	self "-TENV:call_mcount"
	""
#endif
#endif
-q*p	warn_no_longer_supported2(option_name,"speedshop(1)");		cc	NONE	""
	""
-q*l	warn_no_longer_supported2(option_name,"speedshop(1)");	 cc	NONE	""
	""
-Q*y	toggle(&ident,TRUE);warn_ignored(option_name);  cc	NONE	""
	""
-Q*n	toggle(&ident,FALSE);warn_ignored(option_name);  cc	NONE	""
	""
-purple	warn_no_longer_supported2(option_name,"-PURPLE:=ON");		ALL	NONE	""
	""

#ifdef TARG_MIPS
I-cpp_lp32	;		ALL	NONE	"-D_MIPS_SZINT=32 -D_MIPS_SZLONG=32 -D_MIPS_SZPTR=32 -D_SIZE_INT=32 -D_SIZE_LONG=32 -D_SIZE_PTR=32"
	""
I-cpp_lp64	;		ALL	NONE	"-D_MIPS_SZINT=32 -D_MIPS_SZLONG=64 -D_MIPS_SZPTR=64 -D_SIZE_INT=32 -D_SIZE_LONG=64 -D_SIZE_PTR=64"
	""
#else
I-cpp_lp32	;		ALL	NONE	"-D_SIZE_INT=32 -D_SIZE_LONG=32 -D_SIZE_PTR=32"
	""
I-cpp_lp64	;		ALL	NONE	"-D_SIZE_INT=32 -D_SIZE_LONG=64 -D_SIZE_PTR=64"
	""
#endif
I-cpp_i64	;		ALL	NONE	"-D_ABI_I64 -D_IA64_ARCH=0"
	""
I-cpp_i32	;		ALL	NONE	"-D_ABI_I32 -D_IA64_ARCH=0"
	""
#ifdef TARG_MIPS
#define MIPS1_DEFS	"-D__mips=1 -D_MIPS_ISA=1"
#define MIPS2_DEFS	"-D__mips=2 -D_MIPS_ISA=2"
#define MIPS3_DEFS	"-D__mips=3 -D_MIPS_ISA=3"
#define MIPS4_DEFS	"-D__mips=4 -D_MIPS_ISA=4"
% The _MIPS_SIM values must match the values defined in sgidefs.h
#define ABI32_DEFS 	"-D_ABIO32=1 -D_MIPS_SIM=_ABIO32 -D_MIPS_FPSET=16 -D_ILP32 -Amodel(ilp32)"
#define NEWABI32_DEFS 	"-D_ABIN32=2 -D_MIPS_SIM=_ABIN32 -D_MIPS_FPSET=32 -D_ILP32 -Amodel(ilp32)"
#define ABI64_DEFS 	"-D_ABI64=3 -D_MIPS_SIM=_ABI64 -D_MIPS_FPSET=32 -D_LP64 -Amodel(lp64)"
-mips1	toggle(&isa,ISA_MIPS1);		ALL	NONE	"-mips1" MIPS1_DEFS "-TARG:isa=mips1"
	"compile for mips1 instruction set"
-mips2	toggle(&isa,ISA_MIPS2);		ALL	as,ld	"-mips2" MIPS2_DEFS "-TARG:isa=mips2"
	"compile for mips2 instruction set"
-mips3	toggle(&isa,ISA_MIPS3); 	ALL	as,ld	"-mips3" MIPS3_DEFS "-TARG:isa=mips3"
	"compile for mips3 instruction set"
-mips4	toggle(&isa,ISA_MIPS4); 	ALL	as,ld	"-mips4" MIPS4_DEFS "-TARG:isa=mips4"
	"compile for mips4 instruction set"
-n32	toggle(&abi,ABI_N32); 	ALL	as,ld,PFA	"-n32" NEWABI32_DEFS "-TARG:abi=n32"
	""
-64     toggle(&abi,ABI_64);       ALL     pwrc,PFA,mpc,as,ld      "-64" ABI64_DEFS "-TARG:abi=64"
        "compile for 64-bit ABI"
#endif

#define ABII32_DEFS 	"-D_ILP32 -Amodel(ilp32)"
#define ABI32_DEFS	"-D_ILP32"
#define ABII64_DEFS 	"-D_LP64"
#define ABIIA32_DEFS 	"-D_ILP32 -Amodel(ilp32)"
-i32    toggle(&abi,ABI_I32);       ALL     pwrc,PFA,mpc	"-i32" ABII32_DEFS "-TARG:abi=i32 -D__ia64=1"
        NA__"compile for Intel IA64 32-bit ABI"
-i64     toggle(&abi,ABI_I64);       ALL     pwrc,PFA,mpc	"-i64" ABII64_DEFS "-TARG:abi=i64 -D__ia64=1"
        NA__"compile for Intel 64-bit ABI"
-ia32   toggle(&abi,ABI_IA32);       ALL     pwrc,PFA,mpc	"-ia32" ABIIA32_DEFS "-TARG:abi=ia32 -D__ia32=1"
        NA__"compile for Intel 32-bit ABI"
-itanium toggle(&isa,ISA_IA641);	ALL	NONE	"-i64"
	""
-st100 toggle(&abi,ABI_ST100);       ALL     pwrc,PFA,mpc	"-st100" ABI32_DEFS "-TARG:abi=st32 -TARG:proc=st120_v101 -TARG:isa=st100"
	NA__"compile for ST100 32-bit ABI"

%%% COMBINATIONS
% <combo>	<error>		<implies>
#ifdef TARG_MIPS
"-mips1 -n32"		ERROR	""
"-mips2 -n32"		ERROR	""
"-mips3 -n32"		OKAY	"-mips3 -n32" MIPS3_DEFS NEWABI32_DEFS "-TARG:abi=n32:isa=mips3"
"-mips4 -n32"		OKAY	"-mips4 -n32" MIPS4_DEFS NEWABI32_DEFS "-TARG:abi=n32:isa=mips4"
"-mips1 -64"		ERROR	""
"-mips2 -64"		ERROR	""
"-mips3 -64"		OKAY	"-mips3 -64" MIPS3_DEFS ABI64_DEFS "-TARG:abi=64:isa=mips3"
"-mips4 -64"		OKAY	"-mips4 -64" MIPS4_DEFS ABI64_DEFS "-TARG:abi=64:isa=mips4"
#endif

%%% OPTIONS
% KRDEFS are used by K&R compiles; ONANSI by any non-strict-ansi compile
#define KRDEFS "-Dunix -Dsgi -DLANGUAGE_C"
#define KRDEFS_linux "-Dunix -Dlinux"
#define KRDEFS_sun "-Dunix -Dsun"
#define KRDEFS_cygwin "-D__CYGWIN__ -Dunix"
#define KRDEFS_mingwin "-Dunix -D__MINGW32__"
#define XTENDEFS "-D__INLINE_INTRINSICS"
#define NONANSI_svr4	"-D_LONGLONG -D_SGI_SOURCE -D_SVR4_SOURCE"
#define XANSI	""
%
% Arthur: we are compiling a GNU dialect -- do as GNU wants ...
%
%#define ANSI	"-Xansi -D__STRICT_ANSI__"
#ifdef TARG_ST
#define ANSI	"-Xansi -trigraphs"
#else
#define ANSI	"-Xansi -D__STRICT_ANSI__  -trigraphs"
#endif
#define CCKR	"-OPT:alias=cckr_default -Xcckr"
% One kludge that we do is to add -DMIPSE{L,B} by hand in the driver,
% by checking if ansi==KR_ANSI and then checking the endian value.

I-cpp_nonansi		;		ALL	NONE	"-D_LONGLONG"
	""
I-cpp_nonansi_svr4	;		ALL	NONE	NONANSI_svr4
	""
I-cpp_extensions	;		ALL	NONE	"-D__EXTENSIONS__ -D__MATH_HAS_NO_SIDE_EFFECTS"
	""
I-cpp_krdefs		;		cc	NONE	KRDEFS
	""
I-cpp_krdefs_linux	;		Cc	NONE	KRDEFS_linux
	""
I-cpp_krdefs_sun	;		Cc	NONE	KRDEFS_sun
	""
I-cpp_krdefs_cygwin	;		Cc	NONE	KRDEFS_cygwin
	""
I-cpp_krdefs_mingwin	;		Cc	NONE	KRDEFS_mingwin
	""
-xansi	toggle(&ansi,EXTENDED_ANSI);		cc	NONE	XANSI XTENDEFS  
	"extended ansi C"
-X*a	toggle(&ansi,EXTENDED_ANSI);		cc	NONE	XANSI XTENDEFS 
	"extended ansi C"

-ansi	toggle(&ansi,STRICT_ANSI);		cc,FTN	cpp,FE	self 
	"strict ansi"
-ansiE		;		FTN,Cc	cpp,FE	self
	"issue error message for non standard features"
-ansiW		;		FTN,Cc	cpp,FE	self
	"issue warning messages for non standard features"
-X*c	toggle(&ansi,STRICT_ANSI);		cc	NONE	ANSI
	"strict ansi C"
-cckr	toggle(&ansi,KR_ANSI);		cc	NONE	CCKR XTENDEFS KRDEFS
	"K&R compatible C"
-X*t	toggle(&ansi,KR_ANSI);		cc	NONE	CCKR XTENDEFS  KRDEFS
	"K&R compatible C"
-ansiposix	warn_no_longer_supported(option_name); 	cc	NONE	""
	""
% these options are only set for cc:
I-lang-c		;		cc	cpp	self
	""
I-lang-c89		;		cc	cpp	self
	""
I-lang-c++		;		CC	cpp	self
	""
I-lang-asm		;		as	cpp	self
	""
I-Xansi                 ;       cc      mpc     self
        ""
I-Xcckr                 ;       cc      mpc     self
        ""
I-D_LANGUAGE_C		;	cc	cpp	self
	""
I-DLANGUAGE_C		;	cc	cpp	self
	""
I-D__EXTENSIONS__ 	;	CC,cc	cpp	self
	""
I-D__INLINE_INTRINSICS	;	CC,cc	cpp	self
	""
% these options are only set for CC:
#ifdef sgi
#define CXX_DEFS "-D_LANGUAGE_C_PLUS_PLUS=1 -D_MODERN_C"NONANSI_svr4"
#else
#define CXX_DEFS "-D_LANGUAGE_C_PLUS_PLUS=1"
#endif
#define CXX_DEFS_LINUX "-D_LANGUAGE_C_PLUS_PLUS=1"
#define CXX_DEFS_SUN "-D_LANGUAGE_C_PLUS_PLUS=1"
% the -Xcpluscomm is needed in case we use cpp
I-cpp_cplus 		;	CC	NONE	CXX_DEFS
	""
I-D_LANGUAGE_C_PLUS_PLUS=1 ;	CC	cpp	self
	""

%
% XTENDEFS is added to CC compiles in add_special_option
#ifdef sgi
I-xtendefs		;	CC	cpp,cfe XTENDEFS "-D__EXTENSIONS__ -D__MATH_HAS_NO_SIDE_EFFECTS"
	""
#else
I-xtendefs      	;	CC	cpp,cfe XTENDEFS
	""
#endif

% these options are only set for as:
#define AS_DEFS "-D_LANGUAGE_ASSEMBLY -DLANGUAGE_ASSEMBLY"
I-cpp_assembly		;		as	cpp	AS_DEFS
	""
I-D_LANGUAGE_ASSEMBLY	;		as	cpp	self
	""
I-DLANGUAGE_ASSEMBLY	;		as	cpp	self
	""
I-Xdo_linesplice	;		ALL	cpp	self
	""
% these options are only set for fortran:
#define FTN_DEFS "-D_LANGUAGE_FORTRAN -DLANGUAGE_FORTRAN"
#define FTN77_DEFS "-D_LANGUAGE_FORTRAN77 -DLANGUAGE_FORTRAN77"
#define FTN90_DEFS "-D_LANGUAGE_FORTRAN90 -DLANGUAGE_FORTRAN90"
I-cpp_fortran		;		FTN	cpp	FTN_DEFS
	""
I-cpp_fortran90		;		F90	cpp	FTN90_DEFS
	""
I-cpp_fortran77		;		f77	cpp	FTN77_DEFS
	""
I-D_LANGUAGE_FORTRAN	;		FTN	cpp	self
	""
I-DLANGUAGE_FORTRAN	;		FTN	cpp	self
	""
% f77 and as use cpp, but require k&r processing for things like # comments
I-cpp_nonansi_f77	;		f77	cpp	KRDEFS NONANSI_svr4 
	""
-A%s			;		ALL	cpp	"-A%s"
	NA__"add following cpp assertions"
#ifdef TARG_STxP70
-D%s			;		ALL	cpp	"-D%s"
   "-D<macro>           define a preprocessor macro"
#else
-D%s			;		ALL	cpp	"-D%s"
	"add following macro define"
#endif
% -U can have two different meanings, so escape to hand-code
-U*		;		ALL	NONE	""
	""
#ifdef TARG_STxP70
-U%s			;		ALL	cpp	"-U%s"
   "-U<macro>           undefine a preprocessor macro"
#else
-U%s			;		ALL	cpp	"-U%s"
	"undefine the following macro"
#endif
-l%s			;		LINK	ld	"-l%s"
   "-l<arg>             adds library lib<arg> to link list"

#ifdef TARG_ST
#ifdef BCO_ENABLED
-W*			; 	ALL	NONE	""
% Thierry: Add -Ws,* and -wo,* for icache optim 
	"-W<phase>,<arg> sends arg to phase {p=cpp,f=fe,b=be,a=as,l=ld,o=binopt}"
#ifdef TARG_STxP70
-Y%s	change_phase_path(optargs); 	ALL	ipap	"-Y%s"
% Thierry: Add -Ys,* and -Yo,* for icache optim 
	"-Y<phase>,<path>    uses path to find phase {p=cpp,f=fe,b=be,a=as,l=ld,\n                    I=include,S=startup,L=libraries,o=binopt}"
#else
-Y%s	change_phase_path(optargs); 	ALL	ipap	"-Y%s"
% Thierry: Add -Ys,* and -Yo,* for icache optim 
	"-Y<phase>,<path>    uses path to find phase {p=cpp,f=fe,b=be,a=as,l=ld,I=include,S=startup,L=libraries,o=binopt}"
#endif
#else
-W*			; 	ALL	NONE	""
   "-W<phase>,<arg>     sends arg to phase {p=cpp,f=fe,b=be,a=as,l=ld}"
#ifdef TARG_STxP70
-Y%s	change_phase_path(optargs); 	ALL	ipap	"-Y%s"
   "-Y<phase>,<path>    uses path to find phase {p=cpp,f=fe,b=be,a=as,l=ld,\n                    I=include,S=startup,L=libraries}"
#else
-Y%s	change_phase_path(optargs); 	ALL	ipap	"-Y%s"
   "-Y<phase>,<path>    uses path to find phase {p=cpp,f=fe,b=be,a=as,l=ld,I=include,S=startup,L=libraries}"
#endif
#endif
#else
-WB,%s			;		LINK	ld	"-WB,%s"
	"-WB,<arg> passes <arg> to the back-end via ipacom"
% want to pass whole -Wl,* arg to gcc link
-Wl,%s			;		LINK	ld	"-Wl,%s"
	""
-Wp,%s			;		ALL	cpp	"-Wp,%s"
	""
-W*			; 	ALL	NONE	""
	"-W<phase>,<arg> sends arg to phase {p=cpp,f=fe,b=be,a=as,l=ld}"
-Y%s	change_phase_path(optargs); 	ALL	ipap	"-Y%s"
	"-Y<phase>,<path> uses path to find phase {p=cpp,f=fe,b=be,a=as,l=ld,I=include,S=startup,L=libraries}"
#endif

% XPG requires ability to do -O 0 as well as -O0
-O*0	toggle(&olevel,0);		ALL	CMP,f	self 
	"no optimization"
-O*1	toggle(&olevel,1);		ALL	CMP,f	self 
	"minimal optimization"
-O	toggle(&osize,0);toggle(&olevel,2);	ALL	CMP	"-O2"
	"same as -O2"
#ifndef TARG_ST
-O*2	toggle(&olevel,2);		ALL	CMP	"-O2 -D__OPTIMIZE__"
	"global optimization"
#endif
-O*3	O3_flag=TRUE;toggle(&olevel,3);	ALL	CMP,f	self 
	"full optimization"
#ifdef TARG_ST
-O*2	toggle(&osize,0);toggle(&olevel,2);	ALL	CMP,f	self 
	"global optimization"
-O*s	toggle(&osize,1);toggle(&olevel,2);	ALL	CMP,f	self 
	"optimization for size"
#endif

#   ifdef TARG_STxP70
-g	toggle(&glevel,2);		ALL	CMP	"-g2 -CG:emit_asm_dwarf=on -CG:emit_unwind_info=on -TARG:enable_full_debug_info"
	"full debug info"
-g0	toggle(&glevel,0);		ALL	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	"no debug info"
-g1	toggle(&glevel,1);		ALL	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on -TARG:enable_full_debug_info"
	""
-g2	toggle(&glevel,2);		ALL	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on -TARG:enable_full_debug_info"
	""
-g3	toggle(&glevel,3);		ALL	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on -TARG:enable_full_debug_info"
	NA__"add some debugging to optimized code"
#   else
-g	toggle(&glevel,2);		ALL	CMP	"-g2 -CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	"full debug info"
-g0	toggle(&glevel,0);		ALL	CMP	self "-CG:emit_asm_dwarf=off -CG:emit_unwind_info=off"
	"no debug info"
-g1	toggle(&glevel,1);		ALL	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	""
-g2	toggle(&glevel,2);		ALL	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	""
-g3	toggle(&glevel,3);		ALL	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	NA__"add some debugging to optimized code"
#   endif

#ifdef TARG_ST
// [CL] force spill of return address (RA) so that unwinding/backtracing
// is still possible
-msave-return-address	;			ALL	CMP	"-CG:save_return_address=on"
	"force save of return address for backtracing"
#endif

-gslim	toggle(&glevel,2);		Cc	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	NA__"put out slim class debug info"
-gslim0	toggle(&glevel,2);		Cc	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	NA__"put out slim class debug info"
-gslim2	toggle(&glevel,2);		Cc	CMP	self "-CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	NA__"put out slim class debug info"
-gdwarf-2	;		ALL	cpp	self "-DEBUG:format=dwarf2 -CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	""
-gdwarf-20	toggle(&glevel,0);	ALL	cpp	self "-DEBUG:format=dwarf2 -g0 -CG:emit_asm_dwarf=off -CG:emit_unwind_info=off"
	""
-gdwarf-21	toggle(&glevel,1);	ALL	cpp	self "-DEBUG:format=dwarf2 -g1 -CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	""
-gdwarf-22	toggle(&glevel,2);	ALL	cpp	self "-DEBUG:format=dwarf2 -g2 -CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	""
-gdwarf-23	toggle(&glevel,3);	ALL	cpp	self "-DEBUG:format=dwarf2 -g3 -CG:emit_asm_dwarf=on -CG:emit_unwind_info=on"
	""
-gstabs		;		ALL	cpp	self "-DEBUG:format=stabs"
	""
-gstabs0	toggle(&glevel,0);	ALL	cpp	self "-DEBUG:format=stabs -g0"
	""
-gstabs1	toggle(&glevel,1);	ALL	cpp	self "-DEBUG:format=stabs -g1"
	""
-gstabs2	toggle(&glevel,2);	ALL	cpp	self "-DEBUG:format=stabs -g2"
	""
-gstabs3	toggle(&glevel,3);	ALL	cpp	self "-DEBUG:format=stabs -g3"
	""

%%% COMBINATIONS
% !-non_shared means "-non_shared not specified"
%"-O3 !-non_shared"	WARNING		"-non_shared"
"-KPIC -non_shared"	WARNING		"-non_shared"
"-abi -non_shared"	WARNING		"-abi"
"-gprel -non_shared"	WARNING		"-gprel"
"-gprel -KPIC"		WARNING		"-gprel"
"-gprel -call_shared"	WARNING		"-gprel"
"-gprel -shared"	WARNING		"-gprel"

%%% OPTIONS
%
% used to be defined like this but we need to pass this options to the
% as and ld. Also need to have coordination between this and the way
% endianness is specified in be.
%
%-EB	toggle(&endian,ENDIAN_BIG);		ALL	NONE	""
%	""
%-EL	toggle(&endian,ENDIAN_LITTLE);		ALL	NONE	""
%	""

#ifdef TARG_ST200
-EB	toggle(&endian,ENDIAN_BIG);	ALL	as,ld  self  "-TENV:big_endian"
	"generate code for big endian target"
-EL	toggle(&endian,ENDIAN_LITTLE);	ALL	as,ld  self "-TENV:little_endian"
	"generate code for little endian target"
#endif
#ifdef TARG_STxP70
% STxP70: do not pass endianess options to as,ld 
-EB	toggle(&endian,ENDIAN_BIG);	ALL	NONE  "-TENV:big_endian"
	NA__STxP70__"generate code for big endian target"
-EL	toggle(&endian,ENDIAN_LITTLE);	ALL	NONE  "-TENV:little_endian"
	NA__STxP70__"generate code for little endian target"
#endif

#ifdef TARG_STxP70
-fp_ace toggle(&fp_lib,LIB_FP_ACE);         ALL     ld     ""
   NA__STxP70__"use lib ACE of COSY instead of lib soft float"
-mlib16	toggle(&lib_kind,LIB_STXP70_16);         ALL     ld     ""
   NA__STxP70__"use 16 register set C library"
-mlib32	toggle(&lib_kind,LIB_STXP70_32);         ALL     ld     ""
   NA__STxP70__"use 32 register set C library"
-Mlib16	toggle(&lib_kind,LIB_STXP70_16);         ALL     ld     ""
        "use 16 register set C library"
-Mlib32	toggle(&lib_kind,LIB_STXP70_32);         ALL     ld     ""
        "use 32 register set C library"
-mlib-short-double	toggle(&lib_short_double,TRUE);	ALL	ld	""
        "use libraries suitable for -fshort-double code generation"
-mlib-nofloat	toggle(&lib_nofloat,TRUE);	ALL	ld	""
        "use libraries without float support"
#endif

%
% These two options are passed to the C front end only
%
-meb		;		ALL	cpp,cfe	self
	NA__STxP70__""	
-mel		;		ALL	cpp,cfe	self
	NA__STxP70__""	
I-m0		;		ALL	GRP	self
	""
I-m1		;		ALL	GRP	self
	""
I-m2		;		ALL	GRP	self
	""
-medusa	add_library_dir("/usr/ia64-sgi-linux/lib/medusa"); ALL	NONE	""
	""
#ifndef TARG_ST
% [CG] obsolete, use -f[un]signed-char
% need to pass the correct option to gfec
%-signed		toggle(&signed_char,TRUE);	Cc	cfe	self
%	"characters are signed by default"
%-unsigned	toggle(&signed_char,FALSE);		Cc	cfe	self
%	"character are unsigned by default"
-signed		toggle(&signed_char,TRUE);		Cc	NONE	""
	"characters are signed by default"
-unsigned	toggle(&signed_char,FALSE);		Cc	NONE	""
	"character are unsigned by default"
#endif

% need to pass the right option to gfec
%-float		;		cc	cfe	self
-float		;		cc	cpp,cfe	"-fallow-single-precision"
	NA__"don't automatically promote floats to doubles"
-float_const	;		cc	cpp,cfe	self
	NA__"treat floating point constants as floats rather than doubles"
-common		;		cc	NONE	""
	NA__"default:  use relaxed ref/def model"
% can be argument to cc, CC, or a cpp flag for fortran.
% the cpp lang will match cpp use but not fortran ffe use.
-dollar		;		Cc,as	cpp,cfe		self
	""

% default defines:
% will later fixup version XXX with value from stamp.h:
I-cpp_version	;		ALL	cpp	"-D_SGI_COMPILER_VERSION=XXX"
	""
I-cpp_sgi	;		ALL	cpp	"-D__sgi"
	""
I-cpp_mips	;		ALL	cpp	"-Amachine(mips) -Acpu(mips)"
	""
I-cpp_ia64	;		ALL	cpp	"-Amachine(ia64) -Acpu(ia64)"
	""
I-cpp_ia32	;		ALL	cpp	"-Amachine(ia32) -Acpu(ia32)"
	""
I-cpp_unix	;		ALL	cpp	"-D__unix -D__unix__"
	""
I-cpp_svr3	;		ALL	cpp	"-D__SVR3 -D_SYSTYPE_SYSV"
	""
I-cpp_svr4	;		ALL	cpp	"-D_SYSTYPE_SVR4"
	""
I-cpp_irix	;		ALL	cpp	"-Asystem(unix)"
	""
I-cpp_linux	;		ALL	cpp	"-D__linux -D__linux__ -Asystem(linux)"
	""
I-cpp_sun	;		ALL	cpp	"-D__sun -D__sun__ -Dsun"
	""
I-cpp_cygwin	;		ALL	cpp	"-D__CYGWIN__"
	""
I-cpp_mingwin	;		ALL	cpp	"-D__MINGW32__"
	""
I-cpp_cfe	;		cc	cpp	"-D_MODERN_C"
	""

I-object		;	ALL	ld	""
	""
-elf			;	ALL	NONE	"-D__ELF__"
	""
I-_SYSTYPE_SVR4		;	ALL	ld	self
	""
-no_unresolved 		warn_ignored(option_name); 	ALL	NONE	""
	""
-ignore_unresolved 	warn_ignored(option_name); 	ALL	NONE	""
	""
-transitive_link 	warn_ignored(option_name); 	ALL	NONE	""
	""
-full_transitive_link 	warn_ignored(option_name); 	ALL	NONE	""
	""
-no_transitive_link 	warn_ignored(option_name); 	ALL	NONE	""
	""

% -useas says to go through the assembler phase
-useas	toggle(&skip_as,FALSE);		ALL	NONE	""
	""
% -noas says to skip the assembler phase
-noas	toggle(&skip_as,TRUE);		ALL	NONE	""
	""
-usegfe		;		Cc	NONE	"-INTERNAL:return_val=on -INTERNAL:mldid_mstid=on -INTERNAL:return_info=on"
	""
-usef90		;		F90	NONE	"-INTERNAL:return_val=on -INTERNAL:mldid_mstid=on -INTERNAL:return_info=on"
	""

-ddopt	warn_no_longer_supported(option_name);  FTN	NONE ""
	""
-ZG	warn_no_longer_supported(option_name);  FTN	NONE ""
	""
-Nq%d	warn_no_longer_needed(option_name);  FTN	NONE self
	""
-Nx%d	warn_no_longer_needed(option_name);  FTN	NONE self
	""
-Ns%d	warn_no_longer_needed(option_name);  FTN	NONE self
	""
-Nc%d	warn_no_longer_needed(option_name);  FTN	NONE self
	""
-Ne%d	warn_no_longer_needed(option_name);  FTN	NONE self
	""
-Nl%d	warn_no_longer_needed(option_name);  FTN	NONE self
	""
-NC%d	;  FTN	ffe "-NC%d"
	"set max # of continuation lines"
-Nn%d	warn_no_longer_needed(option_name);  FTN	NONE self
	""
% use exact name as param rather than option_name for combined options 
-j	warn_no_longer_supported("-j");  ALL	NONE ""
	""

% smart build: use -pch and -pch_dir instead..
-smart%s	warn_no_longer_supported2("-smart","-pch");	 CC NONE ""
	""
I-cvs		;		FTN	F	self
	""
I-cvs,%D	;		FTN	F	"-cvs,%D"
	""
I-cvs_nosrc	;		FTN	F	self
	""
I-cvs_nosrc,%D	;		FTN	F	"-cvs_nosrc,%D"
	""

-automatic	toggle(&isstatic,1);		FTN	NONE	""
	""
-auto_use%s	;			F90	ffe	"-auto_use=%s"
	"Act as if a USE statement is specified in every PU"

-ftpp		toggle(&use_ftpp,1); 	F90	NONE	""
	""
-macro_expand	expand_ftpp_macros=TRUE; 	F90	N	""	
	"expand macros everywhere in ftpp"

-static-data		;		FTN	ffe	self
	"treat local data as static"
-static		toggle(&dynamic,FALSE);		LINK	ld	self	
	""
-static_threadprivate		;		FTN	ffe	self
	"treat locals as static but not shared among multiple threads"

-backslash	first_phase=P_any_fe;		f77	ffe	self
	"treat backslash as normal character rather than an escape"
-noexpopt	;		FTN	be	"-OPT:fast_exp=no"
	"Don't optimize exponentiation operations"
-keepdollar	;		f77	ffe	self
	"Treat $ as a normal last character in symbol names"  
-chararg1	;		f77	ffe	self
	""
-nof77	;		f77	ffe	self
	""
-noappend 		;		FTN	ffe	self
	""
-varargs	;		f77	ffe	self
	"MATRA varargs"
-nocode last_phase=earliest_phase(P_any_fe,last_phase);  FTN ffe   self
        "do not generate any intermediate code from front-end"

-vms	warn_no_longer_supported2(option_name,"-vms_cc"); 	FTN	NONE	self
	""
-vms_cc		;		f77	ffe	self
	""
-old_rl		;		f77	ffe	self
	""
-bytereclen	;		f77	ffe	"-old_rl"
	""
-vms_stdin		;		f77	ffe	self
	""
-vms_endfile		;		f77	ffe	self
	""
-vms_library		;		f77	ffe	self
	""
-usefpidx		;		f	ffe	self
	""

% this should be on by default unless -mp, but off now until freeze over
-cray_directives	;		FTN	N	self
	""

-mipslibs	toggle(&use_mipslibs,TRUE);toggle(&use_craylibs,FALSE);		f77	NONE	""
	""

-craylibs	toggle(&use_craylibs,TRUE);toggle(&use_mipslibs,FALSE);		f77	NONE	""
	""

-cray_mp    toggle(&mpkind,CRAY_MP);	 FTN ffe self 
    "enable Cray micro-tasking directives"

-dsm			;		FTN,Cc	GRP	self
	NA__"enable the DSM directives"

-mp		toggle(&mpkind,NORMAL_MP);		FTN,Cc	ffe	self 
	NA__"enable the multiprocessing directives"

-dsm_clone		;		ALL	ipl,be,d	self
	NA__"run dsm prelinker with cloning for distributed reshaped arrays"

-dsm_check		;		ALL	be	self
	NA__"generate code to do reshape consistency check for args at run-time"

-dsm_recompile		;		ALL	cpp,ffe,cfe,be,ipl	self
	NA__"tell the fe and be to not touch rii files"

-memsim			;		ALL	N	"-LNO:mem_sim=TRUE -lmemsim"
	NA__"instrument for memsim"

-memctr			;		ALL	be	"-memctr"
	NA__"instrument for Origin memory counters"

-mp_keep warn_no_longer_supported2(option_name,"-CLIST/-FLIST"); 	FTN,cc	NONE	""
	""

-mpio			;		FTN	be	self
	NA__"enable Fortran I/O statements to be executed in parallel"

-mp_schedtype=%s	;		FTN	PFA,ffe 	"-mp_schedtype=%s"
	NA__"Set the MP schedule algorithm: simple,dynamic,runtime,interleave,gss"
-chunk=%d		;		FTN	PFA,ffe	"-chunk=%d"
	"Set the MP chunksize"
-mp_chunk=%d		;		FTN	ffe	"-mp_chunk=%d"
	NA__"Set the MP chunksize"

-mp_use_locks	warn_no_longer_needed(option_name);  FTN NONE ""
	""
-mp_use_copy	warn_no_longer_needed(option_name);  FTN NONE ""
	""

-listing	keep_listing=TRUE;		FTN	ffe,PFA	""
	"keep the listing file"
% invoke apo  - which discovers parallelism (synonym for -pfa, -pca)
-apo		auto_parallelize=TRUE;		Cc,FTN	be	"-pfa"
	NA__"run Auto Parallel Optimizer"
-apo*list	auto_parallelize=TRUE;keep_list=TRUE;		Cc,FTN	be	"-pfa -LNO:prompl"
	NA__"run Auto Parallel Optimizer and keep listing"
-apo*keep	auto_parallelize=TRUE;keep_list=keep_mp=TRUE;Process_Promp();		Cc,FTN	be	"-pfa -LNO:prompl"
	NA__"run Auto Parallel Optimizer and keep listing and pfa output"
% invoke pfa  - which discovers parallelism
-pfa		auto_parallelize=TRUE;		Cc,FTN	be	"-pfa"
	NA__"run Power Fortran Analyzer"
-pfa*list	auto_parallelize=TRUE;keep_list=TRUE; 	Cc,FTN	be	"-pfa -LNO:prompl"
	NA__"run Power Fortran Analyzer and keep listing"
-pfa*keep	auto_parallelize=TRUE;keep_list=keep_mp=TRUE;Process_Promp();		Cc,FTN	be	"-pfa -LNO:prompl"
	NA__"run Power Fortran Analyzer and keep listing and pfa output"
% Because of limitation on derived flags, we repeat the -pfa,%s in the 
% implied list.  This is to find the parent flag so action is done.
-pfa,%s		{auto_parallelize=TRUE; warning("options after -pfa, are ignored; should just use -pfa");}		Cc,FTN	be	"-pfa"
	""
-pfa2	warn_no_longer_supported2(option_name,"-pfa");  ALL NONE ""
	""
I-lo=ocktl	;		FTN	PFA	self
	""

-i2	toggle(&iflag,1);		f77	ffe	self
	"make integer and logical quantities short (2 bytes)"

-noi4	toggle(&iflag,1);		f77	ffe	self
	"make integer and logical quantities short (2 bytes)"

-i4	toggle(&iflag,2);		FTN	ffe	self
	"make integer and logical quantities long (4 bytes)"

-i8	toggle(&iflag,3);		FTN	ffe	self
	"make integer and logical quantities long long (8 bytes)"

-r4	toggle(&rflag,1);		FTN	ffe	self
	"use REAL*4 and COMPLEX*8 as the defaults for real and complex" 

-r8	toggle(&rflag,2);		FTN	ffe	self
	"use REAL*8 and COMPLEX*16 as the defaults for real and complex" 

-r8const 		;		f77	ffe	self
	""

-d8	toggle(&dflag,1);		FTN	ffe	self
	"use double=8 and dcomplex=16"

-d16	toggle(&dflag,2);		FTN	ffe	self
	"use double=16 and dcomplex=32"

-d16const 		;		f77	ffe	self
	""

-dump_input 		;		f77	ffe	self
	""

-extend_source fortran_line_length=132;		FTN	ffe	self "-scan=132"
	"make each source line 132 bytes long"

-d_lines		;		FTN	ffe	self
	"compile lines with a D in column 1"
-pad_char_literals		;		F90	ffe	self
	"blank pad character literal actual arguments to word boundary"
-expand_include		;		FTN	ffe	self
	""
-noextend_source fortran_line_length=72;		FTN	ffe	self "-scan=72"
	"sets the source statement length to 72 columns"
-col72	fortran_line_length=72;		FTN	ffe	self "-scan=72"
	"sets the source statement length to 72 columns"

-col80	fortran_line_length=80;		F90	ffe	self "-scan=80"
	"sets the source statement length to 80 columns"

-col120	fortran_line_length=120; 	FTN	ffe	self "-scan=120"
	"sets the source statement length to 120 columns"

I-scan%s		;		FTN	PFA	self
	""

-freeform	toggle(&fortran_form,2);		F90	ffe	""
	"sets Fortran 90 free form source statement formatting"

-fixedform	toggle(&fortran_form,1);		F90	ffe	""
	"sets Fortran 90 fixed form source statement formatting"

-default64 		;	 	F90	 ffe 	self
	"Cray compatibility mode for F90"

% handle with special routine which reads option groups
% after all switches read, pass switch to ld if ipa run, or to inline if
% stand-alone inliner run
#ifdef TARG_ST	
// [CL] send -INLINE:xxx to ipl phase
-INLINE:%s	Process_Inline();	       ALL     ipl,ipap	"-INLINE:%s"
#else
-INLINE:%s	Process_Inline();	       ALL     ipap	"-INLINE:%s"
#endif
	NA__STxP70__"specify inline processing option group"

% handle with special routine which reads option groups
#ifdef TARG_STxP70
-INLINE		Process_Inline();	       ALL     NONE    ""
   "-INLINE|-inline     request inline processing"
#else
-INLINE		Process_Inline();	       ALL     NONE    ""
   "request inline processing"
#endif

-inline		Process_Inline();		Cc	NONE	"-INLINE"
	NA__STxP70__"request inline processing"

-noinline	Process_Inline();		Cc	NONE	"-INLINE:=OFF"
	"suppress inline processing"
-nobool	;		CC 	cpp,cfe	self
	"disallow bool keyword"
-exceptions	;	CC	cpp,cfe,be	"-LANG:exc"
	"turn on support for exception-handling"
-no_exceptions	;	CC	cpp,cfe,be	"-LANG:exc=OFF"
	"turn off support for exception-handling (default)"
-noisam		warn_no_longer_supported(option_name);  FTN NONE ""
	""

% warn about old flag no longer supported; new driver will split this
% flag, which may cause confusion
-Olimit%d	warn_no_longer_supported2(option_name,"-OPT:Olimit=n");  ALL NONE self
	""
-bestGnum	warn_no_longer_supported(option_name);  ALL NONE ""
	""
-volatile	warn_no_longer_supported(option_name);  Cc NONE ""
	""
-acpp		warn_no_longer_needed(option_name);  Cc NONE ""
	""
-oldcpp		warn_no_longer_supported(option_name);  Cc NONE ""
	""

-pch		;		Cc	cpp,cfe	self
	""
-pch_dir%s		;		Cc	cpp,cfe	"-pch_dir%s"
	""
-prototypes	warn_no_longer_supported2(option_name,"-fullwarn");  Cc NONE ""
	""
-noprototypes	warn_no_longer_supported(option_name);  Cc NONE ""
	""
-pedantic		;		Cc	cpp,cfe	self
	"issue all warnings demanded by strict ISO C"

-use_readonly_const	;		Cc,FTN	cpp,cfe	self
	""
-use_readwrite_const	;		Cc,FTN	cpp,cfe	self
	""
-change_const		;		FTN	NONE	""
	""
-noalias	warn_no_longer_supported2(option_name,"-OPT:alias=restrict");  cc NONE ""
	""
-strictIEEE	warn_no_longer_supported2(option_name,"-OPT:IEEE_comparisons");  f77 NONE ""
	""
%I-tt%s		;		ALL	be	self
%	""
-wlint,%s	warn_nyi("-wlint");		cc	cfe	""
	""
-wlint		warn_nyi("-wlint");		cc	cfe	""
	""

% sopt is no longer supported
-sopt,%s warn_no_longer_supported(option_name);	 cc,FTN	NONE	""
	""
-sopt	warn_no_longer_supported(option_name);	 cc,FTN	NONE	""
	""

% invoke pca  - which discovers parallelism
-pca		auto_parallelize=TRUE;		Cc,FTN	be	"-pfa"
	NA__"run Power C Analyzer"
-pca*list	auto_parallelize=TRUE;keep_list=TRUE; 	Cc,FTN be "-pfa -LNO:prompl"
	NA__"run Power C Analyzer and keep listing"
-pca*keep	auto_parallelize=TRUE;keep_list=keep_mp=TRUE;Process_Promp();	 cc,FTN be	"-pfa -LNO:prompl"
	NA__"run Power C Analyzer and keep listing and pca output"
-pca,%s		{auto_parallelize=TRUE; warning("options after -pca, are ignored; should just use -pca");}	Cc,FTN	be	"-pfa"
	""

% for kernel folks
-jalr		;		ALL	NONE	"-TARG:force_jalr"
	""
-align8		;		Cc,f77	cpp,FE,be	self
	NA__"align data in common blocks to 8-bit boundaries"
-align16	;		Cc,f77	cpp,FE,be	self
	NA__"align data in common blocks to 16-bit boundaries"
-align32	;		Cc,FTN	cpp,FE,be	self
	NA__"align data in common blocks to 32-bit boundaries"
-align64	;		Cc,FTN	cpp,FE,be	self
	NA__"align data in common blocks to 64-bit boundaries"
-align128	;		Cc,f77	cpp,FE,be	self
	NA__"align data in common blocks to 128-bit boundaries"
% -u can have two different meanings, so escape to hand-code
-u*		;		ALL	NONE	""
	""
I-u%s		;		Cc	ld	"-u %s"
	""
-ignore_minor	;		LINK	ld	self
	""
-require_minor	;		LINK	ld	self
	""
-aoutkeep	;		LINK	ld	self
	""
-exact_version	;		LINK	ld	self
	""
-set_version%s	;		LINK	ld	"-set_version %s"
	""
-soname%s	;		LINK	ld	"-soname %s"
	""
-update_registry%s	; 	LINK	ld	"-update_registry %s"
	""
-check_registry%s	; 	LINK	ld	"-check_registry %s"
	""
-guarantee_init	;		LINK	ld	self
	""
-guarantee_start_init	; 	LINK	ld	self
	""
-ignore_version	;		LINK	ld	self
	""
-jmpopt		;		LINK	ld	self
	""
-no_library_replacement	; 	LINK	ld	self
	""
-rdata_writable	; 	LINK	ld	self
	""
-rdata_shared	; 	LINK	ld	self
	""
-no_rqs	; 	LINK	ld	self
	""
-force_load	; 	LINK	ld	self
	""
-delay_load	; 	LINK	ld	self
	""
-default_delay_load	; 	LINK	ld	self
	""
-exclude%s	;		LINK	ld	"-exclude %s"
	""
-no_archive	; 	LINK	ld	self
	""
-quickstart_info	; 	LINK	ld	self
	""
-no_quickstart_info	; 	LINK	ld	self
	""
-info	; 	LINK	ld	self
	""
-no_info	; 	LINK	ld	self
	""
-s		;		LINK	ld	self
	""
-e%s		;		LINK	ld	"-e %s"
	""
-y%s		;		LINK	ld	"-y %s"
	""

#ifdef TARG_ST
% [CG] This option does not exist for the linker
#else
% the truth is, we use %x so this will be seen before %s;
% in other respects %x is the same as %d.
-D%x		;		LINK	ld	"-D %d"
	""
#endif
#ifdef TARG_ST
% [CG] %x restricts to link scripts beginning with a decimal, use %s instead
#ifdef TARG_STxP70
-T%s	add_script_file(optargs);		ALL	NONE	""
   "-T<ldscript>        use <ldscript> file as the linker script"
#else
-T%s	add_script_file(optargs);		ALL	NONE	""
	"use the following file as the linker script"
#endif
#else
% %x restricts to link scripts beginning with a decimal, use %s instead
-T%s		;		LINK	ld	"-T %s"
	""
#endif
-Xnobsschange	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xnosortbss	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xsortbss	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xndblock%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xblock%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xblockrange%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xlocaldata%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xndlocaldata%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xalignbss%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xnoalignbss%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xcachemisalign	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xcachesize%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xcachelinesize%s warn_no_longer_supported(option_name);  ALL	NONE self
	""
-Xdefmovemax%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xsetalign%s	warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-Xdebug		warn_no_longer_supported(option_name);	 ALL	NONE self
	""
-n		;		LINK	ld	self
	""
-all		;		LINK	ld	--whole-archive
	""
-none		;		LINK	ld	self
	""
-notall		;		LINK	ld	--no-whole-archive
	""
-exports	;		LINK	ld	self
	""
-exported_symbol%s	;		LINK	ld	"-exported_symbol %s"
	""
-exports_file%s	;		LINK	ld	"-exports_file %s"
	""
-hides		;		LINK	ld	self
	""
-hidden_symbol%s	;		LINK	ld	"-hidden_symbol %s"
	""
-hides_file%s	;		LINK	ld	"-hides_file %s"
	""
-warn_unused	;		LINK	ld	self
	""
-dont_warn_unused	;		LINK	ld	self
	""
-rpath%s	;		LINK	ld	"-rpath %s"
	""
--whole-archive		;	LINK	ld	self
	""
--no-whole-archive	;	LINK	ld	self
	""
-avoid_gp_overflow	;		ALL	NONE	"-G0 -xgot -TENV:large_GOT"
	""

% CC options:
-cfront		;		CC	cpp,cfe	self
	"cfront-compatible"
-anach		;		CC	cpp,cfe	self
	"allow anachronisms"
-nofilt	warn_ignored(option_name);	 	CC	NONE	""
	""
#ifndef TARG_ST
% to be enabled with 2.13 version of the linker.
-demangle	;		CC	ld	self
	""
#endif
-auto_include 	;		CC	NONE	""
	""
-no_auto_include ;		CC	cpp,cfe	"-no_implicit_template_inclusion"
	""
I-no_implicit_template_inclusion	;		CC	cfe	self
	""
-prelink	;		CC	NONE	""
	"use prelinker (default)"
-no_prelink	prelink_flag=FALSE;		CC	cpp,cfe	self
	"do not use prelinker (i.e. instantiate all templates immediately)"
-pta		;		CC	NONE	"-template_all"
	""
-ptall		;		CC	NONE	"-template_all"
	""
-pte		;		CC	NONE	""
	""
-ptnone		;		CC	NONE	""
	""
-ptused		;		CC	NONE	"-template_used"
	""
I-template_all		;		CC	cfe	self
	""
I-template_used		;		CC	cfe	self
	""

#ifdef BCO_ENABLED
% Thierry begin
% Cache optims options:
--deadcode toggle(&deadcode,TRUE);              ALL    binopt      ""
        "Perform dead code removal at binary level"
--no-deadcode toggle(&deadcode,FALSE);           ALL    binopt      ""
        "Do not perform dead code removal at binary level"

--icache-opt=%s	Process_ICache_Group(optargs);	ALL	NONE	""
	"Perform Instruction Cache optimization (on, off). Use with --icache-static, --icache-profile or --icache-mapping"

--icache-static	toggle(&icache_static,TRUE);	ALL	NONE	""
	"Perform Instruction Cache optimization from static profiling."

--icache-static=%s	Process_ICachestatic_Group(optargs);	ALL	NONE	""
	"Perform Instruction Cache optimization from static profiling (on, off)."

--icache-profile=%s	Process_ICacheprofile_Group(optargs);	ALL	NONE	""
	"Enable dynamic profiling. Give profile file."

--icache-profile-exe=%s	Process_ICacheprofileExe_Group(optargs);	ALL	NONE	""
	"Give executable associared to trace file given by --icache-profile option."

--icache-mapping=%s	Process_ICachemapping_Group(optargs);	ALL	NONE	""
	"Give a function mapping file for order in final binary."

--icache-algo=%s	Process_ICachealgo_Group(optargs);	ALL	NONE	""
	"Give the instruction cache optimizer algorithm \n\t\t(ph for Pettis & Hansen, col for Coloring, trg for Temporal Based Algo).\n\t\tNeed --icache-opt=on and one of --icache-static or --icache-profile"
% Thierry end
#endif

% IPA-related options:
#ifdef TARG_STxP70
-ipa	;		ALL	NONE	""
	NA__STxP70__"Perform interprocedural analysis and optimization"

-IPA	;		ALL	NONE	""
	NA__STxP70__"Perform interprocedural analysis and optimization"
#else
-ipa	toggle(&ipa,TRUE);		ALL	ipap	self
	NA__STxP70__"Perform interprocedural analysis and optimization"

-IPA	toggle(&ipa,TRUE);		ALL	NONE	"-ipa"
	NA__STxP70__"Perform interprocedural analysis and optimization"
#endif
#ifdef TARG_ST
-ipalibs	toggle(&ipalibs,TRUE);toggle(&ipa,TRUE);		ALL	ipap	self
	NA__"Link with IPA-instrumented libraries"
#endif
-R*		;		ALL	NONE	""
	NA__"pass flags to RATFOR"
-m	run_m4=TRUE;		f77	NONE	""
	NA__"run m4 on each RATFOR source"
-framepointer	warn_no_longer_supported2(option_name,"-TENV:large_stack");  ALL	NONE ""
	""
-trapuv 		;		Cc,FTN	be	"-DEBUG:trap_uninitialized"
	"trap uninitialized variables"
#ifdef TARG_ST
%%% TB Add -zerouv option from PathScale 2.1	
-zerouv 		;		Cc,FTN	be	"-DEBUG:zero_uninitialized"
	"set uninitialized variables to zero"
#endif

#if defined(linux) || defined(sun) || defined(__CYGWIN__) || defined(__MINGW32__)
-H	;		Cc,as	cpp	self
	"print name of each header file used"
#else
-H%s	change_last_phase(optargs); 	ALL	NONE	""
	"-H<phase> Halt after phase {p=cpp,f=fe,b=be,a=as,l=ld}"
#endif
% obsolete ucode internal flags
-t%s	warn_no_longer_supported2(option_name,"-Y");		ALL	NONE	self
	""
-h%s	warn_no_longer_supported2(option_name,"-Y");		ALL	NONE	self
	""
-B%s	warn_no_longer_supported2(option_name,"-Y");		ALL	NONE	self
	""
-ko%s	warn_no_longer_supported(option_name);		ALL	NONE	self
	""
-nokpicopt	warn_no_longer_supported(option_name);		ALL	NONE	""
	""
-kpicopt	warn_no_longer_supported(option_name);		ALL	NONE	""
	""
-k%s	warn_no_longer_supported(option_name);		ALL	NONE	self
	""
% cord
-cord	toggle(&cordflag,TRUE);		ALL	NONE	""
	NA__"Run cord"
-feedback*%s	add_string(feedback_files,optargs);		ALL	NONE	""
	NA__"Specify feedback file for cord"
-fb%s	save_name(&fb_file,optargs);		ALL	NONE	""
	NA__STxP70__"Specify feedback file"
-nodeflib	;			ALL	NONE	""
	""
-r4000          toggle(&proc,4);  ALL     NONE    "-TARG:proc=r4000"
        ""
-r5000          toggle(&proc,5);  ALL     NONE    "-TARG:proc=r5000"
        ""
-r7000          toggle(&proc,5);  ALL     NONE    "-TARG:proc=r5000"
        ""
-r8000          toggle(&proc,8);  ALL     NONE    "-TARG:proc=r8000"
        ""
-r10000         toggle(&proc,10);        ALL     NONE    "-TARG:proc=r10000"
        ""
-r12000         toggle(&proc,10);        ALL     NONE    "-TARG:proc=r10000"
        ""
-r14000         toggle(&proc,10);        ALL     NONE    "-TARG:proc=r10000"
        ""
-r16000         toggle(&proc,10);        ALL     NONE    "-TARG:proc=r10000"
        ""
% r31k is arbitrary for experimental processors:
I-exp1		toggle(&proc,31);        ALL     NONE    "-TARG:proc=exp1"
        ""
I-exp2		toggle(&proc,31);        ALL     NONE    "-TARG:proc=exp2"
        ""
I-exp3		toggle(&proc,31);        ALL     NONE    "-TARG:proc=exp3"
        ""
#ifdef TARG_ST
%%% Don't pass to a specific phase
-		read_stdin=TRUE;	ALL	NONE	""
	""
#else
-		read_stdin=TRUE;	ALL	cpp	""
	""
#endif
--		check_dashdash();	ALL	NONE	""
	""
-ignore_suffix	ignore_suffix=TRUE;	ALL	NONE	""
	"ignore source suffix when determining compiler language"

-cif    keep_cif=TRUE;       F90,Cc	cpp,FE      self
        ""

-cif=%d 	;	Cc	cpp,cfe	"-cif=%d"
        ""

-ar	;		ALL	NONE	""
	NA__"create an archive (instead of a shared object or executable) using ar"

-experimental warn_no_longer_supported(option_name); 	CC	NONE
	NA__"Experimental C++ frontend that was supported in 7.1 release"

-promp	;	 	FTN,Cc	 be	"-PHASE:prompf -PROMP:=on"
	NA__"Activate promp generation of .anl and .m files"

-generate_instantiation_info ;  CC	cpp,cfe    self
	NA__"Internal option - Used by the C++ prelinker to the frontend"
%%% gcc compiler options
-pipe	;		ALL	NONE	""
	""
% -x%s	warn_ignored(option_name);		ALL	NONE	self
%	""
--help	;		ALL	NONE	""
	"print list of possible options"

#ifdef TARG_ST
-gcc 		toggle(&nogcc,0);		Cc	NONE	self
	"do recognize gcc extensions"
-no-gcc 	toggle(&nogcc,1);		Cc	NONE	self
	"do not recognize gcc extensions"
#ifdef TARG_STxP70
-std=%s Process_Std(optargs);		Cc	NONE	""
   "-std=<lang>         determine the language standard"
#else
-std=%s Process_Std(optargs);		Cc	NONE	""
   "determine the language standard"
#endif
#endif

%%% C++ language options
-frtti				;		CC	f,cpp	self
	"enable generation of rtti information"
-fno-rtti			;		CC	f,cpp	self
	"disable generation of rtti information"
-fhandle-exceptions	toggle(&noexceptions,FALSE);	Cc	f,cpp	self "-LANG:exc=ON -CG:emit_unwind_info=on"
	"enable exception handling"
-fexceptions	toggle(&noexceptions,FALSE);	Cc	f,cpp	self "-LANG:exc=ON -CG:emit_unwind_info=on"
	"Enable exception handling"
-fno-exceptions	toggle(&noexceptions,TRUE);	Cc	f,cpp	self "-LANG:exc=OFF"
	"disable exception handling"
-fno-handle-exceptions	toggle(&noexceptions,TRUE);	Cc	f,cpp	self "-LANG:exc=OFF"
	"Disable exception handling"
-funwind-tables	;		Cc	NONE	"-CG:emit_unwind_info=on -LANG:exc=ON"
	""
-fno-unwind-tables	;	Cc	NONE	"-CG:emit_unwind_info=off"
	""
-fuse-cxa-atexit		;		CC	f,cpp	self
	"use cxa_atexit to register destructors"
-fno-use-cxa-atexit		;		CC	f,cpp	self
	"use atexit instead of cxa_atexit to register destructors"
-fhuge-objects			;		CC	f,cpp	self
	"enable support for huge objects"
-fno-huge-objects		;		CC	f,cpp	self
	"disable support for huge objects"
-fcheck-new			;		CC	f,cpp	self
	"check the return value of new"
-fno-check-new			;		CC	f,cpp	self
	"don't check the return value of new"
-fdump-class-hierarchy		;		CC	f,cpp	self
	"dump class hierarchy from front end"
-fdump-translation-unit		;		CC	f,cpp	self
	"dump tree nodes from front end"
-fstats				;		CC	f,cpp	self
	"collect and print statistics"
-fabi-version=%s		;		CC	f,cpp	-fabi-version=%s
	"set version of the C++ ABI"
-fimplicit-templates		;		CC	f,cpp	self
	"emit code for non-inline templates which are instantiated implicitly"
-fno-implicit-templates		;		CC	f,cpp	self
	"never emit code for non-inline templates which are instantiated implicitly"
-fno-implicit-inline-templates		;		CC	f,cpp	self
	"don't emit code for implicit instantiations of inline templates and non-inline templates."
-fimplement-inlines		;		CC	f,cpp	self
	"emit out-of-line copies of inline functions controlled by #pragma implementation."
-fno-implement-inlines		;		CC	f,cpp	self
	"do not emit out-of-line copies of inline functions controlled by #pragma implementation."
-frepo		;		CC	f,cpp	self
	"enable automatic template instantiation at link time. "
-faccess-control 		;		CC	f,cpp	self
	"turn on all access checking"
-fno-access-control 		;		CC	f,cpp	self
	"turn off all access checking"
-felide-constructors 	;		CC	f,cpp	self
	"omit creating a temporary which is only used to initialize another object of the same type"
-fno-elide-constructors 	;		CC	f,cpp	self
	"forces compiler to call the copy constructor even when it could be optimized out"
-fenforce-eh-specs 	;		CC	f,cpp	self
	"Generate code to check for violation of exception specifications at runtime (default)"
-fno-enforce-eh-specs 	;		CC	f,cpp	self
	"Don't generate code to check for violation of exception specifications at runtime"
-ftemplate-depth-%d		;		CC	f,cpp	-ftemplate-depth-%d
	"set the maximum instantiation depth for template classes to n"
-ffor-scope		;		CC	f,cpp	self
	"the scope of variables declared in a for-init-statement is limited to the for loop itself, as specified by the C++ standard"
-fno-for-scope		;		CC	f,cpp	self
	"the scope of variables declared in a for-init-statement extends to the end of the enclosing scope"
-fno-gnu-keywords		;		CC	f,cpp	self
	"do not recognize typeof as a keyword"
-fno-ms-extensions			;		CC	f,cpp	self
	"disable pedantic warnings about constructs used in MFC"
-fpermissive			;		CC	f,cpp	self
	"downgrade some diagnostics about nonconformant code from errors to warnings"
%%% C++ Warning options
-Wabi 				;		CC	f,cpp	self
	"warn when compiler generates code that is probably not compatible with the vendor-neutral C++ ABI"
-Wctor-dtor-privacy 		;		CC	f,cpp	self
	"warn when a class seems unusable because all the constructors or destructors in that class are private"
#if defined (TARG_ST)
// (cbr) ddts st24831
-Wno-ctor-dtor-privacy 		;		CC	f,cpp	self
	"Warn when a class seems unusable because all the constructors or destructors in that class are private"
-Wnon-virtual-dtor 		;		CC	f,cpp	self
	"warn when declaring a class that has a non virtual destructor, when it really ought to have a virtual one. "
-Wno-non-virtual-dtor 		;		CC	f,cpp	self
	"don't warn when declaring a class that has a non virtual destructor, when it really ought to have a virtual one. "
-Wsynth ;			Cc	f,cpp	self
	"Nonzero means warn when synthesis behavior differs from Cfront's."
-Wsign-promo ;			Cc	f,cpp	self
	"warn where overload resolution chooses a promotion from unsigned to signed over a conversion to an unsigned of the same size."
#endif

-Weffc++			;		CC	f,cpp	self
	"warn about violations of style guidelines from Scott Meyers' Effective C++ book"
-Wold-style-cast		;		CC	f,cpp	self
	"warn if an old-style cast to a non-void type is used within a C++ program"
-Woverloaded-virtual		;		CC	f,cpp	self
	"warn when a function declaration hides virtual functions from a base class"
	/* (cbr) */
-Wno-deprecated			;		CC	f,cpp	self
	"do not warn about usage of deprecated features"
-Wno-pmf-conversions		;		CC	f,cpp	self
	"disable the diagnostic for converting a bound pointer to member function to a plain pointer"
-Wreorder			;		CC	f,cpp	self
	"warn when the order of member initializers given in the code does not match the order in which they must be executed"
#ifdef TARG_ST
-Wno-reorder			;		CC	f,cpp	self
	"Don't warn when the order of member initializers given in the code does not match the order in which they must be executed"
#endif
-Wno-non-template-friend			;		CC	f,cpp	self
	"disable warnings when non-templatized friend functions are declared within a template"
%%% C++ Diagnostic options
-fmessage-length=%d		;		CC	f,cpp	-fmessage-length=%d
	"try to format error messages so that they fit on lines of about n characters"
-fdiagnostics-show-location=%s	;		CC	f,cpp	-fdiagnostics-show-location=%s
	"instructs the diagnostic messages reporter to emit 'once' or 'every-line' source location information"

/* (cbr) pass to front end for cpp macros */
%%% C language options
-flang-isoc9x	;		Cc	f,cpp	self
	""
-fallow-single-precision	;		Cc	f,cpp	self
	NA__"Do not promote floats to double if using -traditional"
-fsingle-precision-constant 	;		Cc	cpp,FE	self
	"-fsingle-precision-constant\n                    treat floating point constant as single precision instead of implicitly converting it to double"
-fcond-mismatch	;		Cc	f,cpp	self
	NA__"Allow different types as args of ? operator"
-fno-cond-mismatch	;		Cc	f,cpp	self
	""
-fasm	;		Cc	f,cpp	self
	""
-fno-asm	;		Cc	f,cpp	self
	"do not recognise the 'asm' keyword"

-fbuiltin	;		Cc	f,cpp	self
	""
-fno-builtin	;		Cc	f,cpp	self
	"do not recognise any built in functions"
-ffreestanding 	;		Cc	cpp	self
	"assume that standard libraries & main might not exist"
-fno-freestanding	toggle(&hosted,1);		Cc	cpp,f	self
	""
#ifdef TARG_ST
  // (cbr) 
-fno-pragmas	;		Cc	cpp,f	self
	"Do not process #pragmas"
#endif
-fhosted	;		Cc	cpp	self
	"assume normal C execution environment"
-fno-hosted	;		Cc	cpp	self
	""
-fsigned-bitfields	;		Cc	cpp,f	self
	""
-fno-signed-bitfields	;		Cc	cpp,f	self
	""
-fsigned-char		;	Cc	cpp,FE	self
	"make 'char' be signed by default"
-fno-signed-char	;	Cc	cpp,FE	self
	"make 'char' be unsigned by default"
-funsigned-bitfields	;	Cc	cpp,FE	self
	"make bitfields by unsigned by default"
-fno-unsigned-bitfields	;	Cc	cpp,FE	self
	""
-funsigned-char		;	Cc	cpp,FE	self
	"make 'char' be unsigned by default"
-fno-unsigned-char 	;	Cc	cpp,FE	self
	"make 'char' be signed by default"

	/* (cbr) not supported */
-fwritable-strings warn_ignored(option_name); Cc	cpp,f	self
	NA__"Attempt to support writable-strings K&R style C"

-fno-writable-strings	;		Cc	f,cpp	self
	""

-ftraditional	;		Cc	f,cpp	self
	""
-fno-traditional ;		Cc	f,cpp	self
	""
-fnotraditional	;		Cc	f,cpp	self
	""
#ifdef TARG_ST
%%% Our cpp does not take this
-traditional	;		Cc	f,cpp	self
	"attempt to support traditional K&R style C"
-no-traditional	;		Cc	f,cpp	self
	""
% cpp is also a define, so trick cpp
#if defined (TARG_ST)
   /* (cbr) use embedded cc1 cpp */
-traditional-c/**/pp	;	Cc	cpp	"-traditional-cpp"
	""
#else
-traditional-c/**/pp	;	Cc	cpp	""
	""
#endif
#else
-traditional	;		Cc	cpp	self
	"attempt to support traditional K&R style C"
-no-traditional	;		Cc	f	self
	""
% cpp is also a define, so trick cpp
-traditional-c/**/pp	;		Cc	NONE	"-traditional"
	""
#endif

#if defined(linux) || defined(sun) || defined(__CYGWIN__) || defined(__MINGW32__)
-trigraphs	;		Cc	f,cpp	self
	"support ISO C trigraphs"
#else
-trigraphs	;		Cc	f,cpp	self
	""
#endif

%%% Warning Options
-syntax-only	;		Cc	cpp,f	self
	""
-pedantic-errors	;		Cc	cpp,f	self
	"issue -pedantic warnings as errors instead"
-W	;		Cc	f,cpp	self
	"enable extra warnings"
-Wall	Add_Wuninitialized();		Cc	cpp,f	self
	"enable most warning messages"
-Waggregate-return	;		Cc	f,cpp	self
	"warn about returning structures, unions or arrays"
-Wno-aggregate-return	;		Cc	f,cpp	self
	""
-Wbad-function-cast	;		Cc	f,cpp	self
	"attempt to support writable-strings K&R style C"
-Wno-bad-function-cast	;		Cc	f,cpp	self
	""
-Wcast-align	;		Cc	f,cpp	self
	"warn about pointer casts which increase alignment"
-Wno-cast-align	;		Cc	f,cpp	self
	""
-Wcast-qual	;		Cc	f,cpp	self
	"warn about casts which discard qualifiers"
-Wno-cast-qual	;		Cc	f,cpp	self
	""
-Wchar-subscripts	;		Cc	f,cpp	self
	"warn about subscripts whose type is 'char'"
-Wno-char-subscripts	;		Cc	f,cpp	self
	""
-Wcomment	;		Cc	cpp,f	self
	"warn if nested comments are detected"
-Wcomments	;		Cc	cpp,f	self
	"warn if nested comments are detected"
-Wno-comment	;		Cc	cpp,f	self
	"do not warn about comments"
-Wno-comments	;		Cc	cpp,f	self
	"do not warn about comments"
-Wconversion	;		Cc	f,cpp	self
	"warn about possibly confusing type conversions"
-Wno-conversion	;		Cc	f,cpp	self
	""
-Werror		;		Cc	cpp,f	self
	"treat all warnings as errors"
-Wno-error	;		Cc	cpp,f	self
	"do not treat warnings as errors"
#ifdef TARG_ST
-Wsystem-headers	;		Cc	cpp	self
	"do not suppress warnings from system headers"
-Wno-system-headers	;		Cc	cpp	self
	"suppress warnings from system headers"
#endif
-Wformat	;		Cc	f,cpp	self
	"warn about printf format anomalies"
-Wno-format	;		Cc	f,cpp	self
	""
-Wid-clash%d	;		Cc	f,cpp	self
	"warn if 2 identifiers have the same first <num> chars"
-Wimplicit	;		Cc	f,cpp	self
	""
-Wno-implicit	;		Cc	f,cpp	self
 	""
-Wimplicit-int	;		Cc	f,cpp	self
	"warn when a declaration does not specify a type"
-Wno-implicit-int	;		Cc	f,cpp	self
	""
-Wimplicit-function-declaration	;		Cc	f,cpp	self
	""
-Wno-implicit-function-declaration	;		Cc	f,cpp	self
	""
-Werror-implicit-function-declaration	;		Cc	f,cpp	self
	""
%-Wno-error-implicit-function-declaration	;		Cc	f,cpp	self
%	""
-Wimport	;		Cc	cpp,f	self
	"warn about the use of the #import directive"
-Wno-import	;		Cc	cpp,f	self
	"do not warn about the use of #import"
-Winline	;		Cc	f,cpp	self
	""
-Wno-inline	;		Cc	f,cpp	self
	""
-Wlarger-than%d	;		Cc	f,cpp	self
	"warn if an object is larger than <number> bytes"
-Wlong-long	;		Cc	f,cpp	self
	""
-Wno-long-long	;		Cc	f,cpp	self
	""
-Wmain	;		Cc	f,cpp	self
	"warn about suspicious declarations of main"
-Wno-main	;		Cc	f,cpp	self
	""
-Wmissing-braces	;	Cc	f,cpp	self
	"warn about possibly missing braces around initialisers"
-Wno-missing-braces	;	Cc	f,cpp	self
	"warn about possibly missing braces around initialisers"
-Wmissing-declarations	;		Cc	f,cpp	self
	"warn about global funcs without previous declarations"
-Wmissing-prototypes	;		Cc	f,cpp	self
	"warn about global funcs without prototypes"
-Wno-missing-declarations	;		Cc	f,cpp	self
	""
-Wmissing-noreturn	;		Cc	f,cpp	self
	"warn about global funcs without previous declarations"
-Wno-missing-noreturn	;		Cc	f,cpp	self
	""
-Wno-missing-prototypes	;		Cc	f,cpp	self
	""
-Wmultichar	;		Cc	f,cpp	self
	""
-Wno-multichar	;		Cc	f,cpp	self
	""
-Wnested-externs	;		Cc	f,cpp	self
	"warn about externs not at file scope level"
-Wno-nested-externs	;		Cc	f,cpp	self
	""
-Wparentheses	;		Cc	f,cpp	self
	"warn about possible missing parentheses"
-Wno-parentheses	;		Cc	f,cpp	self
	""
-Wpointer-arith	;		Cc	f,cpp	self
	"warn about function pointer arithmetic"
-Wno-pointer-arith	;		Cc	f,cpp	self
	""
#if defined(TARG_ST)
-Wpacked	;		Cc	f,cpp	self
	"warn if a structure is given the packed attribute, but the packed attribute has no effect"
-Wno-packed	;		Cc	f,cpp	self
	""
-Wpadded	;		Cc	f,cpp	self
	"warn if padding is included in a structure"
-Wno-padded	;		Cc	f,cpp	self
	""
#endif
// (cbr) ddts st24453 .
-Wunused-function ;		Cc	f,cpp	self
	"Warn when a function is unused"
-Wno-unused-function ;		Cc	f,cpp	self
	""
-Wunused-label ;		Cc	f,cpp	self
	"Warn when a label is unused"
-Wno-unused-label ;		Cc	f,cpp	self
	""
-Wunused-parameter ;		Cc	f,cpp	self
	"Warn when a parameter is unused"
-Wno-unused-parameter ;		Cc	f,cpp	self
	""
-Wunused-variable ;		Cc	f,cpp	self
	"Warn when a variable is unused"
-Wno-unused-variable ;		Cc	f,cpp	self
	""
-Wunused-value ;		Cc	f,cpp	self
	"Warn when an expression value is unused"
-Wno-unused-value ;		Cc	f,cpp	self
	""
-Wunused-macros	;		Cc	f,cpp	self
	"Warn about unused macros"
-Wno-unused-macros ;		Cc	f,cpp	self
	""
-Wendif-labels ;		Cc	f,cpp	self
	"Warn about text following #else/#endif"
-Wno-endif-labels ;		Cc	f,cpp	self
	""
-Wredundant-decls	;		Cc	f,cpp	self
	"warn about multiple declarations of the same object"
-Wno-redundant-decls	;		Cc	f,cpp	self
	""
-Wreturn-type	;		Cc	f,cpp	self
	""
-Wshadow	;		Cc	f,cpp	self
	"warn when one local variable shadows another"
-Wno-shadow	;		Cc	f,cpp	self
	""
-Wsign-compare	;		Cc	f,cpp	self
	"warn about signed/unsigned comparisons"
-Wno-sign-compare	;		Cc	f,cpp	self
	""
-Wstrict-prototypes	;		Cc	f,cpp	self
	"warn about non-prototyped function decls"
-Wno-strict-prototypes	;		Cc	f,cpp	self
	""
-Wswitch	;		Cc	f,cpp	self
	""
-Wno-switch	;		Cc	f,cpp	self
	""
-Wtraditional	;		Cc	cpp,f	self
	"warn about features not present in traditional C"
-Wno-traditional	;		Cc	cpp,f	self
	"do not warn about traditional C"
-Wtrigraphs	;		Cc	cpp,f	self
	"warn when trigraphs are encountered"
-Wno-trigraphs	;		Cc	cpp,f	self
	"do not warn about trigraphs"
-Wundef	;		Cc	cpp,f	self
	"warn if an undefined macro is used by #if"
-Wno-undef	;		Cc	cpp,f	self
	"do not warn about testing undefined macros"
%%% // TB: from PathScale 2.1: add -Wuninitialized support
-Wuninitialized	Wuninitialized_is_asked=TRUE;		Cc	cpp,f	-WOPT:warn_uninit=on
	"warn about unitialized automatic variables"
-Wno-uninitialized	;		Cc	cpp,f	-WOPT:warn_uninit=off
	""
-Wunknown-pragmas	;		Cc	f,cpp	self
	""
-Wno-unknown-pragmas	;		Cc	f,cpp	self
	""
-Wunused	;		Cc	f,cpp	self
	NA__"warn when a variable is unused"
-Wno-unused	;		Cc	f,cpp	self
	""
-Wwrite-strings	;		Cc	f,cpp	self
	"mark strings as 'const char *'"
-Wno-write-strings	;		Cc	f,cpp	self
	""
#ifdef TARG_ST 
// [CL]
-Wpromote-function-to-global	;		Cc	f,cpp	self
	""
-Wno-promote-function-to-global	;		Cc	f,cpp	self
	""
#endif
%%% Optimization Options
#ifndef TARG_ST
// [TB] Already defined
-fbranch-probabilities	;		Cc	f,cpp	self
	NA__"use profiling information for branch probabilities"
#endif
-foptimize-register-moves	;		Cc	cpp,f	self
	""
-fcaller-saves	;		Cc	cpp,f	self
	NA__"Enable saving registers around function calls"
-fcse-follow-jumps	;		Cc	cpp,f	self
	NA__"When running CSE, follow jumps to their targets"
-fcse-skip-blocks	;		Cc	cpp,f	self
	NA__"When running CSE, follow conditional jumps"
-fdelayed-branch	;		Cc	cpp,f	self
	NA__"Attempt to fill delay slots of branch instructions"
-fexpensive-optimizations	;		Cc	cpp,f	self
	NA__"Perform a number of minor, expensive optimisations"
-ffast-math	;		Cc	cpp	self "-OPT:No_math_errno=1 -OPT:Finite_math_only=1  -OPT:IEEE_NaN_Inf=0 -OPT:No_rounding_math=1 -OPT:No_trapping_math=1 -OPT:Reassoc_Level=3 -OPT:Unsafe_math_opt=1 -OPT:No_denormals=1 -OPT:Fused_fp=1 -OPT:Fused_madd=1"
	"Improve FP speed by violating ANSI & IEEE rules"
-fmath-errno	;		Cc	cpp,f	"-OPT:No_math_errno=0"
	"Set ERRNO after calling math functions"
-fno-math-errno	;		Cc	cpp,f	"-OPT:No_math_errno=1"
	"Do not set ERRNO after calling math functions"
-ffinite-math-only	;		Cc	f,cpp	self "-OPT:Finite_math_only=1 -OPT:IEEE_NaN_Inf=0"
	"Allows FP optimizations assuming arguments and results are not NaNs or +-Infs"
-fno-finite-math-only	;		Cc	f,cpp	self "-OPT:Finite_math_only=0"
	"Do not perform FP finite arithmetic optimizations"
-fno-rounding-math	;		Cc	cpp,f	"-OPT:No_rounding_math=1"
	"Enable optimizations based on default FP rounding behavior assumption"
-fno-unsafe-math-optimizations	;		Cc	cpp,cfe,f	"-OPT:Unsafe_math_opt=0"
	"Do not allow unsafe FP math optimizations"
-funsafe-math-optimizations	;		Cc	cpp,cfe,f	"-OPT:Unsafe_math_opt=1"
	"Allow unsafe FP math optimizations"
-frounding-math	;		Cc	cpp,f	"-OPT:No_rounding_math=0"
	"Disable optimizations based on default FP rounding behavior assumption"
-ftrapping-math	;		Cc	cpp,f	"-OPT:No_trapping_math=0"
	"Enable support for IEEE user-visible FP traps"
-fno-trapping-math	;		Cc	cpp,f	"-OPT:No_trapping_math=1"
	"Disable compiler support for IEEE user-visible FP traps"
-ffloat-store	;		Cc	cpp,f	"-OPT:IEEE_arithmetic=1"
	NA__"Do not store floats in registers"
-fforce-addr	;		Cc	cpp,f	self
	NA__"Copy memory address constants into regs before using"
-fforce-mem	;		Cc	cpp,f	self
	NA__"Copy memory operands into registers before using"
-fdata-sections	;		Cc	cpp,f	self
	""
-ffunction-sections	;		Cc	cpp,f	self
	NA__"place each function into its own section"
-fgcse		;		Cc	cpp,f	self
	""

#   ifdef TARG_ST
-finline-functions	;		Cc	NONE self "-INLINE:only_inline=off" 
	"Integrate simple functions into their callers"
-fno-inline-functions	;		Cc	NONE "-INLINE:only_inline=on"
	"Do not integrate simple functions into their callers"
#   else
-finline-functions	;		Cc	cpp,f	self "-INLINE:only_inline=off" 
	"Integrate simple functions into their callers"
-fno-inline-functions	;		Cc	cpp,f	self "-INLINE:only_inline=on"
	"Do not integrate simple functions into their callers"
#   endif

-finline-limit-%d	;		Cc	cpp,f	self
	""
-fkeep-inline-functions	;		Cc	cpp,f	self
	NA__"Generate code for funcs even if they are fully inlined"
-fno-default-inline	;		Cc	cpp,f	self
	""
-fno-defer-pop		;		Cc	cpp,f	self
	""
-fno-function-cse	;		Cc	cpp,f	self
	""
#ifdef TARG_ST
-finline		;		Cc	f,cpp	self "-INLINE:O0=on"
	"Enable inlining even at -O0"
#endif
#ifdef TARG_ST
-fno-inline		;		Cc	f,cpp	self "-INLINE:none"
	"Do not pay attention to the inline keyword and do not expand any function inline"
#else
-fno-inline		;		Cc	f	self "-INLINE:=off"
	""
#endif
#ifdef TARG_ST
-mmemcpy		;		Cc	cpp,cfe	"-TENV:use_memcpy=on"
	"use memcpy instead of inlined copy"	

-mno-memcpy		;		Cc	cpp,cfe	"-TENV:use_memcpy=off"
	"Use inline copy instead of memcpy"
#endif
-fno-peephole		;		Cc	cpp,f	self
	""
-fomit-frame-pointer	;		Cc	cpp,f	self
	NA__"When possible do not generate stack frames"
-fno-omit-frame-pointer	;		Cc	cpp,f	self
	""
-fregmove	;		Cc	cpp,f	self
	""
-frerun-cse-after-loop	;		Cc	cpp,f	self
	NA__"Run CSE pass after loop optimisations"
-frerun-loop-opt	;		Cc	cpp,f	self
	""
-fschedule-insns	;		Cc	cpp,f	self
	NA__"Reschedule instructions to avoid pipeline stalls"
-fschedule-insns2	;		Cc	cpp,f	self
	NA__"Run two passes of the instruction scheduler"
-fstrength-reduce	;		Cc	cpp,f	self
	NA__"Perform strength reduction optimisations"
-fno-strength-reduce	;		Cc	cpp,f	self
	""
-fthread-jumps	;		Cc	cpp,f	self
	NA__"Perform jump threading optimisations"
-funroll-all-loops	;		Cc	cpp,f	self
	NA__"Peform loop onrolling for all loops"
#ifdef TARG_ST
-funroll-loops	;		Cc	cpp,f	self "-TENV:unroll_loops=1"
	"unroll-loops"
-fno-unroll-loops	;	Cc	cpp,f	"-TENV:unroll_loops=0"
	"no-unroll-loops"
#else
-funroll-loops	;		Cc	f	self "-TENV:unroll_loops=1"
	"unroll-loops"
-fno-unroll-loops	;	Cc	f	"-TENV:unroll_loops=0"
	"no-unroll-loops"
#endif
-fmove-all-movables	;		Cc	cpp,f	self
	""
-freduce-all-givs	;		Cc	cpp,f	self
	""

%%% [CG]: Link to aliasing rules 
-fstrict-aliasing	toggle(&aliasing,STRICT_ALIAS);		Cc	cpp,f	self "-OPT:alias=typed"
	"Conform to ANSI C aliasing rules"
-fno-strict-aliasing	toggle(&aliasing,NOSTRICT_ALIAS);		Cc	cpp,f	self "-OPT:alias=no_typed"
	"Ignore ANSI C aliasing rules"

#ifdef TARG_ST
% gcc-3.3
-fzero-initialized-in-bss	;		Cc	cpp,cfe	"-TENV:zeroinit_in_bss=on"
	"Allocate zero initialized data to .bss section"
-fno-zero-initialized-in-bss	;		Cc	cpp,cfe	"-TENV:zeroinit_in_bss=off"
	"Don't allocate zero initialized data to .bss section"
#endif

#ifdef TARG_ST200
%%% ST200 specific optimization options
% Dismissable load generation
-fdismissible-load	;		Cc	NONE	self "-TARG:dismissible_load=on"
	"Enable generation of dismissible load"
-fno-dismissible-load	;		Cc	NONE	self "-TARG:dismissible_load=off"
	"Disable generation of dismissible load"
#endif

%%% Preprocessor options
-dD	;		Cc,as	cpp	self
	"preserve macro definitions in output"
-dM	;		Cc,as	cpp	self
	"display a list of macro definitions active at end"
-dN	;		Cc,as	cpp	self
	"as -dD except that only the names are preserved"
-dI	;		Cc,as	cpp	self
	"include #include directives in the output"
#ifdef TARG_STxP70
-idirafter%D	;	Cc,as	cpp	"-idirafter %D"
   "-idirafter<dir>     add <dir> to the end of the system include path"
-include%s	;	Cc,as	cpp	"-include %s"
	"-include<file>      include the contents of <file> before other files"
-imacros%s	;	Cc,as	cpp	"-imacros %s"
	"-imacros<file>      accept definition of macros in <file>"
-iprefix%s	;	Cc,as	cpp	"-iprefix %s"
	"-iprefix<path>      specify <path> as a prefix for next two options"
-iwithprefix%D	;	Cc,as	cpp	"-iwithprefix %D"
	"-iwithprefix<dir>   add <dir> to the end of the system include path"
-iwithprefixbefore%D	;	Cc,as	cpp	"-iwithprefixbefore %D"
	"-iwithprefixbefore<dir>\n                    add <dir> to the end of the main include path"
-isystem%D	;	Cc,as	cpp	"-isystem %D"
	"-isystem<dir>       add <dir> to the start of the system include path"
#else
-idirafter%D	;	Cc,as	cpp	"-idirafter %D"
	"add <dir> to the end of the system include path"
-include%s	;	Cc,as	cpp	"-include %s"
	"include the contents of <file> before other files"
-imacros%s	;	Cc,as	cpp	"-imacros %s"
	"accept definition of macros in <file>"
-iprefix%s	;	Cc,as	cpp	"-iprefix %s"
	"specify <path> as a prefix for next two options"
-iwithprefix%D	;	Cc,as	cpp	"-iwithprefix %D"
	"add <dir> to the end of the system include path"
-iwithprefixbefore%D	;	Cc,as	cpp	"-iwithprefixbefore %D"
	"add <dir> to the end of the main include path"
-isystem%D	;	Cc,as	cpp	"-isystem %D"
	"add <dir> to the start of the system include path"
#endif
#ifdef TARG_ST
-fpreprocessed 	;	Cc,as	cpp	self
	"indicate to the preprocessor that the input file has already been preprocessed."
#endif

%%% Processed in phases.c
-MD	; 	Cc,as	NONE	""
	"generates dependencies in file <base>.d"
-MMD	; 	Cc,as	NONE	""
	"generates dependencies in file <base>.d, ignore system header files"
-MM	last_phase=P_any_cpp; 	Cc,as	cpp	self
	"as -M, but ignore system header files"
-MG	; 	Cc,as	cpp	self
   "in dependencies output, treat missing header file as generated files"
#ifdef TARG_ST
/* (cbr) processed in phases.c. DDTS21439 */
-MF%s	save_name(&mf_output,optargs); 	Cc,as	NONE	""
	"write dependency output to the given file"
-MP	; 	Cc,as	cpp	self
	"in dependencies output, generate phony targets for all headers"
-MQ%s	; 	Cc,as	cpp	"-MQ %s"
	"add a MAKE-quoted target"
-MT%s	; 	Cc,as	cpp	"-MT %s"
	"add an unquoted target"
#endif
#ifdef TARG_ST
%%% Treat undef specially
-undef	toggle(&cppundef,1);	Cc,as	NONE ""
	""
#else
-undef	;		Cc,as	cpp	self
	""
#endif
%%% Code Generation Options
-fcall-saved-%s	;		Cc	NONE	""
	""
-fcall-used-%s	;		Cc	NONE	""
	""
#ifndef TARG_ST
-fexceptions	;		Cc	cfe,be	"-LANG:exc=ON"
	"enable exception handling"
-fno-exceptions	;		Cc	cfe,be	"-LANG:exc=OFF"
	"disable exception handling"
#endif
-ffixed-reg=%s	;		Cc	NONE	"-TENV:registers_not_allocatable=%s"
	""
-mfixed-range=%s	;	Cc	NONE	"-TENV:registers_not_allocatable=%s"
	""
#ifdef TARG_ST
-mdisabled-reg=%s	;	Cc	NONE	"-TENV:disabled_registers=%s"
	""
#endif
#ifndef TARG_ST
-funwind-tables	;		Cc	NONE	"-CG:emit_unwind_info=on "
	""
-fno-unwind-tables	;	Cc	NONE	"-CG:emit_unwind_info=off"
	""
#endif
-mconstant-gp	;		Cc	NONE	"-TENV:constant_gp=on"
	""
-mno-sdata	;		Cc	NONE	"-G0"
	""
-finhibit-size-directive	;		Cc	NONE	""
	NA__"Do not generate .size directives"
#ifdef TARG_ST
-finstrument-functions	;		Cc	NONE	"-TENV:instrument_functions"
	"Generate instrumentation calls for entry and exit to functions."
#endif
#ifdef TARG_ST
-minstrument-calls	;		Cc	NONE	"-TENV:profile_call"
	"generate instrumentation calls for function calls."
#endif
-fcheck-memory-usage	;		Cc	NONE	""
	NA__"Generate code to check every memory access"
-fprefix-function-name	;		Cc	NONE	""
	NA__"Add a prefix to all function names"
-fno-common	;		Cc	cpp,cfe	self
	"Do not put uninitialized globals in the common section"
-fno-ident	;		Cc	cpp,cfe	self
	NA__"Ignore #ident directives"
-fno-gnu-linker	;		Cc	NONE	""
	""
-fpcc-struct-return	;		Cc	NONE	""
	""
#ifdef TARG_ST200
-fembedded      toggle(&abi,ABI_ST200_embedded);	Cc      NONE    ""
        "Generate code for the embedded ABI"
-fpic		toggle(&abi,ABI_ST200_embedded);	Cc	NONE	"-TENV:GPREL -TENV:PIC -D__PIC__ -D__pic__"
	"Generate position independent code for the embedded ABI"
-fno-pic	toggle(&abi,ABI_ST200_embedded);	Cc	NONE	""
	"Generate position-dependant code for the embedded ABI"
-fPIC		toggle(&abi,ABI_ST200_embedded);	Cc	NONE	"-TENV:GPREL -TENV:PIC -TENV:large_GOT -D__PIC__ -D__pic__"
 	"Generate position indepdendent code, assume large GOT"
-fno-PIC	toggle(&abi,ABI_ST200_embedded);	Cc	NONE	""
	"Generate position-dependant code for the embedded ABI"
-fpic-caller-sets-gp toggle(&abi,ABI_ST200_PIC); Cc      NONE "-TENV:GPREL -TENV:PIC -TARG:abi=pic-abi -D__PIC__ -D__pic__"
	NA__"Generate position independent code for the PIC ABI"
-fcpic-caller-sets-gp toggle(&abi,ABI_ST200_PIC); Cc      NONE "-TENV:GPREL -TENV:CPIC -TARG:abi=pic-abi -D__CPIC__ -D__cpic__"
	NA__"Generate main program code for the PIC ABI"
#elif defined( TARG_STxP70 )
-fembedded      toggle(&abi,ABI_STxP70_embedded);	Cc      NONE    ""
   NA__STxP70__"Generate code for the embedded ABI"
-fpic		toggle(&abi,ABI_STxP70_embedded);	Cc	NONE	"-TENV:GPREL -TENV:PIC -D__PIC__ -D__pic__"
	NA__STxP70__"Generate position independent code for the embedded ABI"
-fno-pic	toggle(&abi,ABI_STxP70_embedded);	Cc	NONE	""
	NA__STxP70__"Generate position-dependant code for the embedded ABI"
-fPIC		toggle(&abi,ABI_STxP70_embedded);	Cc	NONE	"-TENV:GPREL -TENV:PIC -TENV:large_GOT -D__PIC__ -D__pic__"
 	NA__STxP70__"Generate position indepdendent code, assume large GOT"
-fno-PIC	toggle(&abi,ABI_STxP70_embedded);	Cc	NONE	""
	NA__STxP70__"Generate position-dependant code for the embedded ABI"
#else
-fpic	;		Cc	NONE	""
	NA__"Generate position independent code, if possible"
-fPIC	;		Cc	NONE	""
 	""
#endif
#ifdef TARG_ST
#ifdef TARG_STxP70
-fvisibility=%s ;		ALL	NONE	"-TENV:visibility=%d"
   "-fvisibility=<symb> define default visibility for <symb>"
-mvisibility-decl=%s ;		ALL	NONE	"-TENV:visibility-decl=%d"
	"-mvisibility-decl=<file>\n                    use the specified visibility declaration <file>"
#else
-fvisibility=%s ;		ALL	NONE	"-TENV:visibility=%d"
	"define default visibility for symbols"
-mvisibility-decl=%s ;		ALL	NONE	"-TENV:visibility-decl=%d"
	"Use the specified visibility declaration file"
#endif
#endif
-freg-struct-return	;		Cc	NONE	""
	NA__"Return 'short' aggregates in registers"
-fshared-data	;		Cc	NONE	""
	NA__"Mark data as shared rather than private"
-fshort-enums	;		Cc	NONE	""
	NA__"Use the smallest fitting integer to hold enums"
#ifdef TARG_STxP70
-fshort-double	toggle(&lib_short_double,TRUE);		Cc	cpp,FE	"-fshort-double -D_DOUBLE_IS_32BITS -TARG:double_is_short"
	"use the same size for double as for float"
#else
-fshort-double	;		Cc	cpp,FE	"-fshort-double"
	"use the same size for double as for float"
#endif
#ifdef TARG_ST
-ftls-model=%s	;		Cc	cpp,FE	"-ftls-model=%s"
	NA__STxP70__"Alter the thread-local storage model to be used"
#endif
-fvolatile	;		Cc	NONE	""
	NA__"Consider all mem refs through pointers as volatile"
-fvolatile-global	;		Cc	NONE	""
	NA__"Consider all mem refs to global data to be volatile"
-fvolatile-static	;		Cc	NONE	""
	""
#ifdef TARG_ST
-fverbose-asm	;		ALL	NONE	"-LIST:notes=1"
	"place comments in assembly listing"
-fno-verbose-asm ;		ALL	NONE	"-LIST:notes=0 -LIST:source=0"
	"supress comments in assembly listing"
#else
-fverbose-asm	;		Cc	NONE	""
	""
#endif
-fpack-struct	;		Cc	NONE	""
	"pack structure members together without holes"
-fstack-check	;		Cc	NONE	""
	NA__"Insert stack checking code into the program"
-fargument-alias	;		Cc	NONE	""
	""
-fargument-noalias	;		Cc	NONE	""
	""
-fargument-noalias-global	;		Cc	NONE	""
	""
-fleading-underscore	;		Cc	NONE	""
	""
%%% Linker Options
-nostartfiles	;		LINK	NONE	""
	""
-nodefaultlibs	;		LINK	NONE	""
	""
-Xlinker%s	warn_no_longer_supported2(option_name,"-Wl,");		LINK	ld	self
	""
#ifdef TARG_ST
--relax toggle(&relax,TRUE);               LINK    ld      self
   NA__STxP70__"Perform linker relaxations"
-Wl,--relax toggle(&relax,TRUE);           LINK    ld      "--relax"
   NA__STxP70__"Perform linker relaxations"
-Wl,-relax toggle(&relax,TRUE);           LINK    ld      "--relax"
   NA__STxP70__"Perform linker relaxations"
--no-relax      toggle(&relax,FALSE);      LINK    ld      ""
   NA__STxP70__"Do not perform linker relaxations"
#endif
-symbolic	;		LINK	ld	"-Bsymbolic"
	NA__STxP70__"Bind references to global symbols locally when building a shared object"

#ifdef TARG_ST
%%% Relocatable library / main program macro options
%%% These options are shortcuts for a combinaison of options
--rlib			;			LINK	ld	"-shared -Bsymbolic --allow-shlib-undefined  -nodefaultlibs"
	NA__STxP70__"Build a relocatable library loadable by the rl_lib loader"
%%% The --rmain option also triggers in phases.c the link flags "-lrl -lrl_s"
--rmain			;			LINK	ld	"--export-dynamic --dynamic-linker=RL_LIB"
	NA__STxP70__"Build a main program suitable for loading relocatable libraries"
--export-dynamic	toggle(&dynamic,TRUE);	LINK	ld	self
	NA__STxP70__"Export dynamic symbols in a main program"
--allow-shlib-undefined	;			LINK	ld	self
	NA__STxP70__"Allow a shared library to have reference to undefined symbols"
--dynamic-linker=%s	toggle(&dynamic,TRUE);	LINK	ld	self
	NA__STxP70__"Specify the dynamic linker name"
#endif

%%% Directory Options
-I-		;		ALL	cpp	self
 	""
-specs=%s	warn_ignored(option_name);		ALL	NONE	self
	""
%%% Target Options
-b%s	warn_ignored(option_name);		ALL	NONE	self
	""

#ifdef TARG_ST
#ifdef TARG_STxP70
-falign-functions=%d	;	ALL	NONE	"-OPT:align_functions=%d"
   "-falign-functions=<n>\n                    align the start of functions to the <n>-byte alignment"

-falign-loops=%d	;	ALL	NONE	"-OPT:align_loops=%d"
   "-falign-loops=<n>   align the start of loops to the <n>-byte\n                    alignment"

-falign-jumps=%d	;	ALL	NONE	"-OPT:align_jumps=%d"
	"-falign-jumps=<n>   align labels which are reached by jump to the <n>-byte\n                    alignment"

-falign-labels=%d	;	ALL	NONE	"-OPT:align_labels=%d"
	"-falign-labels=<n>  align all labels to the <n>-byte alignment"

-malign-instructions=%d	;	ALL	NONE	"-OPT:align_instructions=%d"
	"-malign-instructions=<n>\n                    align all frequent instructions blocks to the <n>-byte\n                    alignment"

#else
-falign-functions=%d	;	ALL	NONE	"-OPT:align_functions=%d"
	"Align the start of functions to the given byte alignment"

-falign-loops=%d	;	ALL	NONE	"-OPT:align_loops=%d"
	"Align the start of loops to the given byte alignment"

-falign-jumps=%d	;	ALL	NONE	"-OPT:align_jumps=%d"
	"Align labels which are reached by jump to the given byte alignment"

-falign-labels=%d	;	ALL	NONE	"-OPT:align_labels=%d"
	"Align all labels to the given byte alignment"

-malign-instructions=%d	;	ALL	NONE	"-OPT:align_instructions=%d"
	"Align all frequent instructions blocks to the given byte alignment"
#endif

-falign-functions	;	ALL	NONE	"-OPT:align_functions"
	"align the start of functions to the cache line size"

-falign-jumps	;	ALL	NONE	"-OPT:align_jumps"
	"align labels which are reached by jump to the cache line\n                    size"

-falign-loops	;	ALL	NONE	"-OPT:align_loops"
	"align the start of loops to the cache line size"

-falign-labels	;	ALL	NONE	"-OPT:align_labels"
	"align all labels to the cache line size"

-malign-instructions	;	ALL	NONE	"-OPT:align_instructions"
	"align all frequent instructions blocks to the cache line size"

#else
%%% 386-specific options
-m386	warn_ignored(option_name);		ALL	NONE	self
	""
-malign-loops=%d	warn_ignored(option_name); 	ALL	NONE	self
	""
-malign-jumps=%d	warn_ignored(option_name); 	ALL	NONE	self
	""
-malign-functions=%d	warn_ignored(option_name); 	ALL	NONE	self
	""
#endif

%%% st200 specific options
#ifdef TARG_ST200
#if !defined(MKERNEL_SUPPORTED)
-mkernel	warn_no_longer_supported(option_name);		ALL	Cc	""
	""
#else
-mkernel	; ALL	Cc 	self "-D__kernel__" "-TENV:registers_not_allocatable=r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r13,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62"
	""
#endif /*MKERNEL_SUPPORTED*/
-mcore=%s	Process_ST200_Targ(option_name,optargs);		ALL	as	-mcore=%s
	"Specifies core specific file paths [st220,st230,st231,st240]"
#ifdef MUMBLE_ST200_BSP
-mboard=%s	Process_ST200_Targ(option_name,optargs);		ALL	NONE	-mboard=%s
	"Specifies core specific file paths"
-msoc=%s	Process_ST200_Targ(option_name,optargs);		ALL	NONE	-msoc=%s
	"Specifies chip specific file paths"
-mruntime=%s	Process_ST200_Targ(option_name,optargs);		ALL	NONE	-mruntime=%s
	"Specifies runtime execution"
-msyscall=%s	Process_ST200_Targ(option_name,optargs);		ALL	NONE	-msyscall=%s
	"Specifies system call compatibility model"
-mtargetdir=%s	Process_ST200_Targ(option_name,optargs);		ALL	NONE	-mtargetdir=%s
	"Specifies alternate target directory"
-mtargetname=%s	Process_ST200_Targ(option_name,optargs);		ALL	NONE	-mtargetname=%s
	"Specifies alternate target directory name"
#endif
-mlibdir=%s	Process_ST200_Targ(option_name,optargs);		ALL	NONE	-mlibdir=%s
	"Specifies alternate library directory"
#endif

#ifdef TARG_STxP70
%-mfpx   ;         ALL     be,as     "-TARG:enable_fpx=on -TARG:abi=stxp70-fpx -fpx-abi-variant"
%   NA__STxP70__"Enable fpX extension for floating point support"
-mfpx*   ;         ALL     be,as     ""
   NA__STxP70__"Enable fpX extension for floating point support"
-fpx-abi-variant toggle(&fpx,TRUE);         ALL     NONE ""
   NA__STxP70__"Used to toggle fpX ABI variant"
#endif

%%% ia-64 workaround
-ma-step	;	ALL	NONE	"-TARG:ma0_step=on -mb-step"
	""
-mb-step	;	ALL	NONE	""
	""
-mvolatile-asm-stop	;	ALL	NONE	"-CG:volatile_asm_stop=on"
	""
#ifdef TARG_ST
%%% Have to wait for the end of option processing, so do it in main.c
-print-file-name=%s	{execute_flag=FALSE; print_name = optargs; print_kind = PRINT_FILE;}	ALL	NONE	""
	""
-print-libgcc-file-name	{execute_flag=FALSE; print_name = "libgcc.a"; print_kind = PRINT_FILE;}	ALL	NONE	""
	""
-print-prog-name=%s	{execute_flag=FALSE; print_name = optargs; print_kind = PRINT_PROG;}	ALL	NONE	""
	""
-print-search-dirs	{execute_flag=FALSE; warn_ignored(option_name);}	ALL	NONE	""
	""
#else
-print-file-name=%s	{execute_flag=FALSE; print_file_path(optargs);}	ALL	NONE	""
	""
-print-libgcc-file-name	{execute_flag=FALSE; print_file_path("libc.a");}	ALL	NONE	""
	""
-print-prog-name=%s	{execute_flag=FALSE; print_file_path(optargs);}	ALL	NONE	""
	""
-print-search-dirs	{execute_flag=FALSE; warn_ignored(option_name);}	ALL	NONE	""
	""
#endif

#ifdef TARG_ST
%%% CPP 3.0 does not take -xLANG argument
-x*c	ignore_suffix=TRUE;default_source_kind=S_c;	ALL	NONE ""
	"assume that the following input sources are in C"
-x*c++	ignore_suffix=TRUE;default_source_kind=S_C;	ALL	NONE ""
	"assume that the following input sources are in C++"
-x*c/**/pp-output	ignore_suffix=TRUE;default_source_kind=S_i;	ALL NONE ""
	"assume that the following input sources are CPP output of C"
-x*assembler	ignore_suffix=TRUE;default_source_kind=S_s;	ALL NONE ""
	"assume that the following input sources are in assembler"
-x*c++-c/**/pp-output	ignore_suffix=TRUE;default_source_kind=S_ii;	ALL NONE ""
	"assume that the following input sources are CPP output of C++"
-x*assembler-with-c/**/pp	ignore_suffix=TRUE;default_source_kind=S_S;	ALL NONE ""
	"assume that the following input sources are in assembler with CPP commands"
-x*f	ignore_suffix=TRUE;default_source_kind=S_f;	ALL NONE ""
	NA__"assume that the following input sources are in FORTRAN"
-x*none		ignore_suffix=FALSE;default_source_kind=S_NONE;	ALL	NONE ""
	"assume nothing about the following input sources language"
#else
-x*c	ignore_suffix=TRUE;default_source_kind=S_c;	ALL	cpp "-xc"
	""
-x*c++	ignore_suffix=TRUE;default_source_kind=S_C;	ALL	cpp "-xc++"
	""
-x*c/**/pp-output	ignore_suffix=TRUE;default_source_kind=S_i;	ALL NONE ""
	""
-x*c++-c/**/pp-output	ignore_suffix=TRUE;default_source_kind=S_ii;	ALL NONE ""
	""
-x*assembler	ignore_suffix=TRUE;default_source_kind=S_s;	ALL NONE ""
	""
-x*assembler-with-c/**/pp	ignore_suffix=TRUE;default_source_kind=S_S;	ALL cpp "-xassembler-with-cpp"
	""
-x*f	ignore_suffix=TRUE;default_source_kind=S_f;	ALL NONE ""
	""
-x*none		ignore_suffix=FALSE;default_source_kind=S_NONE;	ALL	cpp "-xnone"
	""
#endif
%%% gcc long option aliases
--all-warnings	;	ALL	NONE	"-Wall"
	""
--ansi		;	ALL	NONE	"-ansi"
	""
--assemble	;	ALL	NONE	"-S"
	""
--assert%s	;	ALL	NONE	"-A%s"
	""
#ifdef TARG_ST
--comments	;	ALL	NONE	"-CC"
	""
#else
--comments	;	ALL	NONE	"-C"
	""
#endif
--compile	;	ALL	NONE	"-c"
	""
--debug		;	ALL	NONE	"-g"
	""
% --debug%d	;	ALL	NONE	"-g%d"
--define-macro%s	;	ALL	NONE	"-D%s"
	""
--dependencies	;	ALL	NONE	"-M"
	""
--extra-warnings	;	ALL	NONE	"-W"
	""
--force-link%s	;	ALL	NONE	"-u %s"
	""
--imacros%s	;	ALL	NONE	"-imacros %s"
	""
--include%s	;	ALL	NONE	"-include %s"
	""
--include-barrier	;	ALL	NONE	"-I-"
	""
--include-directory%D	;	ALL	NONE	"-I%D"
	""
--include-directory-after%D	;	ALL	NONE	"-idirafter %D"
	""
--include-prefix%s	;	ALL	NONE	"-iprefix %s"
	""
--include-with-prefix%D	;	ALL	NONE	"-iwithprefix %D"
	""
--include-with-prefix-before%D	;	ALL	NONE	"-iwithprefixbefore %D"
	""
--library-directory%D	;	ALL	NONE	"-L%D"
	""
--no-line-commands	;	ALL	NONE	"-P"
	""
--no-standard-includes	;	ALL	NONE	"-nostdinc"
	""
--no-standard-libraries	;	ALL	NONE	"-nostdlib"
	""
--no-warnings	;	ALL	NONE	"-w"
	""
--optimize	;	ALL	NONE	"-O"
	""
--output%s	;	ALL	NONE	"-o %s"
	""
--pedantic	;	ALL	NONE	"-pedantic"
	""
--pedantic-errors	;	ALL	NONE	"-pedantic-errors"
	""
--pipe	;	ALL	NONE	"-pipe"
	""
--preprocess	;	ALL	NONE	"-E"
	""
% need to handle either <space>name or =name
--print-file-name%s	;	ALL	NONE	"-print-file-name=%s"
	""
--print-file-name=%s	;	ALL	NONE	"-print-file-name=%s"
	""
--print-libgcc-file-name	;	ALL	NONE	"-print-file-name=libgcc.a"
	""
--print-search-dirs	;	ALL	NONE	"-print-search-dirs"
	""
--print-missing-file-dependencies	;	ALL	NONE	"-MG"
	""
--print-prog-name%s	;	ALL	NONE	"-print-prog-name=%s"
	""
--print-prog-name=%s	;	ALL	NONE	"-print-prog-name=%s"
	""
--profile	;	ALL	NONE	"-p"
	""
--save-temps	;	ALL	NONE	"-save-temps"
	""
--shared	;	ALL	NONE	"-shared"
	""
--specs%s	;	ALL	NONE	"-specs=%s"
	""
--specs=%s	;	ALL	NONE	"-specs=%s"
	""
--static	;	LINK	ld	self
	""
#ifdef TARG_ST
-static-libgcc ;       LINK    NONE    ""
	""
#endif
--symbolic	;	ALL	NONE	"-symbolic"
	""
--target%s	;	ALL	NONE	"-b%s"
	""
#if defined(linux) || defined(sun) || defined(__CYGWIN__) || defined(__MINGW32__)
--trace-includes	;	ALL	NONE	"-H"
	""
#endif
--traditional	;	ALL	NONE	"-traditional"
	""
--traditional-cpp	;	ALL	NONE	"-traditional-cpp"
	""
--trigraphs	;	ALL	NONE	"-trigraphs"
	""
--undefine-macro%s	;	ALL	NONE	"-U%s"
	""
--user-dependencies	;	ALL	NONE	"-MM"
	""
--verbose	;	ALL	NONE	"-v"
	""
--version	;	ALL	NONE	"-version"
	""
--write-dependencies	;	ALL	NONE	"-MD"
	""
--write-user-dependencies	;	ALL	NONE	"-MMD"
	""
#if defined(TARG_ST)
-mbuiltin-prefetch	;	Cc	cpp,cfe	"-TENV:no_builtin_prefetch=off"
	NA__STxP70__"Activate built in prefetch functions"
-mno-builtin-prefetch	;	Cc	cpp,cfe	"-TENV:no_builtin_prefetch=on"
	NA__STxP70__"Ignore any built in prefetch functions"
-mauto-prefetch	;	Cc	cpp,cfe	"-LNO:prefetch=2"
	NA__STxP70__"Generate automatic prefetch instructions"
-mno-auto-prefetch	;	Cc	cpp,cfe	"-LNO:prefetch=0"
	NA__STxP70__"Do not generate automatic prefetch instructions"
-muser-prefetch	;	Cc	cpp,cfe	"-LNO:prefetch_manual=TRUE"
	NA__STxP70__"Optimize user prefetch instructions"
-mno-user-prefetch	;	Cc	cpp,cfe	"-TENV:no_builtin_prefetch=on"
	NA__STxP70__"Discard user prefetch instructions"
-mprefetch	;	Cc	cpp,cfe	"-LNO:prefetch_manual=TRUE -LNO:prefetch=2"
	NA__STxP70__"Generate user and automatic prefetch instructions"
-mno-prefetch	;	Cc	cpp,cfe	"-TENV:no_builtin_prefetch=on -LNO:prefetch=0"
	NA__STxP70__"Do not generate any prefetch instructions"
-mfused-fp	;		Cc	cpp,f	"-OPT:Fused_fp=1"
	"Enable fused FP operations usage in code generation"
-mno-fused-fp	;		Cc	cpp,f	"-OPT:Fused_fp=0"
	"Disable fused FP operations usage in code generation"
-mfused-madd	;		Cc	cpp,f	"-OPT:Fused_madd=1"
	"Enable fused madd usage in code generation"
-mno-fused-madd	;		Cc	cpp,f	"-OPT:Fused_madd=0"
	"Disable fused madd usage in code generation"
-mdenormals	;		Cc	cpp,f	"-OPT:No_denormals=0"
	"Assume denormals support in FP low-level runtime arithmetic"
-mno-denormals	;		Cc	cpp,f	"-OPT:No_denormals=1"
	"Assume denormals are not supported in FP low-level runtime arithmetic"
-mreassoc=%d	;		Cc	cpp,f	"-OPT:Reassoc_level=%d"
	"Set the FP reassociations optimization level"
#ifdef TARG_ST200
-mpacking*	;		Cc	cpp,f	""
	"-mpacking[=n]\n                    n is the level of load/store packing optimization.\n                    '0' means no packing.\n                    '1' means load and store packing with statically known alignment.\n                    '2' means '1' + loop peeling and loop specialization to perform load and store packing with dynamic alignment"
#endif
#endif

%%% [HC] 060322: STxP70 specific options
%%% for driver backward compatibility 
%%% and reconfigurability management
#ifdef TARG_STxP70
-dryrun	{show_flag = TRUE; execute_flag = FALSE;} ALL	NONE	""
   "display commands that would be executed, but don't invoke anything"
-corecfg*   ;	ALL NONE	""
	"-corecfg=<n>        specify STxP70 core configuration. <n> is hexadecimal\n                    value."
-Cxt*1   ;	LINK	ld	"-Tsx_1.ld"
	"set context number to 1. Default value."
-Cxt*2   ;	LINK	ld	"-Tsx_2.ld"
	"set context number to 2"
-Cxt*3   ;	LINK	ld	"-Tsx_3.ld"
	"set context number to 3"
-Cxt*4   ;	LINK	ld	"-Tsx_4.ld"
	"set context number to 4"
-Mcommon warn_no_longer_supported(option_name);	cc	NONE	""
	""
-Muchar	toggle(&signed_char,FALSE);		Cc	NONE	""
	"treat plain char as unsigned"
-Map*%s	;		LINK	ld	"-Map %s"
	"-Map<mapfile>|-map<mapfile>\n                    write link to mapfile"
-map*%s	;		LINK	ld	"-Map %s"
	""
-Mconfig*   ; 	ALL	NONE	""
   "-Mconfig[=context:<n>|regbank:<n>|mult:<n>|efuif:<n>|mfuif:<n>|extmemif:<n>|itcnodes:<n>|noevc|evcglobal:<n>|evclocal:<n>|hwloop:<n>|dmsize:<n>|dcache:<n>|pmsize:<n>|pcache:<n>]\n                    specify configuration of STxP70 core IP\n    context:<n>     defines context number. <n> in {1,2,4,8}\n    regbank:<n>     defines register bank number. <n> in {1,2}\n    mult:<n>        defines multiplier implementation. <n> in {yes,no}\n    efuif:<n>       defines extension functional unit interface width.\n                    <n> in {no,32,64,128,256,512}\n    mfuif:<n>       defines MFU interface width. <n> in {no,32,64,128,256,512}\n    extmemif:<n>    defines external memory interface width. <n> in {no,32,64}\n    itcnodes:<n>    defines ITC number of nodes. <n> in {no,8,16,32}\n    noevc           defines EVC implementation\n    evcglobal:<n>   defines EVC number of global events. <n> in {4,8,16,32}\n    evclocal:<n>    defines EVC number of local events. <n> in {4,8,16,32}\n    hwloop:<n>      defines hardware loop implementation.\n                    <n> in {no,bycxt,forall}\n    dmsize:<n>      defines data memory size. <n> in {no,512,1k,2k,4k,8k,16k,\n                    32k,64k,128k,256k,512k,1M,2M,4M}\n    dcache:<n>      defines data cache implementation. <n> in {yes,no}\n    pmsize:<n>      defines program memory size. <n> in {no,1k,2k,4k,8k,16k,\n                    32k,64k,128k,256k,512k,1M,2M,4M}\n    pcache:<n>      defines program cache implementation. <n> in {yes,no}\n    -Mconfig        default enables 4 contexts, 2 register banks, multiplier,\n                    32-bit EFU interface, 32-bit MFU interface, 32-bit external\n                    memory interface, 8 ITC nodes, EVC with 16 global and 16\n                    local events, 2 hardware loops for all contexts, 4 k-bytes\n                    data memory, no data cache, 4 k-bytes program memory and no\n                    pcache"
-Mextension*   ; 	ALL	GRP,cfe,cpp,ipap,be,as	""
   "activate STxP70 extensions"
-Mextrcdir*%D  Process_extrcdir(optargs); 	ALL	as,ld	"-Mextrcdir=%s"
   "set stxp70extrc file directory"
-Mfarcall   farcall=TRUE;			ALL	CMP	"-TARG:farcall=on"
	"generates all call/jmp as absolute ones"
-Moldlinker toggle(&Useoldlinker,TRUE);   ALL   ""
   ""
-Mhwloop* 	;		ALL	CMP	""
	"-Mhwloop[=none|jrgtudeconly|hwlooponly|all]\n                    select hardware loop code generation; default is all\n    none            disable hardware loops code generation\n    jrgtudeconly    hardware loop code generation with JRGTUDEC instruction\n                    only\n    hwlooponly      hardware loop code generation with HWLOOP instructions only\n    all             enable all kinds of hardware loop code generation"
-Mkeepasm	keep_flag=TRUE;		ALL	ipap	self
	"keep intermediate files"
-Mmode16 toggle(&lib_kind,LIB_STXP70_16);		Cc	NONE	"-TENV:disabled_registers=r16-r31"
	"select 16 register context instead of 32"
-Mmode32 toggle(&lib_kind,LIB_STXP70_32);		Cc	NONE	""
	"select 32 register context (default)"
-Mnostartup	;		LINK	NONE	""
	"no startfiles"
-Mnostddef  toggle(&cppundef,1);	Cc,as	NONE ""
   "do not use standard macro definitions"
-Mnostdinc	nostdinc=TRUE;		ALL	cpp	self
	"do not search system include directories"
#if defined(linux) || defined(sun)
-Mnostdlib	;	LINK	ld	"-nostartfiles -nodefaultlibs"
	"no predefined libraries or startfiles"
#else
-Mnostdlib	;	LINK	ld	"-L"
	"no predefined library search path list"
#endif
-Mdarange* 	;		ALL	CMP	""
	"-Mdarange=[minSize,]maxSize     use Data Area addressing mode (GP-based on 32kbytes) on \n                    selected variables. <minSize> and <maxSize) in number of bytes."
-Msdarange*		;	ALL	CMP	""
   "-Msdarange=[minSize,]maxSize     use Small Data Area addressing mode (GP-based on 32kbytes)\n                    on selected variables. <minSize> and <maxSize) in number of bytes."
-Mtdarange*		;	ALL	CMP	""
   "-Mtdarange=[minSize,]maxSize      use Tiny Data Area addressing mode (32k-bytes based at 0x0).  <minSize> and <maxSize) in number of bytes."
-Msda*		;	ALL	CMP	""
   "-Msda[=<n>|all]     use Small Data Area addressing mode (GP-based on 32kbytes)\n                    on selected variables. <n> in {1,2,4,8}."
-Mda* 	;		ALL	CMP	""
	"-Mda=[=<n>|all]     use Data Area addressing mode (GP-based on 32kbytes) on \n                    selected variables. <n> in {1,2,4,8}."
-Mtda*		;	ALL	CMP	""
   "-Mtda[=<n>|all]      use Tiny Data Area addressing mode (32k-bytes based at 0x0). <n> in {1,2,4,8}."
-Munroll	;		Cc	f	self "-TENV:unroll_loops=1"
	"activate loop unrolling"
-noconfiginobj	;		ALL	as	"-noconfiginobj"
	"do not write CORE_CFG in object file"
%-newlib toggle(&newlib,TRUE); 		ALL	CMP	""
%	"set library environment to newlib"
-V* ; ALL	NONE	""
	"-V[<ver>]           display of change compiler version"
   

% sxcc switches no more supported - begin
% -#            equivalent to -v
% -###          equivalent to -dryrun
% -?            equivalent to -version
% -Mfarcall     should be managed at linker level
% -Mlocalsinreg required by FlexCC
% -Mnop         required by FlexCC schduler to expose pipeline
% -Mregset[=ax:<n>|gpr:<n>]
%                     Select size of register sets
%     ax:<n>          Select size of aX register set; <n> in [2..4]
%     gpr:<n>         Select size of STxP70 Core register set; <n> in [16..32]
% sxcc switches no more supported - end

#endif
