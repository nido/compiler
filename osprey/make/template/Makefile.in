#
#
#  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.in template for top level Makefile
#  This file should be instanciated by configure in the build area
#  into $(BUILD_AREA)/Makefile.
#

#
# SUBDIRS as provided by configure
#
CONF_SUBDIRS=@SUBDIRS@

#
# CORE_EXTENSION as provided by configure
# (management of dynamic extensions)
# This variable is empty if core does
# not support extensions.
#
CORE_EXTENSIONS=@CORE_EXTENSIONS@

#
#  These directories must be "built" first because they generate header files
#  which other directories depend on.
#  Please Specify dependencies for each new <directory> in the variable
#  DEPS_FOR_<directory>.
#
INCLUDE_SUBDIRS =   \
	include     \
	librtkutils \
	gensyn      \
	targ_info

DEPS_FOR_include	=
DEPS_FOR_librtkutils	=
DEPS_FOR_gensyn		= include librtkutils
DEPS_FOR_targ_info	= include gensyn

#
#  Next, all of the libraries are built because the tools depend on them.
#  Please Specify dependencies for each new <directory> in the variable
#  DEPS_FOR_<directory>.
#
#### Only these for now by default #####
LIBRARY_SUBDIRS =   \
        libiberty   \
	libelf      \
	libcmplrs   \
	libcomutil  \
	libdwarf    \
	libelfutil  \
	librcparser \
	libSYS      \
	libparse    \
	libair      \
	libspin     \
	instrumentationC

DEPS_FOR_libiberty	= include
DEPS_FOR_libelf		= include
DEPS_FOR_libcmplrs	= include
DEPS_FOR_libcomutil	= include
DEPS_FOR_libdwarf	= include
DEPS_FOR_libelfutil	= include
DEPS_FOR_librcparser	=
DEPS_FOR_libSYS		= include
DEPS_FOR_libparse  	= targ_info
DEPS_FOR_libair         = include targ_info gccfe
DEPS_FOR_libspin	= libSYS
DEPS_FOR_instrumentationC =

#
#  Finally, the compiler tools (components) are built.
#
#  Please Specify dependencies for each new <directory> in the variable
#  DEPS_FOR_<directory>.
#
#### Only these for now by default #####
TOOL_SUBDIRS = \
	gccfe \
	g++fe \
	libfereconf \
	osprey-gcc-4.2.0 \
	wgen \
	wopt \
	be \
	lai \
        ipl \
	ipa \
	lno \
	lw_inline \
        whirl2c   \
        ir_tools  \
	parser    \
	driver

#	dwarfdump \
#	elfdump \
#	whirl2f \

ifneq (,$(CORE_EXTENSIONS))
TOOL_SUBDIRS += targ_info_ext
endif

DEPS_FOR_gccfe		:= $(INCLUDE_SUBDIRS) $(filter-out libair,$(LIBRARY_SUBDIRS))
DEPS_FOR_g++fe		:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS) gccfe
DEPS_FOR_libfereconf	:= gccfe
DEPS_FOR_osprey-gcc-4.2.0 := $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS) libfereconf
DEPS_FOR_wgen		:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS) libfereconf
DEPS_FOR_be		:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS) gccfe
DEPS_FOR_lai		:= be
DEPS_FOR_wopt		:= be
DEPS_FOR_ipl		:= be
DEPS_FOR_ipa		:= be wopt ipl
DEPS_FOR_lno		:= be wopt ipl
DEPS_FOR_lw_inline	:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS) be
DEPS_FOR_whirl2c	:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS) be
DEPS_FOR_whirl2f	:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS) be
DEPS_FOR_elfdump	:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS)
DEPS_FOR_dwarfdump	:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS)
DEPS_FOR_ir_tools	:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS) be
DEPS_FOR_driver		:= $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS)
DEPS_FOR_targ_info_ext  := $(INCLUDE_SUBDIRS) gccfe
DEPS_FOR_parser         := $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS)

#
#  Comes last, some additional target libraries built by the target compiler.
#  They are not included in SUBDIRS by default.
#  Though they are decalred here for dependencies.
#
#  Please Specify dependencies for each new <directory> in the variable
#  DEPS_FOR_<directory>.
#
#### Only these for now by default #####
TARG_LIBRARY_SUBDIRS = \
	libgcov \
	libunwind \
	libstdc++-v3 

DEPS_FOR_libgov =
DEPS_FOR_libunwind =
DEPS_FOR_libsrdc++-v3 =

#
# All modules to compile are put in SUBDIRS
# By default it includes INCLUDE/LIBRARY/TOOL_SUBDIRS.
#
SUBDIRS := $(INCLUDE_SUBDIRS) $(LIBRARY_SUBDIRS) $(TOOL_SUBDIRS)

# Configured SUBDIRS may override the default
ifneq ($(CONF_SUBDIRS),)
SUBDIRS:=$(CONF_SUBDIRS)
endif


#
# Below are defined the top level Makefile targets.
#
# Dependencies between modules are enforced for the following
# targets: default all local last install
#
# The 'default' target forces the dependencies in each module makefile
# by invoking the 'first' target that recursively builds prerequisite
# modules.  This has the side effect that parallel make (make -j 8 for
# instance) is not supported for the 'default' target unless the
# 'PARALLEL' make parameter is defined, as two recursive builds of the
# same subdirectory can occur concurrently, leading to build errors.
# The 'PARALLEL' make parameter is properly defined in this
# Makefile.
#
# 'make last' is equivalent to 'make default' with support for
# parallel make (no unnecessary recursion).
#
# 'make all' is an alias to 'make last' and is the actual default
# target of this Makefile.
#
# Targets list:
# default: builds the compiler w/o installing it
# local: build only local module files (with support for parallel make)
# last: same result as default (with support for parallel make)
# all: same as last (default Makefile target)
# install: builds and install (with support for parallel make)
# clean: clean intermediate files
# clobber: clean all built files
#
# Note that SUBDIRS may be redefined on the command line to rebuild
# only some modules, for instance:
# > make SUBDIRS=be install
#
# Note that NO_DEPS=1  on the command line can be used to avoid dependency
# checks between module when one know that only local modification occued:
# > make NO_DEPS=1 SUBDIRS=be install
#
# Typical build usage:
# > make install
# or for 2 steps build:
# > make default
# > make install
#
# Typical build usage for parallel make
# > make -j 8 install
# or for 2 steps build:
# > make -j 8 last
# > make -j 8 install
#
#
.PHONY: default local install clean clobber last

# Default Makefile target, enabling parallel build without installing
all: last

# Default way of building Open64, enforcing prerequisite builds in
# each sub-directory; parallel build is not supported in this mode.
default: $(addprefix default_,$(SUBDIRS))
	$(MAKE) default-local

local: $(addprefix local_,$(SUBDIRS))
	$(MAKE) local-local

install: $(addprefix install_,$(SUBDIRS))
	$(MAKE) install-local

clean: $(addprefix clean_,$(SUBDIRS))
	$(MAKE) clean-local

clobber: $(addprefix clobber_,$(SUBDIRS))
	$(MAKE) clobber-local

last: $(addprefix last_,$(SUBDIRS))
	$(MAKE) last-local

# Convert to standard Gnu targets for the gcc subcomponent.
clobber_osprey-gcc-%:
	$(MAKE) -C osprey-gcc-$* clean
default_osprey-gcc-%:
	$(MAKE) -C osprey-gcc-$*
last_osprey-gcc-%:
	$(MAKE) -C osprey-gcc-$*
install_osprey-gcc-%:
	$(MAKE) -C osprey-gcc-$*
	$(MAKE) -C osprey-gcc-$* -f gccfeconf.mk install

clean_%:
	$(MAKE) -C $* clean
clobber_%:
	$(MAKE) -C $* clobber
default_%:
	$(MAKE) -C $* default PARALLEL=1
local_%:
	$(MAKE) -C $* local
install_%:
	$(MAKE) -C $* install
last_%:
	$(MAKE) -C $* last

#
# Local actions
#
clean-local:

clobber-local:
	rm -f deps.mk

default-local:

local-local:

install-local:

last-local:


#
# Handling of module dependencies
#
# Define NO_DEPS=1 on the make command to avoid dependency checking
#
ifndef NO_DEPS
# Now transform dependencies written above into Make dependencies

# Utility "functions"
subst_local=$(strip local_$(targ)): $(addprefix local_,$(DEPS_FOR_$(targ)))-sep-
subst_last=$(strip last_$(targ)): $(addprefix last_,$(DEPS_FOR_$(targ)))-sep-
subst_install=$(strip install_$(targ)): $(addprefix install_,$(DEPS_FOR_$(targ)))-sep-
subst_default=$(strip default_$(targ)): $(addprefix default_,$(DEPS_FOR_$(targ)))-sep-

# Generate "local" rules
# Transform each dependencies of the form
# "DEPS_FOR_targ1=dep1 dep2"
# "DEPS_FOR_targ2=dep3 dep4"
# into local_targ1: local_dep1 local_dep2-sep-local_targ2: local_dep3 local_dep4-sep-
# -sep- are transformed into newlines later
# Don't use $(SUBDIRS) in the dependency rules as SUBDIRS may be redefined
# on the make command line. For instance: make SUBDIRS=lai install.
LOCAL_DEP := $(foreach targ,$(INCLUDE_SUBDIRS)  $(LIBRARY_SUBDIRS) $(TOOL_SUBDIRS),$(subst_local))


# Same thing for "last" rules.
LAST_DEP := $(foreach targ,$(INCLUDE_SUBDIRS)  $(LIBRARY_SUBDIRS) $(TOOL_SUBDIRS),$(subst_last))

# Same thing for "install" rules.
INSTALL_DEP := $(foreach targ,$(INCLUDE_SUBDIRS)  $(LIBRARY_SUBDIRS) $(TOOL_SUBDIRS),$(subst_install))

# Same thing for "default" rules.
DEFAULT_DEP := $(foreach targ,$(INCLUDE_SUBDIRS)  $(LIBRARY_SUBDIRS) $(TOOL_SUBDIRS),$(subst_default))

# No need for dependencies for "clean" and "clobber" rules

# Generate the newly generated dependencies into an auxiliary Makefile fragment

-include deps.mk

deps.mk: Makefile
	@echo $(LOCAL_DEP) | perl -p -e 's/-sep- */\n/g' > $@
	@echo $(LAST_DEP) | perl -p -e 's/-sep- */\n/g' >> $@
	@echo $(INSTALL_DEP) | perl -p -e 's/-sep- */\n/g' >> $@
	@echo $(DEFAULT_DEP) | perl -p -e 's/-sep- */\n/g' >> $@

endif
